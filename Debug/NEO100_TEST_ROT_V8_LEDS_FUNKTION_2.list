
NEO100_TEST_ROT_V8_LEDS_FUNKTION_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000047f4  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000110  080048b0  080048b0  000058b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080049c0  080049c0  00006014  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080049c0  080049c0  00006014  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080049c0  080049c0  00006014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080049c0  080049c0  000059c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080049c4  080049c4  000059c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000014  20000000  080049c8  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001cc  20000014  080049dc  00006014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001e0  080049dc  000061e0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00006014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b0b7  00000000  00000000  0000603c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ec1  00000000  00000000  000110f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b80  00000000  00000000  00012fb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000008e2  00000000  00000000  00013b38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015ec4  00000000  00000000  0001441a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d72b  00000000  00000000  0002a2de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008cf78  00000000  00000000  00037a09  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c4981  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002a74  00000000  00000000  000c49c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000095  00000000  00000000  000c7438  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000014 	.word	0x20000014
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08004898 	.word	0x08004898

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000018 	.word	0x20000018
 8000100:	08004898 	.word	0x08004898

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	@ 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f8f0 	bl	80003ec <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			@ (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__divsi3>:
 8000218:	4603      	mov	r3, r0
 800021a:	430b      	orrs	r3, r1
 800021c:	d47f      	bmi.n	800031e <__divsi3+0x106>
 800021e:	2200      	movs	r2, #0
 8000220:	0843      	lsrs	r3, r0, #1
 8000222:	428b      	cmp	r3, r1
 8000224:	d374      	bcc.n	8000310 <__divsi3+0xf8>
 8000226:	0903      	lsrs	r3, r0, #4
 8000228:	428b      	cmp	r3, r1
 800022a:	d35f      	bcc.n	80002ec <__divsi3+0xd4>
 800022c:	0a03      	lsrs	r3, r0, #8
 800022e:	428b      	cmp	r3, r1
 8000230:	d344      	bcc.n	80002bc <__divsi3+0xa4>
 8000232:	0b03      	lsrs	r3, r0, #12
 8000234:	428b      	cmp	r3, r1
 8000236:	d328      	bcc.n	800028a <__divsi3+0x72>
 8000238:	0c03      	lsrs	r3, r0, #16
 800023a:	428b      	cmp	r3, r1
 800023c:	d30d      	bcc.n	800025a <__divsi3+0x42>
 800023e:	22ff      	movs	r2, #255	@ 0xff
 8000240:	0209      	lsls	r1, r1, #8
 8000242:	ba12      	rev	r2, r2
 8000244:	0c03      	lsrs	r3, r0, #16
 8000246:	428b      	cmp	r3, r1
 8000248:	d302      	bcc.n	8000250 <__divsi3+0x38>
 800024a:	1212      	asrs	r2, r2, #8
 800024c:	0209      	lsls	r1, r1, #8
 800024e:	d065      	beq.n	800031c <__divsi3+0x104>
 8000250:	0b03      	lsrs	r3, r0, #12
 8000252:	428b      	cmp	r3, r1
 8000254:	d319      	bcc.n	800028a <__divsi3+0x72>
 8000256:	e000      	b.n	800025a <__divsi3+0x42>
 8000258:	0a09      	lsrs	r1, r1, #8
 800025a:	0bc3      	lsrs	r3, r0, #15
 800025c:	428b      	cmp	r3, r1
 800025e:	d301      	bcc.n	8000264 <__divsi3+0x4c>
 8000260:	03cb      	lsls	r3, r1, #15
 8000262:	1ac0      	subs	r0, r0, r3
 8000264:	4152      	adcs	r2, r2
 8000266:	0b83      	lsrs	r3, r0, #14
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__divsi3+0x58>
 800026c:	038b      	lsls	r3, r1, #14
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	0b43      	lsrs	r3, r0, #13
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x64>
 8000278:	034b      	lsls	r3, r1, #13
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b03      	lsrs	r3, r0, #12
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x70>
 8000284:	030b      	lsls	r3, r1, #12
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0ac3      	lsrs	r3, r0, #11
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x7c>
 8000290:	02cb      	lsls	r3, r1, #11
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0a83      	lsrs	r3, r0, #10
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x88>
 800029c:	028b      	lsls	r3, r1, #10
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0a43      	lsrs	r3, r0, #9
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x94>
 80002a8:	024b      	lsls	r3, r1, #9
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a03      	lsrs	r3, r0, #8
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0xa0>
 80002b4:	020b      	lsls	r3, r1, #8
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	d2cd      	bcs.n	8000258 <__divsi3+0x40>
 80002bc:	09c3      	lsrs	r3, r0, #7
 80002be:	428b      	cmp	r3, r1
 80002c0:	d301      	bcc.n	80002c6 <__divsi3+0xae>
 80002c2:	01cb      	lsls	r3, r1, #7
 80002c4:	1ac0      	subs	r0, r0, r3
 80002c6:	4152      	adcs	r2, r2
 80002c8:	0983      	lsrs	r3, r0, #6
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d301      	bcc.n	80002d2 <__divsi3+0xba>
 80002ce:	018b      	lsls	r3, r1, #6
 80002d0:	1ac0      	subs	r0, r0, r3
 80002d2:	4152      	adcs	r2, r2
 80002d4:	0943      	lsrs	r3, r0, #5
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xc6>
 80002da:	014b      	lsls	r3, r1, #5
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0903      	lsrs	r3, r0, #4
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xd2>
 80002e6:	010b      	lsls	r3, r1, #4
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	08c3      	lsrs	r3, r0, #3
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xde>
 80002f2:	00cb      	lsls	r3, r1, #3
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0883      	lsrs	r3, r0, #2
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xea>
 80002fe:	008b      	lsls	r3, r1, #2
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0843      	lsrs	r3, r0, #1
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xf6>
 800030a:	004b      	lsls	r3, r1, #1
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	1a41      	subs	r1, r0, r1
 8000312:	d200      	bcs.n	8000316 <__divsi3+0xfe>
 8000314:	4601      	mov	r1, r0
 8000316:	4152      	adcs	r2, r2
 8000318:	4610      	mov	r0, r2
 800031a:	4770      	bx	lr
 800031c:	e05d      	b.n	80003da <__divsi3+0x1c2>
 800031e:	0fca      	lsrs	r2, r1, #31
 8000320:	d000      	beq.n	8000324 <__divsi3+0x10c>
 8000322:	4249      	negs	r1, r1
 8000324:	1003      	asrs	r3, r0, #32
 8000326:	d300      	bcc.n	800032a <__divsi3+0x112>
 8000328:	4240      	negs	r0, r0
 800032a:	4053      	eors	r3, r2
 800032c:	2200      	movs	r2, #0
 800032e:	469c      	mov	ip, r3
 8000330:	0903      	lsrs	r3, r0, #4
 8000332:	428b      	cmp	r3, r1
 8000334:	d32d      	bcc.n	8000392 <__divsi3+0x17a>
 8000336:	0a03      	lsrs	r3, r0, #8
 8000338:	428b      	cmp	r3, r1
 800033a:	d312      	bcc.n	8000362 <__divsi3+0x14a>
 800033c:	22fc      	movs	r2, #252	@ 0xfc
 800033e:	0189      	lsls	r1, r1, #6
 8000340:	ba12      	rev	r2, r2
 8000342:	0a03      	lsrs	r3, r0, #8
 8000344:	428b      	cmp	r3, r1
 8000346:	d30c      	bcc.n	8000362 <__divsi3+0x14a>
 8000348:	0189      	lsls	r1, r1, #6
 800034a:	1192      	asrs	r2, r2, #6
 800034c:	428b      	cmp	r3, r1
 800034e:	d308      	bcc.n	8000362 <__divsi3+0x14a>
 8000350:	0189      	lsls	r1, r1, #6
 8000352:	1192      	asrs	r2, r2, #6
 8000354:	428b      	cmp	r3, r1
 8000356:	d304      	bcc.n	8000362 <__divsi3+0x14a>
 8000358:	0189      	lsls	r1, r1, #6
 800035a:	d03a      	beq.n	80003d2 <__divsi3+0x1ba>
 800035c:	1192      	asrs	r2, r2, #6
 800035e:	e000      	b.n	8000362 <__divsi3+0x14a>
 8000360:	0989      	lsrs	r1, r1, #6
 8000362:	09c3      	lsrs	r3, r0, #7
 8000364:	428b      	cmp	r3, r1
 8000366:	d301      	bcc.n	800036c <__divsi3+0x154>
 8000368:	01cb      	lsls	r3, r1, #7
 800036a:	1ac0      	subs	r0, r0, r3
 800036c:	4152      	adcs	r2, r2
 800036e:	0983      	lsrs	r3, r0, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d301      	bcc.n	8000378 <__divsi3+0x160>
 8000374:	018b      	lsls	r3, r1, #6
 8000376:	1ac0      	subs	r0, r0, r3
 8000378:	4152      	adcs	r2, r2
 800037a:	0943      	lsrs	r3, r0, #5
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x16c>
 8000380:	014b      	lsls	r3, r1, #5
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0903      	lsrs	r3, r0, #4
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x178>
 800038c:	010b      	lsls	r3, r1, #4
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	08c3      	lsrs	r3, r0, #3
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x184>
 8000398:	00cb      	lsls	r3, r1, #3
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0883      	lsrs	r3, r0, #2
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x190>
 80003a4:	008b      	lsls	r3, r1, #2
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	d2d9      	bcs.n	8000360 <__divsi3+0x148>
 80003ac:	0843      	lsrs	r3, r0, #1
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d301      	bcc.n	80003b6 <__divsi3+0x19e>
 80003b2:	004b      	lsls	r3, r1, #1
 80003b4:	1ac0      	subs	r0, r0, r3
 80003b6:	4152      	adcs	r2, r2
 80003b8:	1a41      	subs	r1, r0, r1
 80003ba:	d200      	bcs.n	80003be <__divsi3+0x1a6>
 80003bc:	4601      	mov	r1, r0
 80003be:	4663      	mov	r3, ip
 80003c0:	4152      	adcs	r2, r2
 80003c2:	105b      	asrs	r3, r3, #1
 80003c4:	4610      	mov	r0, r2
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x1b4>
 80003c8:	4240      	negs	r0, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d500      	bpl.n	80003d0 <__divsi3+0x1b8>
 80003ce:	4249      	negs	r1, r1
 80003d0:	4770      	bx	lr
 80003d2:	4663      	mov	r3, ip
 80003d4:	105b      	asrs	r3, r3, #1
 80003d6:	d300      	bcc.n	80003da <__divsi3+0x1c2>
 80003d8:	4240      	negs	r0, r0
 80003da:	b501      	push	{r0, lr}
 80003dc:	2000      	movs	r0, #0
 80003de:	f000 f805 	bl	80003ec <__aeabi_idiv0>
 80003e2:	bd02      	pop	{r1, pc}

080003e4 <__aeabi_idivmod>:
 80003e4:	2900      	cmp	r1, #0
 80003e6:	d0f8      	beq.n	80003da <__divsi3+0x1c2>
 80003e8:	e716      	b.n	8000218 <__divsi3>
 80003ea:	4770      	bx	lr

080003ec <__aeabi_idiv0>:
 80003ec:	4770      	bx	lr
 80003ee:	46c0      	nop			@ (mov r8, r8)

080003f0 <__aeabi_cfrcmple>:
 80003f0:	4684      	mov	ip, r0
 80003f2:	0008      	movs	r0, r1
 80003f4:	4661      	mov	r1, ip
 80003f6:	e7ff      	b.n	80003f8 <__aeabi_cfcmpeq>

080003f8 <__aeabi_cfcmpeq>:
 80003f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80003fa:	f000 fbc3 	bl	8000b84 <__lesf2>
 80003fe:	2800      	cmp	r0, #0
 8000400:	d401      	bmi.n	8000406 <__aeabi_cfcmpeq+0xe>
 8000402:	2100      	movs	r1, #0
 8000404:	42c8      	cmn	r0, r1
 8000406:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000408 <__aeabi_fcmpeq>:
 8000408:	b510      	push	{r4, lr}
 800040a:	f000 fb4b 	bl	8000aa4 <__eqsf2>
 800040e:	4240      	negs	r0, r0
 8000410:	3001      	adds	r0, #1
 8000412:	bd10      	pop	{r4, pc}

08000414 <__aeabi_fcmplt>:
 8000414:	b510      	push	{r4, lr}
 8000416:	f000 fbb5 	bl	8000b84 <__lesf2>
 800041a:	2800      	cmp	r0, #0
 800041c:	db01      	blt.n	8000422 <__aeabi_fcmplt+0xe>
 800041e:	2000      	movs	r0, #0
 8000420:	bd10      	pop	{r4, pc}
 8000422:	2001      	movs	r0, #1
 8000424:	bd10      	pop	{r4, pc}
 8000426:	46c0      	nop			@ (mov r8, r8)

08000428 <__aeabi_fcmple>:
 8000428:	b510      	push	{r4, lr}
 800042a:	f000 fbab 	bl	8000b84 <__lesf2>
 800042e:	2800      	cmp	r0, #0
 8000430:	dd01      	ble.n	8000436 <__aeabi_fcmple+0xe>
 8000432:	2000      	movs	r0, #0
 8000434:	bd10      	pop	{r4, pc}
 8000436:	2001      	movs	r0, #1
 8000438:	bd10      	pop	{r4, pc}
 800043a:	46c0      	nop			@ (mov r8, r8)

0800043c <__aeabi_fcmpgt>:
 800043c:	b510      	push	{r4, lr}
 800043e:	f000 fb59 	bl	8000af4 <__gesf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	dc01      	bgt.n	800044a <__aeabi_fcmpgt+0xe>
 8000446:	2000      	movs	r0, #0
 8000448:	bd10      	pop	{r4, pc}
 800044a:	2001      	movs	r0, #1
 800044c:	bd10      	pop	{r4, pc}
 800044e:	46c0      	nop			@ (mov r8, r8)

08000450 <__aeabi_fcmpge>:
 8000450:	b510      	push	{r4, lr}
 8000452:	f000 fb4f 	bl	8000af4 <__gesf2>
 8000456:	2800      	cmp	r0, #0
 8000458:	da01      	bge.n	800045e <__aeabi_fcmpge+0xe>
 800045a:	2000      	movs	r0, #0
 800045c:	bd10      	pop	{r4, pc}
 800045e:	2001      	movs	r0, #1
 8000460:	bd10      	pop	{r4, pc}
 8000462:	46c0      	nop			@ (mov r8, r8)

08000464 <__aeabi_f2uiz>:
 8000464:	219e      	movs	r1, #158	@ 0x9e
 8000466:	b510      	push	{r4, lr}
 8000468:	05c9      	lsls	r1, r1, #23
 800046a:	1c04      	adds	r4, r0, #0
 800046c:	f7ff fff0 	bl	8000450 <__aeabi_fcmpge>
 8000470:	2800      	cmp	r0, #0
 8000472:	d103      	bne.n	800047c <__aeabi_f2uiz+0x18>
 8000474:	1c20      	adds	r0, r4, #0
 8000476:	f000 ff8b 	bl	8001390 <__aeabi_f2iz>
 800047a:	bd10      	pop	{r4, pc}
 800047c:	219e      	movs	r1, #158	@ 0x9e
 800047e:	1c20      	adds	r0, r4, #0
 8000480:	05c9      	lsls	r1, r1, #23
 8000482:	f000 fd21 	bl	8000ec8 <__aeabi_fsub>
 8000486:	f000 ff83 	bl	8001390 <__aeabi_f2iz>
 800048a:	2380      	movs	r3, #128	@ 0x80
 800048c:	061b      	lsls	r3, r3, #24
 800048e:	469c      	mov	ip, r3
 8000490:	4460      	add	r0, ip
 8000492:	e7f2      	b.n	800047a <__aeabi_f2uiz+0x16>

08000494 <__aeabi_fadd>:
 8000494:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000496:	024b      	lsls	r3, r1, #9
 8000498:	0a5a      	lsrs	r2, r3, #9
 800049a:	4694      	mov	ip, r2
 800049c:	004a      	lsls	r2, r1, #1
 800049e:	0fc9      	lsrs	r1, r1, #31
 80004a0:	46ce      	mov	lr, r9
 80004a2:	4647      	mov	r7, r8
 80004a4:	4689      	mov	r9, r1
 80004a6:	0045      	lsls	r5, r0, #1
 80004a8:	0246      	lsls	r6, r0, #9
 80004aa:	0e2d      	lsrs	r5, r5, #24
 80004ac:	0e12      	lsrs	r2, r2, #24
 80004ae:	b580      	push	{r7, lr}
 80004b0:	0999      	lsrs	r1, r3, #6
 80004b2:	0a77      	lsrs	r7, r6, #9
 80004b4:	0fc4      	lsrs	r4, r0, #31
 80004b6:	09b6      	lsrs	r6, r6, #6
 80004b8:	1aab      	subs	r3, r5, r2
 80004ba:	454c      	cmp	r4, r9
 80004bc:	d020      	beq.n	8000500 <__aeabi_fadd+0x6c>
 80004be:	2b00      	cmp	r3, #0
 80004c0:	dd0c      	ble.n	80004dc <__aeabi_fadd+0x48>
 80004c2:	2a00      	cmp	r2, #0
 80004c4:	d134      	bne.n	8000530 <__aeabi_fadd+0x9c>
 80004c6:	2900      	cmp	r1, #0
 80004c8:	d02a      	beq.n	8000520 <__aeabi_fadd+0x8c>
 80004ca:	1e5a      	subs	r2, r3, #1
 80004cc:	2b01      	cmp	r3, #1
 80004ce:	d100      	bne.n	80004d2 <__aeabi_fadd+0x3e>
 80004d0:	e08f      	b.n	80005f2 <__aeabi_fadd+0x15e>
 80004d2:	2bff      	cmp	r3, #255	@ 0xff
 80004d4:	d100      	bne.n	80004d8 <__aeabi_fadd+0x44>
 80004d6:	e0cd      	b.n	8000674 <__aeabi_fadd+0x1e0>
 80004d8:	0013      	movs	r3, r2
 80004da:	e02f      	b.n	800053c <__aeabi_fadd+0xa8>
 80004dc:	2b00      	cmp	r3, #0
 80004de:	d060      	beq.n	80005a2 <__aeabi_fadd+0x10e>
 80004e0:	1b53      	subs	r3, r2, r5
 80004e2:	2d00      	cmp	r5, #0
 80004e4:	d000      	beq.n	80004e8 <__aeabi_fadd+0x54>
 80004e6:	e0ee      	b.n	80006c6 <__aeabi_fadd+0x232>
 80004e8:	2e00      	cmp	r6, #0
 80004ea:	d100      	bne.n	80004ee <__aeabi_fadd+0x5a>
 80004ec:	e13e      	b.n	800076c <__aeabi_fadd+0x2d8>
 80004ee:	1e5c      	subs	r4, r3, #1
 80004f0:	2b01      	cmp	r3, #1
 80004f2:	d100      	bne.n	80004f6 <__aeabi_fadd+0x62>
 80004f4:	e16b      	b.n	80007ce <__aeabi_fadd+0x33a>
 80004f6:	2bff      	cmp	r3, #255	@ 0xff
 80004f8:	d100      	bne.n	80004fc <__aeabi_fadd+0x68>
 80004fa:	e0b9      	b.n	8000670 <__aeabi_fadd+0x1dc>
 80004fc:	0023      	movs	r3, r4
 80004fe:	e0e7      	b.n	80006d0 <__aeabi_fadd+0x23c>
 8000500:	2b00      	cmp	r3, #0
 8000502:	dc00      	bgt.n	8000506 <__aeabi_fadd+0x72>
 8000504:	e0a4      	b.n	8000650 <__aeabi_fadd+0x1bc>
 8000506:	2a00      	cmp	r2, #0
 8000508:	d069      	beq.n	80005de <__aeabi_fadd+0x14a>
 800050a:	2dff      	cmp	r5, #255	@ 0xff
 800050c:	d100      	bne.n	8000510 <__aeabi_fadd+0x7c>
 800050e:	e0b1      	b.n	8000674 <__aeabi_fadd+0x1e0>
 8000510:	2280      	movs	r2, #128	@ 0x80
 8000512:	04d2      	lsls	r2, r2, #19
 8000514:	4311      	orrs	r1, r2
 8000516:	2b1b      	cmp	r3, #27
 8000518:	dc00      	bgt.n	800051c <__aeabi_fadd+0x88>
 800051a:	e0e9      	b.n	80006f0 <__aeabi_fadd+0x25c>
 800051c:	002b      	movs	r3, r5
 800051e:	3605      	adds	r6, #5
 8000520:	08f7      	lsrs	r7, r6, #3
 8000522:	2bff      	cmp	r3, #255	@ 0xff
 8000524:	d100      	bne.n	8000528 <__aeabi_fadd+0x94>
 8000526:	e0a5      	b.n	8000674 <__aeabi_fadd+0x1e0>
 8000528:	027a      	lsls	r2, r7, #9
 800052a:	0a52      	lsrs	r2, r2, #9
 800052c:	b2d8      	uxtb	r0, r3
 800052e:	e030      	b.n	8000592 <__aeabi_fadd+0xfe>
 8000530:	2dff      	cmp	r5, #255	@ 0xff
 8000532:	d100      	bne.n	8000536 <__aeabi_fadd+0xa2>
 8000534:	e09e      	b.n	8000674 <__aeabi_fadd+0x1e0>
 8000536:	2280      	movs	r2, #128	@ 0x80
 8000538:	04d2      	lsls	r2, r2, #19
 800053a:	4311      	orrs	r1, r2
 800053c:	2001      	movs	r0, #1
 800053e:	2b1b      	cmp	r3, #27
 8000540:	dc08      	bgt.n	8000554 <__aeabi_fadd+0xc0>
 8000542:	0008      	movs	r0, r1
 8000544:	2220      	movs	r2, #32
 8000546:	40d8      	lsrs	r0, r3
 8000548:	1ad3      	subs	r3, r2, r3
 800054a:	4099      	lsls	r1, r3
 800054c:	000b      	movs	r3, r1
 800054e:	1e5a      	subs	r2, r3, #1
 8000550:	4193      	sbcs	r3, r2
 8000552:	4318      	orrs	r0, r3
 8000554:	1a36      	subs	r6, r6, r0
 8000556:	0173      	lsls	r3, r6, #5
 8000558:	d400      	bmi.n	800055c <__aeabi_fadd+0xc8>
 800055a:	e071      	b.n	8000640 <__aeabi_fadd+0x1ac>
 800055c:	01b6      	lsls	r6, r6, #6
 800055e:	09b7      	lsrs	r7, r6, #6
 8000560:	0038      	movs	r0, r7
 8000562:	f000 ff35 	bl	80013d0 <__clzsi2>
 8000566:	003b      	movs	r3, r7
 8000568:	3805      	subs	r0, #5
 800056a:	4083      	lsls	r3, r0
 800056c:	4285      	cmp	r5, r0
 800056e:	dd4d      	ble.n	800060c <__aeabi_fadd+0x178>
 8000570:	4eb4      	ldr	r6, [pc, #720]	@ (8000844 <__aeabi_fadd+0x3b0>)
 8000572:	1a2d      	subs	r5, r5, r0
 8000574:	401e      	ands	r6, r3
 8000576:	075a      	lsls	r2, r3, #29
 8000578:	d068      	beq.n	800064c <__aeabi_fadd+0x1b8>
 800057a:	220f      	movs	r2, #15
 800057c:	4013      	ands	r3, r2
 800057e:	2b04      	cmp	r3, #4
 8000580:	d064      	beq.n	800064c <__aeabi_fadd+0x1b8>
 8000582:	3604      	adds	r6, #4
 8000584:	0173      	lsls	r3, r6, #5
 8000586:	d561      	bpl.n	800064c <__aeabi_fadd+0x1b8>
 8000588:	1c68      	adds	r0, r5, #1
 800058a:	2dfe      	cmp	r5, #254	@ 0xfe
 800058c:	d154      	bne.n	8000638 <__aeabi_fadd+0x1a4>
 800058e:	20ff      	movs	r0, #255	@ 0xff
 8000590:	2200      	movs	r2, #0
 8000592:	05c0      	lsls	r0, r0, #23
 8000594:	4310      	orrs	r0, r2
 8000596:	07e4      	lsls	r4, r4, #31
 8000598:	4320      	orrs	r0, r4
 800059a:	bcc0      	pop	{r6, r7}
 800059c:	46b9      	mov	r9, r7
 800059e:	46b0      	mov	r8, r6
 80005a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80005a2:	22fe      	movs	r2, #254	@ 0xfe
 80005a4:	4690      	mov	r8, r2
 80005a6:	1c68      	adds	r0, r5, #1
 80005a8:	0002      	movs	r2, r0
 80005aa:	4640      	mov	r0, r8
 80005ac:	4210      	tst	r0, r2
 80005ae:	d16b      	bne.n	8000688 <__aeabi_fadd+0x1f4>
 80005b0:	2d00      	cmp	r5, #0
 80005b2:	d000      	beq.n	80005b6 <__aeabi_fadd+0x122>
 80005b4:	e0dd      	b.n	8000772 <__aeabi_fadd+0x2de>
 80005b6:	2e00      	cmp	r6, #0
 80005b8:	d100      	bne.n	80005bc <__aeabi_fadd+0x128>
 80005ba:	e102      	b.n	80007c2 <__aeabi_fadd+0x32e>
 80005bc:	2900      	cmp	r1, #0
 80005be:	d0b3      	beq.n	8000528 <__aeabi_fadd+0x94>
 80005c0:	2280      	movs	r2, #128	@ 0x80
 80005c2:	1a77      	subs	r7, r6, r1
 80005c4:	04d2      	lsls	r2, r2, #19
 80005c6:	4217      	tst	r7, r2
 80005c8:	d100      	bne.n	80005cc <__aeabi_fadd+0x138>
 80005ca:	e136      	b.n	800083a <__aeabi_fadd+0x3a6>
 80005cc:	464c      	mov	r4, r9
 80005ce:	1b8e      	subs	r6, r1, r6
 80005d0:	d061      	beq.n	8000696 <__aeabi_fadd+0x202>
 80005d2:	2001      	movs	r0, #1
 80005d4:	4216      	tst	r6, r2
 80005d6:	d130      	bne.n	800063a <__aeabi_fadd+0x1a6>
 80005d8:	2300      	movs	r3, #0
 80005da:	08f7      	lsrs	r7, r6, #3
 80005dc:	e7a4      	b.n	8000528 <__aeabi_fadd+0x94>
 80005de:	2900      	cmp	r1, #0
 80005e0:	d09e      	beq.n	8000520 <__aeabi_fadd+0x8c>
 80005e2:	1e5a      	subs	r2, r3, #1
 80005e4:	2b01      	cmp	r3, #1
 80005e6:	d100      	bne.n	80005ea <__aeabi_fadd+0x156>
 80005e8:	e0ca      	b.n	8000780 <__aeabi_fadd+0x2ec>
 80005ea:	2bff      	cmp	r3, #255	@ 0xff
 80005ec:	d042      	beq.n	8000674 <__aeabi_fadd+0x1e0>
 80005ee:	0013      	movs	r3, r2
 80005f0:	e791      	b.n	8000516 <__aeabi_fadd+0x82>
 80005f2:	1a71      	subs	r1, r6, r1
 80005f4:	014b      	lsls	r3, r1, #5
 80005f6:	d400      	bmi.n	80005fa <__aeabi_fadd+0x166>
 80005f8:	e0d1      	b.n	800079e <__aeabi_fadd+0x30a>
 80005fa:	018f      	lsls	r7, r1, #6
 80005fc:	09bf      	lsrs	r7, r7, #6
 80005fe:	0038      	movs	r0, r7
 8000600:	f000 fee6 	bl	80013d0 <__clzsi2>
 8000604:	003b      	movs	r3, r7
 8000606:	3805      	subs	r0, #5
 8000608:	4083      	lsls	r3, r0
 800060a:	2501      	movs	r5, #1
 800060c:	2220      	movs	r2, #32
 800060e:	1b40      	subs	r0, r0, r5
 8000610:	3001      	adds	r0, #1
 8000612:	1a12      	subs	r2, r2, r0
 8000614:	001e      	movs	r6, r3
 8000616:	4093      	lsls	r3, r2
 8000618:	40c6      	lsrs	r6, r0
 800061a:	1e5a      	subs	r2, r3, #1
 800061c:	4193      	sbcs	r3, r2
 800061e:	431e      	orrs	r6, r3
 8000620:	d039      	beq.n	8000696 <__aeabi_fadd+0x202>
 8000622:	0773      	lsls	r3, r6, #29
 8000624:	d100      	bne.n	8000628 <__aeabi_fadd+0x194>
 8000626:	e11b      	b.n	8000860 <__aeabi_fadd+0x3cc>
 8000628:	230f      	movs	r3, #15
 800062a:	2500      	movs	r5, #0
 800062c:	4033      	ands	r3, r6
 800062e:	2b04      	cmp	r3, #4
 8000630:	d1a7      	bne.n	8000582 <__aeabi_fadd+0xee>
 8000632:	2001      	movs	r0, #1
 8000634:	0172      	lsls	r2, r6, #5
 8000636:	d57c      	bpl.n	8000732 <__aeabi_fadd+0x29e>
 8000638:	b2c0      	uxtb	r0, r0
 800063a:	01b2      	lsls	r2, r6, #6
 800063c:	0a52      	lsrs	r2, r2, #9
 800063e:	e7a8      	b.n	8000592 <__aeabi_fadd+0xfe>
 8000640:	0773      	lsls	r3, r6, #29
 8000642:	d003      	beq.n	800064c <__aeabi_fadd+0x1b8>
 8000644:	230f      	movs	r3, #15
 8000646:	4033      	ands	r3, r6
 8000648:	2b04      	cmp	r3, #4
 800064a:	d19a      	bne.n	8000582 <__aeabi_fadd+0xee>
 800064c:	002b      	movs	r3, r5
 800064e:	e767      	b.n	8000520 <__aeabi_fadd+0x8c>
 8000650:	2b00      	cmp	r3, #0
 8000652:	d023      	beq.n	800069c <__aeabi_fadd+0x208>
 8000654:	1b53      	subs	r3, r2, r5
 8000656:	2d00      	cmp	r5, #0
 8000658:	d17b      	bne.n	8000752 <__aeabi_fadd+0x2be>
 800065a:	2e00      	cmp	r6, #0
 800065c:	d100      	bne.n	8000660 <__aeabi_fadd+0x1cc>
 800065e:	e086      	b.n	800076e <__aeabi_fadd+0x2da>
 8000660:	1e5d      	subs	r5, r3, #1
 8000662:	2b01      	cmp	r3, #1
 8000664:	d100      	bne.n	8000668 <__aeabi_fadd+0x1d4>
 8000666:	e08b      	b.n	8000780 <__aeabi_fadd+0x2ec>
 8000668:	2bff      	cmp	r3, #255	@ 0xff
 800066a:	d002      	beq.n	8000672 <__aeabi_fadd+0x1de>
 800066c:	002b      	movs	r3, r5
 800066e:	e075      	b.n	800075c <__aeabi_fadd+0x2c8>
 8000670:	464c      	mov	r4, r9
 8000672:	4667      	mov	r7, ip
 8000674:	2f00      	cmp	r7, #0
 8000676:	d100      	bne.n	800067a <__aeabi_fadd+0x1e6>
 8000678:	e789      	b.n	800058e <__aeabi_fadd+0xfa>
 800067a:	2280      	movs	r2, #128	@ 0x80
 800067c:	03d2      	lsls	r2, r2, #15
 800067e:	433a      	orrs	r2, r7
 8000680:	0252      	lsls	r2, r2, #9
 8000682:	20ff      	movs	r0, #255	@ 0xff
 8000684:	0a52      	lsrs	r2, r2, #9
 8000686:	e784      	b.n	8000592 <__aeabi_fadd+0xfe>
 8000688:	1a77      	subs	r7, r6, r1
 800068a:	017b      	lsls	r3, r7, #5
 800068c:	d46b      	bmi.n	8000766 <__aeabi_fadd+0x2d2>
 800068e:	2f00      	cmp	r7, #0
 8000690:	d000      	beq.n	8000694 <__aeabi_fadd+0x200>
 8000692:	e765      	b.n	8000560 <__aeabi_fadd+0xcc>
 8000694:	2400      	movs	r4, #0
 8000696:	2000      	movs	r0, #0
 8000698:	2200      	movs	r2, #0
 800069a:	e77a      	b.n	8000592 <__aeabi_fadd+0xfe>
 800069c:	22fe      	movs	r2, #254	@ 0xfe
 800069e:	1c6b      	adds	r3, r5, #1
 80006a0:	421a      	tst	r2, r3
 80006a2:	d149      	bne.n	8000738 <__aeabi_fadd+0x2a4>
 80006a4:	2d00      	cmp	r5, #0
 80006a6:	d000      	beq.n	80006aa <__aeabi_fadd+0x216>
 80006a8:	e09f      	b.n	80007ea <__aeabi_fadd+0x356>
 80006aa:	2e00      	cmp	r6, #0
 80006ac:	d100      	bne.n	80006b0 <__aeabi_fadd+0x21c>
 80006ae:	e0ba      	b.n	8000826 <__aeabi_fadd+0x392>
 80006b0:	2900      	cmp	r1, #0
 80006b2:	d100      	bne.n	80006b6 <__aeabi_fadd+0x222>
 80006b4:	e0cf      	b.n	8000856 <__aeabi_fadd+0x3c2>
 80006b6:	1872      	adds	r2, r6, r1
 80006b8:	0153      	lsls	r3, r2, #5
 80006ba:	d400      	bmi.n	80006be <__aeabi_fadd+0x22a>
 80006bc:	e0cd      	b.n	800085a <__aeabi_fadd+0x3c6>
 80006be:	0192      	lsls	r2, r2, #6
 80006c0:	2001      	movs	r0, #1
 80006c2:	0a52      	lsrs	r2, r2, #9
 80006c4:	e765      	b.n	8000592 <__aeabi_fadd+0xfe>
 80006c6:	2aff      	cmp	r2, #255	@ 0xff
 80006c8:	d0d2      	beq.n	8000670 <__aeabi_fadd+0x1dc>
 80006ca:	2080      	movs	r0, #128	@ 0x80
 80006cc:	04c0      	lsls	r0, r0, #19
 80006ce:	4306      	orrs	r6, r0
 80006d0:	2001      	movs	r0, #1
 80006d2:	2b1b      	cmp	r3, #27
 80006d4:	dc08      	bgt.n	80006e8 <__aeabi_fadd+0x254>
 80006d6:	0030      	movs	r0, r6
 80006d8:	2420      	movs	r4, #32
 80006da:	40d8      	lsrs	r0, r3
 80006dc:	1ae3      	subs	r3, r4, r3
 80006de:	409e      	lsls	r6, r3
 80006e0:	0033      	movs	r3, r6
 80006e2:	1e5c      	subs	r4, r3, #1
 80006e4:	41a3      	sbcs	r3, r4
 80006e6:	4318      	orrs	r0, r3
 80006e8:	464c      	mov	r4, r9
 80006ea:	0015      	movs	r5, r2
 80006ec:	1a0e      	subs	r6, r1, r0
 80006ee:	e732      	b.n	8000556 <__aeabi_fadd+0xc2>
 80006f0:	0008      	movs	r0, r1
 80006f2:	2220      	movs	r2, #32
 80006f4:	40d8      	lsrs	r0, r3
 80006f6:	1ad3      	subs	r3, r2, r3
 80006f8:	4099      	lsls	r1, r3
 80006fa:	000b      	movs	r3, r1
 80006fc:	1e5a      	subs	r2, r3, #1
 80006fe:	4193      	sbcs	r3, r2
 8000700:	4303      	orrs	r3, r0
 8000702:	18f6      	adds	r6, r6, r3
 8000704:	0173      	lsls	r3, r6, #5
 8000706:	d59b      	bpl.n	8000640 <__aeabi_fadd+0x1ac>
 8000708:	3501      	adds	r5, #1
 800070a:	2dff      	cmp	r5, #255	@ 0xff
 800070c:	d100      	bne.n	8000710 <__aeabi_fadd+0x27c>
 800070e:	e73e      	b.n	800058e <__aeabi_fadd+0xfa>
 8000710:	2301      	movs	r3, #1
 8000712:	494d      	ldr	r1, [pc, #308]	@ (8000848 <__aeabi_fadd+0x3b4>)
 8000714:	0872      	lsrs	r2, r6, #1
 8000716:	4033      	ands	r3, r6
 8000718:	400a      	ands	r2, r1
 800071a:	431a      	orrs	r2, r3
 800071c:	0016      	movs	r6, r2
 800071e:	0753      	lsls	r3, r2, #29
 8000720:	d004      	beq.n	800072c <__aeabi_fadd+0x298>
 8000722:	230f      	movs	r3, #15
 8000724:	4013      	ands	r3, r2
 8000726:	2b04      	cmp	r3, #4
 8000728:	d000      	beq.n	800072c <__aeabi_fadd+0x298>
 800072a:	e72a      	b.n	8000582 <__aeabi_fadd+0xee>
 800072c:	0173      	lsls	r3, r6, #5
 800072e:	d500      	bpl.n	8000732 <__aeabi_fadd+0x29e>
 8000730:	e72a      	b.n	8000588 <__aeabi_fadd+0xf4>
 8000732:	002b      	movs	r3, r5
 8000734:	08f7      	lsrs	r7, r6, #3
 8000736:	e6f7      	b.n	8000528 <__aeabi_fadd+0x94>
 8000738:	2bff      	cmp	r3, #255	@ 0xff
 800073a:	d100      	bne.n	800073e <__aeabi_fadd+0x2aa>
 800073c:	e727      	b.n	800058e <__aeabi_fadd+0xfa>
 800073e:	1871      	adds	r1, r6, r1
 8000740:	0849      	lsrs	r1, r1, #1
 8000742:	074a      	lsls	r2, r1, #29
 8000744:	d02f      	beq.n	80007a6 <__aeabi_fadd+0x312>
 8000746:	220f      	movs	r2, #15
 8000748:	400a      	ands	r2, r1
 800074a:	2a04      	cmp	r2, #4
 800074c:	d02b      	beq.n	80007a6 <__aeabi_fadd+0x312>
 800074e:	1d0e      	adds	r6, r1, #4
 8000750:	e6e6      	b.n	8000520 <__aeabi_fadd+0x8c>
 8000752:	2aff      	cmp	r2, #255	@ 0xff
 8000754:	d08d      	beq.n	8000672 <__aeabi_fadd+0x1de>
 8000756:	2080      	movs	r0, #128	@ 0x80
 8000758:	04c0      	lsls	r0, r0, #19
 800075a:	4306      	orrs	r6, r0
 800075c:	2b1b      	cmp	r3, #27
 800075e:	dd24      	ble.n	80007aa <__aeabi_fadd+0x316>
 8000760:	0013      	movs	r3, r2
 8000762:	1d4e      	adds	r6, r1, #5
 8000764:	e6dc      	b.n	8000520 <__aeabi_fadd+0x8c>
 8000766:	464c      	mov	r4, r9
 8000768:	1b8f      	subs	r7, r1, r6
 800076a:	e6f9      	b.n	8000560 <__aeabi_fadd+0xcc>
 800076c:	464c      	mov	r4, r9
 800076e:	000e      	movs	r6, r1
 8000770:	e6d6      	b.n	8000520 <__aeabi_fadd+0x8c>
 8000772:	2e00      	cmp	r6, #0
 8000774:	d149      	bne.n	800080a <__aeabi_fadd+0x376>
 8000776:	2900      	cmp	r1, #0
 8000778:	d068      	beq.n	800084c <__aeabi_fadd+0x3b8>
 800077a:	4667      	mov	r7, ip
 800077c:	464c      	mov	r4, r9
 800077e:	e77c      	b.n	800067a <__aeabi_fadd+0x1e6>
 8000780:	1870      	adds	r0, r6, r1
 8000782:	0143      	lsls	r3, r0, #5
 8000784:	d574      	bpl.n	8000870 <__aeabi_fadd+0x3dc>
 8000786:	4930      	ldr	r1, [pc, #192]	@ (8000848 <__aeabi_fadd+0x3b4>)
 8000788:	0840      	lsrs	r0, r0, #1
 800078a:	4001      	ands	r1, r0
 800078c:	0743      	lsls	r3, r0, #29
 800078e:	d009      	beq.n	80007a4 <__aeabi_fadd+0x310>
 8000790:	230f      	movs	r3, #15
 8000792:	4003      	ands	r3, r0
 8000794:	2b04      	cmp	r3, #4
 8000796:	d005      	beq.n	80007a4 <__aeabi_fadd+0x310>
 8000798:	2302      	movs	r3, #2
 800079a:	1d0e      	adds	r6, r1, #4
 800079c:	e6c0      	b.n	8000520 <__aeabi_fadd+0x8c>
 800079e:	2301      	movs	r3, #1
 80007a0:	08cf      	lsrs	r7, r1, #3
 80007a2:	e6c1      	b.n	8000528 <__aeabi_fadd+0x94>
 80007a4:	2302      	movs	r3, #2
 80007a6:	08cf      	lsrs	r7, r1, #3
 80007a8:	e6be      	b.n	8000528 <__aeabi_fadd+0x94>
 80007aa:	2520      	movs	r5, #32
 80007ac:	0030      	movs	r0, r6
 80007ae:	40d8      	lsrs	r0, r3
 80007b0:	1aeb      	subs	r3, r5, r3
 80007b2:	409e      	lsls	r6, r3
 80007b4:	0033      	movs	r3, r6
 80007b6:	1e5d      	subs	r5, r3, #1
 80007b8:	41ab      	sbcs	r3, r5
 80007ba:	4303      	orrs	r3, r0
 80007bc:	0015      	movs	r5, r2
 80007be:	185e      	adds	r6, r3, r1
 80007c0:	e7a0      	b.n	8000704 <__aeabi_fadd+0x270>
 80007c2:	2900      	cmp	r1, #0
 80007c4:	d100      	bne.n	80007c8 <__aeabi_fadd+0x334>
 80007c6:	e765      	b.n	8000694 <__aeabi_fadd+0x200>
 80007c8:	464c      	mov	r4, r9
 80007ca:	4667      	mov	r7, ip
 80007cc:	e6ac      	b.n	8000528 <__aeabi_fadd+0x94>
 80007ce:	1b8f      	subs	r7, r1, r6
 80007d0:	017b      	lsls	r3, r7, #5
 80007d2:	d52e      	bpl.n	8000832 <__aeabi_fadd+0x39e>
 80007d4:	01bf      	lsls	r7, r7, #6
 80007d6:	09bf      	lsrs	r7, r7, #6
 80007d8:	0038      	movs	r0, r7
 80007da:	f000 fdf9 	bl	80013d0 <__clzsi2>
 80007de:	003b      	movs	r3, r7
 80007e0:	3805      	subs	r0, #5
 80007e2:	4083      	lsls	r3, r0
 80007e4:	464c      	mov	r4, r9
 80007e6:	3501      	adds	r5, #1
 80007e8:	e710      	b.n	800060c <__aeabi_fadd+0x178>
 80007ea:	2e00      	cmp	r6, #0
 80007ec:	d100      	bne.n	80007f0 <__aeabi_fadd+0x35c>
 80007ee:	e740      	b.n	8000672 <__aeabi_fadd+0x1de>
 80007f0:	2900      	cmp	r1, #0
 80007f2:	d100      	bne.n	80007f6 <__aeabi_fadd+0x362>
 80007f4:	e741      	b.n	800067a <__aeabi_fadd+0x1e6>
 80007f6:	2380      	movs	r3, #128	@ 0x80
 80007f8:	03db      	lsls	r3, r3, #15
 80007fa:	429f      	cmp	r7, r3
 80007fc:	d200      	bcs.n	8000800 <__aeabi_fadd+0x36c>
 80007fe:	e73c      	b.n	800067a <__aeabi_fadd+0x1e6>
 8000800:	459c      	cmp	ip, r3
 8000802:	d300      	bcc.n	8000806 <__aeabi_fadd+0x372>
 8000804:	e739      	b.n	800067a <__aeabi_fadd+0x1e6>
 8000806:	4667      	mov	r7, ip
 8000808:	e737      	b.n	800067a <__aeabi_fadd+0x1e6>
 800080a:	2900      	cmp	r1, #0
 800080c:	d100      	bne.n	8000810 <__aeabi_fadd+0x37c>
 800080e:	e734      	b.n	800067a <__aeabi_fadd+0x1e6>
 8000810:	2380      	movs	r3, #128	@ 0x80
 8000812:	03db      	lsls	r3, r3, #15
 8000814:	429f      	cmp	r7, r3
 8000816:	d200      	bcs.n	800081a <__aeabi_fadd+0x386>
 8000818:	e72f      	b.n	800067a <__aeabi_fadd+0x1e6>
 800081a:	459c      	cmp	ip, r3
 800081c:	d300      	bcc.n	8000820 <__aeabi_fadd+0x38c>
 800081e:	e72c      	b.n	800067a <__aeabi_fadd+0x1e6>
 8000820:	464c      	mov	r4, r9
 8000822:	4667      	mov	r7, ip
 8000824:	e729      	b.n	800067a <__aeabi_fadd+0x1e6>
 8000826:	2900      	cmp	r1, #0
 8000828:	d100      	bne.n	800082c <__aeabi_fadd+0x398>
 800082a:	e734      	b.n	8000696 <__aeabi_fadd+0x202>
 800082c:	2300      	movs	r3, #0
 800082e:	08cf      	lsrs	r7, r1, #3
 8000830:	e67a      	b.n	8000528 <__aeabi_fadd+0x94>
 8000832:	464c      	mov	r4, r9
 8000834:	2301      	movs	r3, #1
 8000836:	08ff      	lsrs	r7, r7, #3
 8000838:	e676      	b.n	8000528 <__aeabi_fadd+0x94>
 800083a:	2f00      	cmp	r7, #0
 800083c:	d100      	bne.n	8000840 <__aeabi_fadd+0x3ac>
 800083e:	e729      	b.n	8000694 <__aeabi_fadd+0x200>
 8000840:	08ff      	lsrs	r7, r7, #3
 8000842:	e671      	b.n	8000528 <__aeabi_fadd+0x94>
 8000844:	fbffffff 	.word	0xfbffffff
 8000848:	7dffffff 	.word	0x7dffffff
 800084c:	2280      	movs	r2, #128	@ 0x80
 800084e:	2400      	movs	r4, #0
 8000850:	20ff      	movs	r0, #255	@ 0xff
 8000852:	03d2      	lsls	r2, r2, #15
 8000854:	e69d      	b.n	8000592 <__aeabi_fadd+0xfe>
 8000856:	2300      	movs	r3, #0
 8000858:	e666      	b.n	8000528 <__aeabi_fadd+0x94>
 800085a:	2300      	movs	r3, #0
 800085c:	08d7      	lsrs	r7, r2, #3
 800085e:	e663      	b.n	8000528 <__aeabi_fadd+0x94>
 8000860:	2001      	movs	r0, #1
 8000862:	0172      	lsls	r2, r6, #5
 8000864:	d500      	bpl.n	8000868 <__aeabi_fadd+0x3d4>
 8000866:	e6e7      	b.n	8000638 <__aeabi_fadd+0x1a4>
 8000868:	0031      	movs	r1, r6
 800086a:	2300      	movs	r3, #0
 800086c:	08cf      	lsrs	r7, r1, #3
 800086e:	e65b      	b.n	8000528 <__aeabi_fadd+0x94>
 8000870:	2301      	movs	r3, #1
 8000872:	08c7      	lsrs	r7, r0, #3
 8000874:	e658      	b.n	8000528 <__aeabi_fadd+0x94>
 8000876:	46c0      	nop			@ (mov r8, r8)

08000878 <__aeabi_fdiv>:
 8000878:	b5f0      	push	{r4, r5, r6, r7, lr}
 800087a:	4646      	mov	r6, r8
 800087c:	464f      	mov	r7, r9
 800087e:	46d6      	mov	lr, sl
 8000880:	0245      	lsls	r5, r0, #9
 8000882:	b5c0      	push	{r6, r7, lr}
 8000884:	0fc3      	lsrs	r3, r0, #31
 8000886:	0047      	lsls	r7, r0, #1
 8000888:	4698      	mov	r8, r3
 800088a:	1c0e      	adds	r6, r1, #0
 800088c:	0a6d      	lsrs	r5, r5, #9
 800088e:	0e3f      	lsrs	r7, r7, #24
 8000890:	d05b      	beq.n	800094a <__aeabi_fdiv+0xd2>
 8000892:	2fff      	cmp	r7, #255	@ 0xff
 8000894:	d021      	beq.n	80008da <__aeabi_fdiv+0x62>
 8000896:	2380      	movs	r3, #128	@ 0x80
 8000898:	00ed      	lsls	r5, r5, #3
 800089a:	04db      	lsls	r3, r3, #19
 800089c:	431d      	orrs	r5, r3
 800089e:	2300      	movs	r3, #0
 80008a0:	4699      	mov	r9, r3
 80008a2:	469a      	mov	sl, r3
 80008a4:	3f7f      	subs	r7, #127	@ 0x7f
 80008a6:	0274      	lsls	r4, r6, #9
 80008a8:	0073      	lsls	r3, r6, #1
 80008aa:	0a64      	lsrs	r4, r4, #9
 80008ac:	0e1b      	lsrs	r3, r3, #24
 80008ae:	0ff6      	lsrs	r6, r6, #31
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d020      	beq.n	80008f6 <__aeabi_fdiv+0x7e>
 80008b4:	2bff      	cmp	r3, #255	@ 0xff
 80008b6:	d043      	beq.n	8000940 <__aeabi_fdiv+0xc8>
 80008b8:	2280      	movs	r2, #128	@ 0x80
 80008ba:	2000      	movs	r0, #0
 80008bc:	00e4      	lsls	r4, r4, #3
 80008be:	04d2      	lsls	r2, r2, #19
 80008c0:	4314      	orrs	r4, r2
 80008c2:	3b7f      	subs	r3, #127	@ 0x7f
 80008c4:	4642      	mov	r2, r8
 80008c6:	1aff      	subs	r7, r7, r3
 80008c8:	464b      	mov	r3, r9
 80008ca:	4072      	eors	r2, r6
 80008cc:	2b0f      	cmp	r3, #15
 80008ce:	d900      	bls.n	80008d2 <__aeabi_fdiv+0x5a>
 80008d0:	e09d      	b.n	8000a0e <__aeabi_fdiv+0x196>
 80008d2:	4971      	ldr	r1, [pc, #452]	@ (8000a98 <__aeabi_fdiv+0x220>)
 80008d4:	009b      	lsls	r3, r3, #2
 80008d6:	58cb      	ldr	r3, [r1, r3]
 80008d8:	469f      	mov	pc, r3
 80008da:	2d00      	cmp	r5, #0
 80008dc:	d15a      	bne.n	8000994 <__aeabi_fdiv+0x11c>
 80008de:	2308      	movs	r3, #8
 80008e0:	4699      	mov	r9, r3
 80008e2:	3b06      	subs	r3, #6
 80008e4:	0274      	lsls	r4, r6, #9
 80008e6:	469a      	mov	sl, r3
 80008e8:	0073      	lsls	r3, r6, #1
 80008ea:	27ff      	movs	r7, #255	@ 0xff
 80008ec:	0a64      	lsrs	r4, r4, #9
 80008ee:	0e1b      	lsrs	r3, r3, #24
 80008f0:	0ff6      	lsrs	r6, r6, #31
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d1de      	bne.n	80008b4 <__aeabi_fdiv+0x3c>
 80008f6:	2c00      	cmp	r4, #0
 80008f8:	d13b      	bne.n	8000972 <__aeabi_fdiv+0xfa>
 80008fa:	2301      	movs	r3, #1
 80008fc:	4642      	mov	r2, r8
 80008fe:	4649      	mov	r1, r9
 8000900:	4072      	eors	r2, r6
 8000902:	4319      	orrs	r1, r3
 8000904:	290e      	cmp	r1, #14
 8000906:	d818      	bhi.n	800093a <__aeabi_fdiv+0xc2>
 8000908:	4864      	ldr	r0, [pc, #400]	@ (8000a9c <__aeabi_fdiv+0x224>)
 800090a:	0089      	lsls	r1, r1, #2
 800090c:	5841      	ldr	r1, [r0, r1]
 800090e:	468f      	mov	pc, r1
 8000910:	4653      	mov	r3, sl
 8000912:	2b02      	cmp	r3, #2
 8000914:	d100      	bne.n	8000918 <__aeabi_fdiv+0xa0>
 8000916:	e0b8      	b.n	8000a8a <__aeabi_fdiv+0x212>
 8000918:	2b03      	cmp	r3, #3
 800091a:	d06e      	beq.n	80009fa <__aeabi_fdiv+0x182>
 800091c:	4642      	mov	r2, r8
 800091e:	002c      	movs	r4, r5
 8000920:	2b01      	cmp	r3, #1
 8000922:	d140      	bne.n	80009a6 <__aeabi_fdiv+0x12e>
 8000924:	2000      	movs	r0, #0
 8000926:	2400      	movs	r4, #0
 8000928:	05c0      	lsls	r0, r0, #23
 800092a:	4320      	orrs	r0, r4
 800092c:	07d2      	lsls	r2, r2, #31
 800092e:	4310      	orrs	r0, r2
 8000930:	bce0      	pop	{r5, r6, r7}
 8000932:	46ba      	mov	sl, r7
 8000934:	46b1      	mov	r9, r6
 8000936:	46a8      	mov	r8, r5
 8000938:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800093a:	20ff      	movs	r0, #255	@ 0xff
 800093c:	2400      	movs	r4, #0
 800093e:	e7f3      	b.n	8000928 <__aeabi_fdiv+0xb0>
 8000940:	2c00      	cmp	r4, #0
 8000942:	d120      	bne.n	8000986 <__aeabi_fdiv+0x10e>
 8000944:	2302      	movs	r3, #2
 8000946:	3fff      	subs	r7, #255	@ 0xff
 8000948:	e7d8      	b.n	80008fc <__aeabi_fdiv+0x84>
 800094a:	2d00      	cmp	r5, #0
 800094c:	d105      	bne.n	800095a <__aeabi_fdiv+0xe2>
 800094e:	2304      	movs	r3, #4
 8000950:	4699      	mov	r9, r3
 8000952:	3b03      	subs	r3, #3
 8000954:	2700      	movs	r7, #0
 8000956:	469a      	mov	sl, r3
 8000958:	e7a5      	b.n	80008a6 <__aeabi_fdiv+0x2e>
 800095a:	0028      	movs	r0, r5
 800095c:	f000 fd38 	bl	80013d0 <__clzsi2>
 8000960:	2776      	movs	r7, #118	@ 0x76
 8000962:	1f43      	subs	r3, r0, #5
 8000964:	409d      	lsls	r5, r3
 8000966:	2300      	movs	r3, #0
 8000968:	427f      	negs	r7, r7
 800096a:	4699      	mov	r9, r3
 800096c:	469a      	mov	sl, r3
 800096e:	1a3f      	subs	r7, r7, r0
 8000970:	e799      	b.n	80008a6 <__aeabi_fdiv+0x2e>
 8000972:	0020      	movs	r0, r4
 8000974:	f000 fd2c 	bl	80013d0 <__clzsi2>
 8000978:	1f43      	subs	r3, r0, #5
 800097a:	409c      	lsls	r4, r3
 800097c:	2376      	movs	r3, #118	@ 0x76
 800097e:	425b      	negs	r3, r3
 8000980:	1a1b      	subs	r3, r3, r0
 8000982:	2000      	movs	r0, #0
 8000984:	e79e      	b.n	80008c4 <__aeabi_fdiv+0x4c>
 8000986:	2303      	movs	r3, #3
 8000988:	464a      	mov	r2, r9
 800098a:	431a      	orrs	r2, r3
 800098c:	4691      	mov	r9, r2
 800098e:	2003      	movs	r0, #3
 8000990:	33fc      	adds	r3, #252	@ 0xfc
 8000992:	e797      	b.n	80008c4 <__aeabi_fdiv+0x4c>
 8000994:	230c      	movs	r3, #12
 8000996:	4699      	mov	r9, r3
 8000998:	3b09      	subs	r3, #9
 800099a:	27ff      	movs	r7, #255	@ 0xff
 800099c:	469a      	mov	sl, r3
 800099e:	e782      	b.n	80008a6 <__aeabi_fdiv+0x2e>
 80009a0:	2803      	cmp	r0, #3
 80009a2:	d02c      	beq.n	80009fe <__aeabi_fdiv+0x186>
 80009a4:	0032      	movs	r2, r6
 80009a6:	0038      	movs	r0, r7
 80009a8:	307f      	adds	r0, #127	@ 0x7f
 80009aa:	2800      	cmp	r0, #0
 80009ac:	dd47      	ble.n	8000a3e <__aeabi_fdiv+0x1c6>
 80009ae:	0763      	lsls	r3, r4, #29
 80009b0:	d004      	beq.n	80009bc <__aeabi_fdiv+0x144>
 80009b2:	230f      	movs	r3, #15
 80009b4:	4023      	ands	r3, r4
 80009b6:	2b04      	cmp	r3, #4
 80009b8:	d000      	beq.n	80009bc <__aeabi_fdiv+0x144>
 80009ba:	3404      	adds	r4, #4
 80009bc:	0123      	lsls	r3, r4, #4
 80009be:	d503      	bpl.n	80009c8 <__aeabi_fdiv+0x150>
 80009c0:	0038      	movs	r0, r7
 80009c2:	4b37      	ldr	r3, [pc, #220]	@ (8000aa0 <__aeabi_fdiv+0x228>)
 80009c4:	3080      	adds	r0, #128	@ 0x80
 80009c6:	401c      	ands	r4, r3
 80009c8:	28fe      	cmp	r0, #254	@ 0xfe
 80009ca:	dcb6      	bgt.n	800093a <__aeabi_fdiv+0xc2>
 80009cc:	01a4      	lsls	r4, r4, #6
 80009ce:	0a64      	lsrs	r4, r4, #9
 80009d0:	b2c0      	uxtb	r0, r0
 80009d2:	e7a9      	b.n	8000928 <__aeabi_fdiv+0xb0>
 80009d4:	2480      	movs	r4, #128	@ 0x80
 80009d6:	2200      	movs	r2, #0
 80009d8:	20ff      	movs	r0, #255	@ 0xff
 80009da:	03e4      	lsls	r4, r4, #15
 80009dc:	e7a4      	b.n	8000928 <__aeabi_fdiv+0xb0>
 80009de:	2380      	movs	r3, #128	@ 0x80
 80009e0:	03db      	lsls	r3, r3, #15
 80009e2:	421d      	tst	r5, r3
 80009e4:	d001      	beq.n	80009ea <__aeabi_fdiv+0x172>
 80009e6:	421c      	tst	r4, r3
 80009e8:	d00b      	beq.n	8000a02 <__aeabi_fdiv+0x18a>
 80009ea:	2480      	movs	r4, #128	@ 0x80
 80009ec:	03e4      	lsls	r4, r4, #15
 80009ee:	432c      	orrs	r4, r5
 80009f0:	0264      	lsls	r4, r4, #9
 80009f2:	4642      	mov	r2, r8
 80009f4:	20ff      	movs	r0, #255	@ 0xff
 80009f6:	0a64      	lsrs	r4, r4, #9
 80009f8:	e796      	b.n	8000928 <__aeabi_fdiv+0xb0>
 80009fa:	4646      	mov	r6, r8
 80009fc:	002c      	movs	r4, r5
 80009fe:	2380      	movs	r3, #128	@ 0x80
 8000a00:	03db      	lsls	r3, r3, #15
 8000a02:	431c      	orrs	r4, r3
 8000a04:	0264      	lsls	r4, r4, #9
 8000a06:	0032      	movs	r2, r6
 8000a08:	20ff      	movs	r0, #255	@ 0xff
 8000a0a:	0a64      	lsrs	r4, r4, #9
 8000a0c:	e78c      	b.n	8000928 <__aeabi_fdiv+0xb0>
 8000a0e:	016d      	lsls	r5, r5, #5
 8000a10:	0160      	lsls	r0, r4, #5
 8000a12:	4285      	cmp	r5, r0
 8000a14:	d22d      	bcs.n	8000a72 <__aeabi_fdiv+0x1fa>
 8000a16:	231b      	movs	r3, #27
 8000a18:	2400      	movs	r4, #0
 8000a1a:	3f01      	subs	r7, #1
 8000a1c:	2601      	movs	r6, #1
 8000a1e:	0029      	movs	r1, r5
 8000a20:	0064      	lsls	r4, r4, #1
 8000a22:	006d      	lsls	r5, r5, #1
 8000a24:	2900      	cmp	r1, #0
 8000a26:	db01      	blt.n	8000a2c <__aeabi_fdiv+0x1b4>
 8000a28:	4285      	cmp	r5, r0
 8000a2a:	d301      	bcc.n	8000a30 <__aeabi_fdiv+0x1b8>
 8000a2c:	1a2d      	subs	r5, r5, r0
 8000a2e:	4334      	orrs	r4, r6
 8000a30:	3b01      	subs	r3, #1
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d1f3      	bne.n	8000a1e <__aeabi_fdiv+0x1a6>
 8000a36:	1e6b      	subs	r3, r5, #1
 8000a38:	419d      	sbcs	r5, r3
 8000a3a:	432c      	orrs	r4, r5
 8000a3c:	e7b3      	b.n	80009a6 <__aeabi_fdiv+0x12e>
 8000a3e:	2301      	movs	r3, #1
 8000a40:	1a1b      	subs	r3, r3, r0
 8000a42:	2b1b      	cmp	r3, #27
 8000a44:	dd00      	ble.n	8000a48 <__aeabi_fdiv+0x1d0>
 8000a46:	e76d      	b.n	8000924 <__aeabi_fdiv+0xac>
 8000a48:	0021      	movs	r1, r4
 8000a4a:	379e      	adds	r7, #158	@ 0x9e
 8000a4c:	40d9      	lsrs	r1, r3
 8000a4e:	40bc      	lsls	r4, r7
 8000a50:	000b      	movs	r3, r1
 8000a52:	1e61      	subs	r1, r4, #1
 8000a54:	418c      	sbcs	r4, r1
 8000a56:	4323      	orrs	r3, r4
 8000a58:	0759      	lsls	r1, r3, #29
 8000a5a:	d004      	beq.n	8000a66 <__aeabi_fdiv+0x1ee>
 8000a5c:	210f      	movs	r1, #15
 8000a5e:	4019      	ands	r1, r3
 8000a60:	2904      	cmp	r1, #4
 8000a62:	d000      	beq.n	8000a66 <__aeabi_fdiv+0x1ee>
 8000a64:	3304      	adds	r3, #4
 8000a66:	0159      	lsls	r1, r3, #5
 8000a68:	d413      	bmi.n	8000a92 <__aeabi_fdiv+0x21a>
 8000a6a:	019b      	lsls	r3, r3, #6
 8000a6c:	2000      	movs	r0, #0
 8000a6e:	0a5c      	lsrs	r4, r3, #9
 8000a70:	e75a      	b.n	8000928 <__aeabi_fdiv+0xb0>
 8000a72:	231a      	movs	r3, #26
 8000a74:	2401      	movs	r4, #1
 8000a76:	1a2d      	subs	r5, r5, r0
 8000a78:	e7d0      	b.n	8000a1c <__aeabi_fdiv+0x1a4>
 8000a7a:	1e98      	subs	r0, r3, #2
 8000a7c:	4243      	negs	r3, r0
 8000a7e:	4158      	adcs	r0, r3
 8000a80:	4240      	negs	r0, r0
 8000a82:	0032      	movs	r2, r6
 8000a84:	2400      	movs	r4, #0
 8000a86:	b2c0      	uxtb	r0, r0
 8000a88:	e74e      	b.n	8000928 <__aeabi_fdiv+0xb0>
 8000a8a:	4642      	mov	r2, r8
 8000a8c:	20ff      	movs	r0, #255	@ 0xff
 8000a8e:	2400      	movs	r4, #0
 8000a90:	e74a      	b.n	8000928 <__aeabi_fdiv+0xb0>
 8000a92:	2001      	movs	r0, #1
 8000a94:	2400      	movs	r4, #0
 8000a96:	e747      	b.n	8000928 <__aeabi_fdiv+0xb0>
 8000a98:	080048b0 	.word	0x080048b0
 8000a9c:	080048f0 	.word	0x080048f0
 8000aa0:	f7ffffff 	.word	0xf7ffffff

08000aa4 <__eqsf2>:
 8000aa4:	b570      	push	{r4, r5, r6, lr}
 8000aa6:	0042      	lsls	r2, r0, #1
 8000aa8:	024e      	lsls	r6, r1, #9
 8000aaa:	004c      	lsls	r4, r1, #1
 8000aac:	0245      	lsls	r5, r0, #9
 8000aae:	0a6d      	lsrs	r5, r5, #9
 8000ab0:	0e12      	lsrs	r2, r2, #24
 8000ab2:	0fc3      	lsrs	r3, r0, #31
 8000ab4:	0a76      	lsrs	r6, r6, #9
 8000ab6:	0e24      	lsrs	r4, r4, #24
 8000ab8:	0fc9      	lsrs	r1, r1, #31
 8000aba:	2aff      	cmp	r2, #255	@ 0xff
 8000abc:	d010      	beq.n	8000ae0 <__eqsf2+0x3c>
 8000abe:	2cff      	cmp	r4, #255	@ 0xff
 8000ac0:	d00c      	beq.n	8000adc <__eqsf2+0x38>
 8000ac2:	2001      	movs	r0, #1
 8000ac4:	42a2      	cmp	r2, r4
 8000ac6:	d10a      	bne.n	8000ade <__eqsf2+0x3a>
 8000ac8:	42b5      	cmp	r5, r6
 8000aca:	d108      	bne.n	8000ade <__eqsf2+0x3a>
 8000acc:	428b      	cmp	r3, r1
 8000ace:	d00f      	beq.n	8000af0 <__eqsf2+0x4c>
 8000ad0:	2a00      	cmp	r2, #0
 8000ad2:	d104      	bne.n	8000ade <__eqsf2+0x3a>
 8000ad4:	0028      	movs	r0, r5
 8000ad6:	1e43      	subs	r3, r0, #1
 8000ad8:	4198      	sbcs	r0, r3
 8000ada:	e000      	b.n	8000ade <__eqsf2+0x3a>
 8000adc:	2001      	movs	r0, #1
 8000ade:	bd70      	pop	{r4, r5, r6, pc}
 8000ae0:	2001      	movs	r0, #1
 8000ae2:	2cff      	cmp	r4, #255	@ 0xff
 8000ae4:	d1fb      	bne.n	8000ade <__eqsf2+0x3a>
 8000ae6:	4335      	orrs	r5, r6
 8000ae8:	d1f9      	bne.n	8000ade <__eqsf2+0x3a>
 8000aea:	404b      	eors	r3, r1
 8000aec:	0018      	movs	r0, r3
 8000aee:	e7f6      	b.n	8000ade <__eqsf2+0x3a>
 8000af0:	2000      	movs	r0, #0
 8000af2:	e7f4      	b.n	8000ade <__eqsf2+0x3a>

08000af4 <__gesf2>:
 8000af4:	b530      	push	{r4, r5, lr}
 8000af6:	0042      	lsls	r2, r0, #1
 8000af8:	0244      	lsls	r4, r0, #9
 8000afa:	024d      	lsls	r5, r1, #9
 8000afc:	0fc3      	lsrs	r3, r0, #31
 8000afe:	0048      	lsls	r0, r1, #1
 8000b00:	0a64      	lsrs	r4, r4, #9
 8000b02:	0e12      	lsrs	r2, r2, #24
 8000b04:	0a6d      	lsrs	r5, r5, #9
 8000b06:	0e00      	lsrs	r0, r0, #24
 8000b08:	0fc9      	lsrs	r1, r1, #31
 8000b0a:	2aff      	cmp	r2, #255	@ 0xff
 8000b0c:	d018      	beq.n	8000b40 <__gesf2+0x4c>
 8000b0e:	28ff      	cmp	r0, #255	@ 0xff
 8000b10:	d00a      	beq.n	8000b28 <__gesf2+0x34>
 8000b12:	2a00      	cmp	r2, #0
 8000b14:	d11e      	bne.n	8000b54 <__gesf2+0x60>
 8000b16:	2800      	cmp	r0, #0
 8000b18:	d10a      	bne.n	8000b30 <__gesf2+0x3c>
 8000b1a:	2d00      	cmp	r5, #0
 8000b1c:	d029      	beq.n	8000b72 <__gesf2+0x7e>
 8000b1e:	2c00      	cmp	r4, #0
 8000b20:	d12d      	bne.n	8000b7e <__gesf2+0x8a>
 8000b22:	0048      	lsls	r0, r1, #1
 8000b24:	3801      	subs	r0, #1
 8000b26:	bd30      	pop	{r4, r5, pc}
 8000b28:	2d00      	cmp	r5, #0
 8000b2a:	d125      	bne.n	8000b78 <__gesf2+0x84>
 8000b2c:	2a00      	cmp	r2, #0
 8000b2e:	d101      	bne.n	8000b34 <__gesf2+0x40>
 8000b30:	2c00      	cmp	r4, #0
 8000b32:	d0f6      	beq.n	8000b22 <__gesf2+0x2e>
 8000b34:	428b      	cmp	r3, r1
 8000b36:	d019      	beq.n	8000b6c <__gesf2+0x78>
 8000b38:	2001      	movs	r0, #1
 8000b3a:	425b      	negs	r3, r3
 8000b3c:	4318      	orrs	r0, r3
 8000b3e:	e7f2      	b.n	8000b26 <__gesf2+0x32>
 8000b40:	2c00      	cmp	r4, #0
 8000b42:	d119      	bne.n	8000b78 <__gesf2+0x84>
 8000b44:	28ff      	cmp	r0, #255	@ 0xff
 8000b46:	d1f7      	bne.n	8000b38 <__gesf2+0x44>
 8000b48:	2d00      	cmp	r5, #0
 8000b4a:	d115      	bne.n	8000b78 <__gesf2+0x84>
 8000b4c:	2000      	movs	r0, #0
 8000b4e:	428b      	cmp	r3, r1
 8000b50:	d1f2      	bne.n	8000b38 <__gesf2+0x44>
 8000b52:	e7e8      	b.n	8000b26 <__gesf2+0x32>
 8000b54:	2800      	cmp	r0, #0
 8000b56:	d0ef      	beq.n	8000b38 <__gesf2+0x44>
 8000b58:	428b      	cmp	r3, r1
 8000b5a:	d1ed      	bne.n	8000b38 <__gesf2+0x44>
 8000b5c:	4282      	cmp	r2, r0
 8000b5e:	dceb      	bgt.n	8000b38 <__gesf2+0x44>
 8000b60:	db04      	blt.n	8000b6c <__gesf2+0x78>
 8000b62:	42ac      	cmp	r4, r5
 8000b64:	d8e8      	bhi.n	8000b38 <__gesf2+0x44>
 8000b66:	2000      	movs	r0, #0
 8000b68:	42ac      	cmp	r4, r5
 8000b6a:	d2dc      	bcs.n	8000b26 <__gesf2+0x32>
 8000b6c:	0058      	lsls	r0, r3, #1
 8000b6e:	3801      	subs	r0, #1
 8000b70:	e7d9      	b.n	8000b26 <__gesf2+0x32>
 8000b72:	2c00      	cmp	r4, #0
 8000b74:	d0d7      	beq.n	8000b26 <__gesf2+0x32>
 8000b76:	e7df      	b.n	8000b38 <__gesf2+0x44>
 8000b78:	2002      	movs	r0, #2
 8000b7a:	4240      	negs	r0, r0
 8000b7c:	e7d3      	b.n	8000b26 <__gesf2+0x32>
 8000b7e:	428b      	cmp	r3, r1
 8000b80:	d1da      	bne.n	8000b38 <__gesf2+0x44>
 8000b82:	e7ee      	b.n	8000b62 <__gesf2+0x6e>

08000b84 <__lesf2>:
 8000b84:	b530      	push	{r4, r5, lr}
 8000b86:	0042      	lsls	r2, r0, #1
 8000b88:	0244      	lsls	r4, r0, #9
 8000b8a:	024d      	lsls	r5, r1, #9
 8000b8c:	0fc3      	lsrs	r3, r0, #31
 8000b8e:	0048      	lsls	r0, r1, #1
 8000b90:	0a64      	lsrs	r4, r4, #9
 8000b92:	0e12      	lsrs	r2, r2, #24
 8000b94:	0a6d      	lsrs	r5, r5, #9
 8000b96:	0e00      	lsrs	r0, r0, #24
 8000b98:	0fc9      	lsrs	r1, r1, #31
 8000b9a:	2aff      	cmp	r2, #255	@ 0xff
 8000b9c:	d017      	beq.n	8000bce <__lesf2+0x4a>
 8000b9e:	28ff      	cmp	r0, #255	@ 0xff
 8000ba0:	d00a      	beq.n	8000bb8 <__lesf2+0x34>
 8000ba2:	2a00      	cmp	r2, #0
 8000ba4:	d11b      	bne.n	8000bde <__lesf2+0x5a>
 8000ba6:	2800      	cmp	r0, #0
 8000ba8:	d10a      	bne.n	8000bc0 <__lesf2+0x3c>
 8000baa:	2d00      	cmp	r5, #0
 8000bac:	d01d      	beq.n	8000bea <__lesf2+0x66>
 8000bae:	2c00      	cmp	r4, #0
 8000bb0:	d12d      	bne.n	8000c0e <__lesf2+0x8a>
 8000bb2:	0048      	lsls	r0, r1, #1
 8000bb4:	3801      	subs	r0, #1
 8000bb6:	e011      	b.n	8000bdc <__lesf2+0x58>
 8000bb8:	2d00      	cmp	r5, #0
 8000bba:	d10e      	bne.n	8000bda <__lesf2+0x56>
 8000bbc:	2a00      	cmp	r2, #0
 8000bbe:	d101      	bne.n	8000bc4 <__lesf2+0x40>
 8000bc0:	2c00      	cmp	r4, #0
 8000bc2:	d0f6      	beq.n	8000bb2 <__lesf2+0x2e>
 8000bc4:	428b      	cmp	r3, r1
 8000bc6:	d10c      	bne.n	8000be2 <__lesf2+0x5e>
 8000bc8:	0058      	lsls	r0, r3, #1
 8000bca:	3801      	subs	r0, #1
 8000bcc:	e006      	b.n	8000bdc <__lesf2+0x58>
 8000bce:	2c00      	cmp	r4, #0
 8000bd0:	d103      	bne.n	8000bda <__lesf2+0x56>
 8000bd2:	28ff      	cmp	r0, #255	@ 0xff
 8000bd4:	d105      	bne.n	8000be2 <__lesf2+0x5e>
 8000bd6:	2d00      	cmp	r5, #0
 8000bd8:	d015      	beq.n	8000c06 <__lesf2+0x82>
 8000bda:	2002      	movs	r0, #2
 8000bdc:	bd30      	pop	{r4, r5, pc}
 8000bde:	2800      	cmp	r0, #0
 8000be0:	d106      	bne.n	8000bf0 <__lesf2+0x6c>
 8000be2:	2001      	movs	r0, #1
 8000be4:	425b      	negs	r3, r3
 8000be6:	4318      	orrs	r0, r3
 8000be8:	e7f8      	b.n	8000bdc <__lesf2+0x58>
 8000bea:	2c00      	cmp	r4, #0
 8000bec:	d0f6      	beq.n	8000bdc <__lesf2+0x58>
 8000bee:	e7f8      	b.n	8000be2 <__lesf2+0x5e>
 8000bf0:	428b      	cmp	r3, r1
 8000bf2:	d1f6      	bne.n	8000be2 <__lesf2+0x5e>
 8000bf4:	4282      	cmp	r2, r0
 8000bf6:	dcf4      	bgt.n	8000be2 <__lesf2+0x5e>
 8000bf8:	dbe6      	blt.n	8000bc8 <__lesf2+0x44>
 8000bfa:	42ac      	cmp	r4, r5
 8000bfc:	d8f1      	bhi.n	8000be2 <__lesf2+0x5e>
 8000bfe:	2000      	movs	r0, #0
 8000c00:	42ac      	cmp	r4, r5
 8000c02:	d2eb      	bcs.n	8000bdc <__lesf2+0x58>
 8000c04:	e7e0      	b.n	8000bc8 <__lesf2+0x44>
 8000c06:	2000      	movs	r0, #0
 8000c08:	428b      	cmp	r3, r1
 8000c0a:	d1ea      	bne.n	8000be2 <__lesf2+0x5e>
 8000c0c:	e7e6      	b.n	8000bdc <__lesf2+0x58>
 8000c0e:	428b      	cmp	r3, r1
 8000c10:	d1e7      	bne.n	8000be2 <__lesf2+0x5e>
 8000c12:	e7f2      	b.n	8000bfa <__lesf2+0x76>

08000c14 <__aeabi_fmul>:
 8000c14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c16:	464f      	mov	r7, r9
 8000c18:	4646      	mov	r6, r8
 8000c1a:	46d6      	mov	lr, sl
 8000c1c:	0044      	lsls	r4, r0, #1
 8000c1e:	b5c0      	push	{r6, r7, lr}
 8000c20:	0246      	lsls	r6, r0, #9
 8000c22:	1c0f      	adds	r7, r1, #0
 8000c24:	0a76      	lsrs	r6, r6, #9
 8000c26:	0e24      	lsrs	r4, r4, #24
 8000c28:	0fc5      	lsrs	r5, r0, #31
 8000c2a:	2c00      	cmp	r4, #0
 8000c2c:	d100      	bne.n	8000c30 <__aeabi_fmul+0x1c>
 8000c2e:	e0da      	b.n	8000de6 <__aeabi_fmul+0x1d2>
 8000c30:	2cff      	cmp	r4, #255	@ 0xff
 8000c32:	d074      	beq.n	8000d1e <__aeabi_fmul+0x10a>
 8000c34:	2380      	movs	r3, #128	@ 0x80
 8000c36:	00f6      	lsls	r6, r6, #3
 8000c38:	04db      	lsls	r3, r3, #19
 8000c3a:	431e      	orrs	r6, r3
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	4699      	mov	r9, r3
 8000c40:	469a      	mov	sl, r3
 8000c42:	3c7f      	subs	r4, #127	@ 0x7f
 8000c44:	027b      	lsls	r3, r7, #9
 8000c46:	0a5b      	lsrs	r3, r3, #9
 8000c48:	4698      	mov	r8, r3
 8000c4a:	007b      	lsls	r3, r7, #1
 8000c4c:	0e1b      	lsrs	r3, r3, #24
 8000c4e:	0fff      	lsrs	r7, r7, #31
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d074      	beq.n	8000d3e <__aeabi_fmul+0x12a>
 8000c54:	2bff      	cmp	r3, #255	@ 0xff
 8000c56:	d100      	bne.n	8000c5a <__aeabi_fmul+0x46>
 8000c58:	e08e      	b.n	8000d78 <__aeabi_fmul+0x164>
 8000c5a:	4642      	mov	r2, r8
 8000c5c:	2180      	movs	r1, #128	@ 0x80
 8000c5e:	00d2      	lsls	r2, r2, #3
 8000c60:	04c9      	lsls	r1, r1, #19
 8000c62:	4311      	orrs	r1, r2
 8000c64:	3b7f      	subs	r3, #127	@ 0x7f
 8000c66:	002a      	movs	r2, r5
 8000c68:	18e4      	adds	r4, r4, r3
 8000c6a:	464b      	mov	r3, r9
 8000c6c:	407a      	eors	r2, r7
 8000c6e:	4688      	mov	r8, r1
 8000c70:	b2d2      	uxtb	r2, r2
 8000c72:	2b0a      	cmp	r3, #10
 8000c74:	dc75      	bgt.n	8000d62 <__aeabi_fmul+0x14e>
 8000c76:	464b      	mov	r3, r9
 8000c78:	2000      	movs	r0, #0
 8000c7a:	2b02      	cmp	r3, #2
 8000c7c:	dd0f      	ble.n	8000c9e <__aeabi_fmul+0x8a>
 8000c7e:	4649      	mov	r1, r9
 8000c80:	2301      	movs	r3, #1
 8000c82:	408b      	lsls	r3, r1
 8000c84:	21a6      	movs	r1, #166	@ 0xa6
 8000c86:	00c9      	lsls	r1, r1, #3
 8000c88:	420b      	tst	r3, r1
 8000c8a:	d169      	bne.n	8000d60 <__aeabi_fmul+0x14c>
 8000c8c:	2190      	movs	r1, #144	@ 0x90
 8000c8e:	0089      	lsls	r1, r1, #2
 8000c90:	420b      	tst	r3, r1
 8000c92:	d000      	beq.n	8000c96 <__aeabi_fmul+0x82>
 8000c94:	e100      	b.n	8000e98 <__aeabi_fmul+0x284>
 8000c96:	2188      	movs	r1, #136	@ 0x88
 8000c98:	4219      	tst	r1, r3
 8000c9a:	d000      	beq.n	8000c9e <__aeabi_fmul+0x8a>
 8000c9c:	e0f5      	b.n	8000e8a <__aeabi_fmul+0x276>
 8000c9e:	4641      	mov	r1, r8
 8000ca0:	0409      	lsls	r1, r1, #16
 8000ca2:	0c09      	lsrs	r1, r1, #16
 8000ca4:	4643      	mov	r3, r8
 8000ca6:	0008      	movs	r0, r1
 8000ca8:	0c35      	lsrs	r5, r6, #16
 8000caa:	0436      	lsls	r6, r6, #16
 8000cac:	0c1b      	lsrs	r3, r3, #16
 8000cae:	0c36      	lsrs	r6, r6, #16
 8000cb0:	4370      	muls	r0, r6
 8000cb2:	4369      	muls	r1, r5
 8000cb4:	435e      	muls	r6, r3
 8000cb6:	435d      	muls	r5, r3
 8000cb8:	1876      	adds	r6, r6, r1
 8000cba:	0c03      	lsrs	r3, r0, #16
 8000cbc:	199b      	adds	r3, r3, r6
 8000cbe:	4299      	cmp	r1, r3
 8000cc0:	d903      	bls.n	8000cca <__aeabi_fmul+0xb6>
 8000cc2:	2180      	movs	r1, #128	@ 0x80
 8000cc4:	0249      	lsls	r1, r1, #9
 8000cc6:	468c      	mov	ip, r1
 8000cc8:	4465      	add	r5, ip
 8000cca:	0400      	lsls	r0, r0, #16
 8000ccc:	0419      	lsls	r1, r3, #16
 8000cce:	0c00      	lsrs	r0, r0, #16
 8000cd0:	1809      	adds	r1, r1, r0
 8000cd2:	018e      	lsls	r6, r1, #6
 8000cd4:	1e70      	subs	r0, r6, #1
 8000cd6:	4186      	sbcs	r6, r0
 8000cd8:	0c1b      	lsrs	r3, r3, #16
 8000cda:	0e89      	lsrs	r1, r1, #26
 8000cdc:	195b      	adds	r3, r3, r5
 8000cde:	430e      	orrs	r6, r1
 8000ce0:	019b      	lsls	r3, r3, #6
 8000ce2:	431e      	orrs	r6, r3
 8000ce4:	011b      	lsls	r3, r3, #4
 8000ce6:	d46c      	bmi.n	8000dc2 <__aeabi_fmul+0x1ae>
 8000ce8:	0023      	movs	r3, r4
 8000cea:	337f      	adds	r3, #127	@ 0x7f
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	dc00      	bgt.n	8000cf2 <__aeabi_fmul+0xde>
 8000cf0:	e0b1      	b.n	8000e56 <__aeabi_fmul+0x242>
 8000cf2:	0015      	movs	r5, r2
 8000cf4:	0771      	lsls	r1, r6, #29
 8000cf6:	d00b      	beq.n	8000d10 <__aeabi_fmul+0xfc>
 8000cf8:	200f      	movs	r0, #15
 8000cfa:	0021      	movs	r1, r4
 8000cfc:	4030      	ands	r0, r6
 8000cfe:	2804      	cmp	r0, #4
 8000d00:	d006      	beq.n	8000d10 <__aeabi_fmul+0xfc>
 8000d02:	3604      	adds	r6, #4
 8000d04:	0132      	lsls	r2, r6, #4
 8000d06:	d503      	bpl.n	8000d10 <__aeabi_fmul+0xfc>
 8000d08:	4b6e      	ldr	r3, [pc, #440]	@ (8000ec4 <__aeabi_fmul+0x2b0>)
 8000d0a:	401e      	ands	r6, r3
 8000d0c:	000b      	movs	r3, r1
 8000d0e:	3380      	adds	r3, #128	@ 0x80
 8000d10:	2bfe      	cmp	r3, #254	@ 0xfe
 8000d12:	dd00      	ble.n	8000d16 <__aeabi_fmul+0x102>
 8000d14:	e0bd      	b.n	8000e92 <__aeabi_fmul+0x27e>
 8000d16:	01b2      	lsls	r2, r6, #6
 8000d18:	0a52      	lsrs	r2, r2, #9
 8000d1a:	b2db      	uxtb	r3, r3
 8000d1c:	e048      	b.n	8000db0 <__aeabi_fmul+0x19c>
 8000d1e:	2e00      	cmp	r6, #0
 8000d20:	d000      	beq.n	8000d24 <__aeabi_fmul+0x110>
 8000d22:	e092      	b.n	8000e4a <__aeabi_fmul+0x236>
 8000d24:	2308      	movs	r3, #8
 8000d26:	4699      	mov	r9, r3
 8000d28:	3b06      	subs	r3, #6
 8000d2a:	469a      	mov	sl, r3
 8000d2c:	027b      	lsls	r3, r7, #9
 8000d2e:	0a5b      	lsrs	r3, r3, #9
 8000d30:	4698      	mov	r8, r3
 8000d32:	007b      	lsls	r3, r7, #1
 8000d34:	24ff      	movs	r4, #255	@ 0xff
 8000d36:	0e1b      	lsrs	r3, r3, #24
 8000d38:	0fff      	lsrs	r7, r7, #31
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d18a      	bne.n	8000c54 <__aeabi_fmul+0x40>
 8000d3e:	4642      	mov	r2, r8
 8000d40:	2a00      	cmp	r2, #0
 8000d42:	d164      	bne.n	8000e0e <__aeabi_fmul+0x1fa>
 8000d44:	4649      	mov	r1, r9
 8000d46:	3201      	adds	r2, #1
 8000d48:	4311      	orrs	r1, r2
 8000d4a:	4689      	mov	r9, r1
 8000d4c:	290a      	cmp	r1, #10
 8000d4e:	dc08      	bgt.n	8000d62 <__aeabi_fmul+0x14e>
 8000d50:	407d      	eors	r5, r7
 8000d52:	2001      	movs	r0, #1
 8000d54:	b2ea      	uxtb	r2, r5
 8000d56:	2902      	cmp	r1, #2
 8000d58:	dc91      	bgt.n	8000c7e <__aeabi_fmul+0x6a>
 8000d5a:	0015      	movs	r5, r2
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	e027      	b.n	8000db0 <__aeabi_fmul+0x19c>
 8000d60:	0015      	movs	r5, r2
 8000d62:	4653      	mov	r3, sl
 8000d64:	2b02      	cmp	r3, #2
 8000d66:	d100      	bne.n	8000d6a <__aeabi_fmul+0x156>
 8000d68:	e093      	b.n	8000e92 <__aeabi_fmul+0x27e>
 8000d6a:	2b03      	cmp	r3, #3
 8000d6c:	d01a      	beq.n	8000da4 <__aeabi_fmul+0x190>
 8000d6e:	2b01      	cmp	r3, #1
 8000d70:	d12c      	bne.n	8000dcc <__aeabi_fmul+0x1b8>
 8000d72:	2300      	movs	r3, #0
 8000d74:	2200      	movs	r2, #0
 8000d76:	e01b      	b.n	8000db0 <__aeabi_fmul+0x19c>
 8000d78:	4643      	mov	r3, r8
 8000d7a:	34ff      	adds	r4, #255	@ 0xff
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d055      	beq.n	8000e2c <__aeabi_fmul+0x218>
 8000d80:	2103      	movs	r1, #3
 8000d82:	464b      	mov	r3, r9
 8000d84:	430b      	orrs	r3, r1
 8000d86:	0019      	movs	r1, r3
 8000d88:	2b0a      	cmp	r3, #10
 8000d8a:	dc00      	bgt.n	8000d8e <__aeabi_fmul+0x17a>
 8000d8c:	e092      	b.n	8000eb4 <__aeabi_fmul+0x2a0>
 8000d8e:	2b0f      	cmp	r3, #15
 8000d90:	d000      	beq.n	8000d94 <__aeabi_fmul+0x180>
 8000d92:	e08c      	b.n	8000eae <__aeabi_fmul+0x29a>
 8000d94:	2280      	movs	r2, #128	@ 0x80
 8000d96:	03d2      	lsls	r2, r2, #15
 8000d98:	4216      	tst	r6, r2
 8000d9a:	d003      	beq.n	8000da4 <__aeabi_fmul+0x190>
 8000d9c:	4643      	mov	r3, r8
 8000d9e:	4213      	tst	r3, r2
 8000da0:	d100      	bne.n	8000da4 <__aeabi_fmul+0x190>
 8000da2:	e07d      	b.n	8000ea0 <__aeabi_fmul+0x28c>
 8000da4:	2280      	movs	r2, #128	@ 0x80
 8000da6:	03d2      	lsls	r2, r2, #15
 8000da8:	4332      	orrs	r2, r6
 8000daa:	0252      	lsls	r2, r2, #9
 8000dac:	0a52      	lsrs	r2, r2, #9
 8000dae:	23ff      	movs	r3, #255	@ 0xff
 8000db0:	05d8      	lsls	r0, r3, #23
 8000db2:	07ed      	lsls	r5, r5, #31
 8000db4:	4310      	orrs	r0, r2
 8000db6:	4328      	orrs	r0, r5
 8000db8:	bce0      	pop	{r5, r6, r7}
 8000dba:	46ba      	mov	sl, r7
 8000dbc:	46b1      	mov	r9, r6
 8000dbe:	46a8      	mov	r8, r5
 8000dc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000dc2:	2301      	movs	r3, #1
 8000dc4:	0015      	movs	r5, r2
 8000dc6:	0871      	lsrs	r1, r6, #1
 8000dc8:	401e      	ands	r6, r3
 8000dca:	430e      	orrs	r6, r1
 8000dcc:	0023      	movs	r3, r4
 8000dce:	3380      	adds	r3, #128	@ 0x80
 8000dd0:	1c61      	adds	r1, r4, #1
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	dd41      	ble.n	8000e5a <__aeabi_fmul+0x246>
 8000dd6:	0772      	lsls	r2, r6, #29
 8000dd8:	d094      	beq.n	8000d04 <__aeabi_fmul+0xf0>
 8000dda:	220f      	movs	r2, #15
 8000ddc:	4032      	ands	r2, r6
 8000dde:	2a04      	cmp	r2, #4
 8000de0:	d000      	beq.n	8000de4 <__aeabi_fmul+0x1d0>
 8000de2:	e78e      	b.n	8000d02 <__aeabi_fmul+0xee>
 8000de4:	e78e      	b.n	8000d04 <__aeabi_fmul+0xf0>
 8000de6:	2e00      	cmp	r6, #0
 8000de8:	d105      	bne.n	8000df6 <__aeabi_fmul+0x1e2>
 8000dea:	2304      	movs	r3, #4
 8000dec:	4699      	mov	r9, r3
 8000dee:	3b03      	subs	r3, #3
 8000df0:	2400      	movs	r4, #0
 8000df2:	469a      	mov	sl, r3
 8000df4:	e726      	b.n	8000c44 <__aeabi_fmul+0x30>
 8000df6:	0030      	movs	r0, r6
 8000df8:	f000 faea 	bl	80013d0 <__clzsi2>
 8000dfc:	2476      	movs	r4, #118	@ 0x76
 8000dfe:	1f43      	subs	r3, r0, #5
 8000e00:	409e      	lsls	r6, r3
 8000e02:	2300      	movs	r3, #0
 8000e04:	4264      	negs	r4, r4
 8000e06:	4699      	mov	r9, r3
 8000e08:	469a      	mov	sl, r3
 8000e0a:	1a24      	subs	r4, r4, r0
 8000e0c:	e71a      	b.n	8000c44 <__aeabi_fmul+0x30>
 8000e0e:	4640      	mov	r0, r8
 8000e10:	f000 fade 	bl	80013d0 <__clzsi2>
 8000e14:	464b      	mov	r3, r9
 8000e16:	1a24      	subs	r4, r4, r0
 8000e18:	3c76      	subs	r4, #118	@ 0x76
 8000e1a:	2b0a      	cmp	r3, #10
 8000e1c:	dca1      	bgt.n	8000d62 <__aeabi_fmul+0x14e>
 8000e1e:	4643      	mov	r3, r8
 8000e20:	3805      	subs	r0, #5
 8000e22:	4083      	lsls	r3, r0
 8000e24:	407d      	eors	r5, r7
 8000e26:	4698      	mov	r8, r3
 8000e28:	b2ea      	uxtb	r2, r5
 8000e2a:	e724      	b.n	8000c76 <__aeabi_fmul+0x62>
 8000e2c:	464a      	mov	r2, r9
 8000e2e:	3302      	adds	r3, #2
 8000e30:	4313      	orrs	r3, r2
 8000e32:	002a      	movs	r2, r5
 8000e34:	407a      	eors	r2, r7
 8000e36:	b2d2      	uxtb	r2, r2
 8000e38:	2b0a      	cmp	r3, #10
 8000e3a:	dc92      	bgt.n	8000d62 <__aeabi_fmul+0x14e>
 8000e3c:	4649      	mov	r1, r9
 8000e3e:	0015      	movs	r5, r2
 8000e40:	2900      	cmp	r1, #0
 8000e42:	d026      	beq.n	8000e92 <__aeabi_fmul+0x27e>
 8000e44:	4699      	mov	r9, r3
 8000e46:	2002      	movs	r0, #2
 8000e48:	e719      	b.n	8000c7e <__aeabi_fmul+0x6a>
 8000e4a:	230c      	movs	r3, #12
 8000e4c:	4699      	mov	r9, r3
 8000e4e:	3b09      	subs	r3, #9
 8000e50:	24ff      	movs	r4, #255	@ 0xff
 8000e52:	469a      	mov	sl, r3
 8000e54:	e6f6      	b.n	8000c44 <__aeabi_fmul+0x30>
 8000e56:	0015      	movs	r5, r2
 8000e58:	0021      	movs	r1, r4
 8000e5a:	2201      	movs	r2, #1
 8000e5c:	1ad3      	subs	r3, r2, r3
 8000e5e:	2b1b      	cmp	r3, #27
 8000e60:	dd00      	ble.n	8000e64 <__aeabi_fmul+0x250>
 8000e62:	e786      	b.n	8000d72 <__aeabi_fmul+0x15e>
 8000e64:	319e      	adds	r1, #158	@ 0x9e
 8000e66:	0032      	movs	r2, r6
 8000e68:	408e      	lsls	r6, r1
 8000e6a:	40da      	lsrs	r2, r3
 8000e6c:	1e73      	subs	r3, r6, #1
 8000e6e:	419e      	sbcs	r6, r3
 8000e70:	4332      	orrs	r2, r6
 8000e72:	0753      	lsls	r3, r2, #29
 8000e74:	d004      	beq.n	8000e80 <__aeabi_fmul+0x26c>
 8000e76:	230f      	movs	r3, #15
 8000e78:	4013      	ands	r3, r2
 8000e7a:	2b04      	cmp	r3, #4
 8000e7c:	d000      	beq.n	8000e80 <__aeabi_fmul+0x26c>
 8000e7e:	3204      	adds	r2, #4
 8000e80:	0153      	lsls	r3, r2, #5
 8000e82:	d510      	bpl.n	8000ea6 <__aeabi_fmul+0x292>
 8000e84:	2301      	movs	r3, #1
 8000e86:	2200      	movs	r2, #0
 8000e88:	e792      	b.n	8000db0 <__aeabi_fmul+0x19c>
 8000e8a:	003d      	movs	r5, r7
 8000e8c:	4646      	mov	r6, r8
 8000e8e:	4682      	mov	sl, r0
 8000e90:	e767      	b.n	8000d62 <__aeabi_fmul+0x14e>
 8000e92:	23ff      	movs	r3, #255	@ 0xff
 8000e94:	2200      	movs	r2, #0
 8000e96:	e78b      	b.n	8000db0 <__aeabi_fmul+0x19c>
 8000e98:	2280      	movs	r2, #128	@ 0x80
 8000e9a:	2500      	movs	r5, #0
 8000e9c:	03d2      	lsls	r2, r2, #15
 8000e9e:	e786      	b.n	8000dae <__aeabi_fmul+0x19a>
 8000ea0:	003d      	movs	r5, r7
 8000ea2:	431a      	orrs	r2, r3
 8000ea4:	e783      	b.n	8000dae <__aeabi_fmul+0x19a>
 8000ea6:	0192      	lsls	r2, r2, #6
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	0a52      	lsrs	r2, r2, #9
 8000eac:	e780      	b.n	8000db0 <__aeabi_fmul+0x19c>
 8000eae:	003d      	movs	r5, r7
 8000eb0:	4646      	mov	r6, r8
 8000eb2:	e777      	b.n	8000da4 <__aeabi_fmul+0x190>
 8000eb4:	002a      	movs	r2, r5
 8000eb6:	2301      	movs	r3, #1
 8000eb8:	407a      	eors	r2, r7
 8000eba:	408b      	lsls	r3, r1
 8000ebc:	2003      	movs	r0, #3
 8000ebe:	b2d2      	uxtb	r2, r2
 8000ec0:	e6e9      	b.n	8000c96 <__aeabi_fmul+0x82>
 8000ec2:	46c0      	nop			@ (mov r8, r8)
 8000ec4:	f7ffffff 	.word	0xf7ffffff

08000ec8 <__aeabi_fsub>:
 8000ec8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000eca:	4647      	mov	r7, r8
 8000ecc:	46ce      	mov	lr, r9
 8000ece:	0243      	lsls	r3, r0, #9
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	0a5f      	lsrs	r7, r3, #9
 8000ed4:	099b      	lsrs	r3, r3, #6
 8000ed6:	0045      	lsls	r5, r0, #1
 8000ed8:	004a      	lsls	r2, r1, #1
 8000eda:	469c      	mov	ip, r3
 8000edc:	024b      	lsls	r3, r1, #9
 8000ede:	0fc4      	lsrs	r4, r0, #31
 8000ee0:	0fce      	lsrs	r6, r1, #31
 8000ee2:	0e2d      	lsrs	r5, r5, #24
 8000ee4:	0a58      	lsrs	r0, r3, #9
 8000ee6:	0e12      	lsrs	r2, r2, #24
 8000ee8:	0999      	lsrs	r1, r3, #6
 8000eea:	2aff      	cmp	r2, #255	@ 0xff
 8000eec:	d06b      	beq.n	8000fc6 <__aeabi_fsub+0xfe>
 8000eee:	2301      	movs	r3, #1
 8000ef0:	405e      	eors	r6, r3
 8000ef2:	1aab      	subs	r3, r5, r2
 8000ef4:	42b4      	cmp	r4, r6
 8000ef6:	d04b      	beq.n	8000f90 <__aeabi_fsub+0xc8>
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	dc00      	bgt.n	8000efe <__aeabi_fsub+0x36>
 8000efc:	e0ff      	b.n	80010fe <__aeabi_fsub+0x236>
 8000efe:	2a00      	cmp	r2, #0
 8000f00:	d100      	bne.n	8000f04 <__aeabi_fsub+0x3c>
 8000f02:	e088      	b.n	8001016 <__aeabi_fsub+0x14e>
 8000f04:	2dff      	cmp	r5, #255	@ 0xff
 8000f06:	d100      	bne.n	8000f0a <__aeabi_fsub+0x42>
 8000f08:	e0ef      	b.n	80010ea <__aeabi_fsub+0x222>
 8000f0a:	2280      	movs	r2, #128	@ 0x80
 8000f0c:	04d2      	lsls	r2, r2, #19
 8000f0e:	4311      	orrs	r1, r2
 8000f10:	2001      	movs	r0, #1
 8000f12:	2b1b      	cmp	r3, #27
 8000f14:	dc08      	bgt.n	8000f28 <__aeabi_fsub+0x60>
 8000f16:	0008      	movs	r0, r1
 8000f18:	2220      	movs	r2, #32
 8000f1a:	40d8      	lsrs	r0, r3
 8000f1c:	1ad3      	subs	r3, r2, r3
 8000f1e:	4099      	lsls	r1, r3
 8000f20:	000b      	movs	r3, r1
 8000f22:	1e5a      	subs	r2, r3, #1
 8000f24:	4193      	sbcs	r3, r2
 8000f26:	4318      	orrs	r0, r3
 8000f28:	4663      	mov	r3, ip
 8000f2a:	1a1b      	subs	r3, r3, r0
 8000f2c:	469c      	mov	ip, r3
 8000f2e:	4663      	mov	r3, ip
 8000f30:	015b      	lsls	r3, r3, #5
 8000f32:	d400      	bmi.n	8000f36 <__aeabi_fsub+0x6e>
 8000f34:	e0cd      	b.n	80010d2 <__aeabi_fsub+0x20a>
 8000f36:	4663      	mov	r3, ip
 8000f38:	019f      	lsls	r7, r3, #6
 8000f3a:	09bf      	lsrs	r7, r7, #6
 8000f3c:	0038      	movs	r0, r7
 8000f3e:	f000 fa47 	bl	80013d0 <__clzsi2>
 8000f42:	003b      	movs	r3, r7
 8000f44:	3805      	subs	r0, #5
 8000f46:	4083      	lsls	r3, r0
 8000f48:	4285      	cmp	r5, r0
 8000f4a:	dc00      	bgt.n	8000f4e <__aeabi_fsub+0x86>
 8000f4c:	e0a2      	b.n	8001094 <__aeabi_fsub+0x1cc>
 8000f4e:	4ab7      	ldr	r2, [pc, #732]	@ (800122c <__aeabi_fsub+0x364>)
 8000f50:	1a2d      	subs	r5, r5, r0
 8000f52:	401a      	ands	r2, r3
 8000f54:	4694      	mov	ip, r2
 8000f56:	075a      	lsls	r2, r3, #29
 8000f58:	d100      	bne.n	8000f5c <__aeabi_fsub+0x94>
 8000f5a:	e0c3      	b.n	80010e4 <__aeabi_fsub+0x21c>
 8000f5c:	220f      	movs	r2, #15
 8000f5e:	4013      	ands	r3, r2
 8000f60:	2b04      	cmp	r3, #4
 8000f62:	d100      	bne.n	8000f66 <__aeabi_fsub+0x9e>
 8000f64:	e0be      	b.n	80010e4 <__aeabi_fsub+0x21c>
 8000f66:	2304      	movs	r3, #4
 8000f68:	4698      	mov	r8, r3
 8000f6a:	44c4      	add	ip, r8
 8000f6c:	4663      	mov	r3, ip
 8000f6e:	015b      	lsls	r3, r3, #5
 8000f70:	d400      	bmi.n	8000f74 <__aeabi_fsub+0xac>
 8000f72:	e0b7      	b.n	80010e4 <__aeabi_fsub+0x21c>
 8000f74:	1c68      	adds	r0, r5, #1
 8000f76:	2dfe      	cmp	r5, #254	@ 0xfe
 8000f78:	d000      	beq.n	8000f7c <__aeabi_fsub+0xb4>
 8000f7a:	e0a5      	b.n	80010c8 <__aeabi_fsub+0x200>
 8000f7c:	20ff      	movs	r0, #255	@ 0xff
 8000f7e:	2200      	movs	r2, #0
 8000f80:	05c0      	lsls	r0, r0, #23
 8000f82:	4310      	orrs	r0, r2
 8000f84:	07e4      	lsls	r4, r4, #31
 8000f86:	4320      	orrs	r0, r4
 8000f88:	bcc0      	pop	{r6, r7}
 8000f8a:	46b9      	mov	r9, r7
 8000f8c:	46b0      	mov	r8, r6
 8000f8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	dc00      	bgt.n	8000f96 <__aeabi_fsub+0xce>
 8000f94:	e1eb      	b.n	800136e <__aeabi_fsub+0x4a6>
 8000f96:	2a00      	cmp	r2, #0
 8000f98:	d046      	beq.n	8001028 <__aeabi_fsub+0x160>
 8000f9a:	2dff      	cmp	r5, #255	@ 0xff
 8000f9c:	d100      	bne.n	8000fa0 <__aeabi_fsub+0xd8>
 8000f9e:	e0a4      	b.n	80010ea <__aeabi_fsub+0x222>
 8000fa0:	2280      	movs	r2, #128	@ 0x80
 8000fa2:	04d2      	lsls	r2, r2, #19
 8000fa4:	4311      	orrs	r1, r2
 8000fa6:	2b1b      	cmp	r3, #27
 8000fa8:	dc00      	bgt.n	8000fac <__aeabi_fsub+0xe4>
 8000faa:	e0fb      	b.n	80011a4 <__aeabi_fsub+0x2dc>
 8000fac:	2305      	movs	r3, #5
 8000fae:	4698      	mov	r8, r3
 8000fb0:	002b      	movs	r3, r5
 8000fb2:	44c4      	add	ip, r8
 8000fb4:	4662      	mov	r2, ip
 8000fb6:	08d7      	lsrs	r7, r2, #3
 8000fb8:	2bff      	cmp	r3, #255	@ 0xff
 8000fba:	d100      	bne.n	8000fbe <__aeabi_fsub+0xf6>
 8000fbc:	e095      	b.n	80010ea <__aeabi_fsub+0x222>
 8000fbe:	027a      	lsls	r2, r7, #9
 8000fc0:	0a52      	lsrs	r2, r2, #9
 8000fc2:	b2d8      	uxtb	r0, r3
 8000fc4:	e7dc      	b.n	8000f80 <__aeabi_fsub+0xb8>
 8000fc6:	002b      	movs	r3, r5
 8000fc8:	3bff      	subs	r3, #255	@ 0xff
 8000fca:	4699      	mov	r9, r3
 8000fcc:	2900      	cmp	r1, #0
 8000fce:	d118      	bne.n	8001002 <__aeabi_fsub+0x13a>
 8000fd0:	2301      	movs	r3, #1
 8000fd2:	405e      	eors	r6, r3
 8000fd4:	42b4      	cmp	r4, r6
 8000fd6:	d100      	bne.n	8000fda <__aeabi_fsub+0x112>
 8000fd8:	e0ca      	b.n	8001170 <__aeabi_fsub+0x2a8>
 8000fda:	464b      	mov	r3, r9
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d02d      	beq.n	800103c <__aeabi_fsub+0x174>
 8000fe0:	2d00      	cmp	r5, #0
 8000fe2:	d000      	beq.n	8000fe6 <__aeabi_fsub+0x11e>
 8000fe4:	e13c      	b.n	8001260 <__aeabi_fsub+0x398>
 8000fe6:	23ff      	movs	r3, #255	@ 0xff
 8000fe8:	4664      	mov	r4, ip
 8000fea:	2c00      	cmp	r4, #0
 8000fec:	d100      	bne.n	8000ff0 <__aeabi_fsub+0x128>
 8000fee:	e15f      	b.n	80012b0 <__aeabi_fsub+0x3e8>
 8000ff0:	1e5d      	subs	r5, r3, #1
 8000ff2:	2b01      	cmp	r3, #1
 8000ff4:	d100      	bne.n	8000ff8 <__aeabi_fsub+0x130>
 8000ff6:	e174      	b.n	80012e2 <__aeabi_fsub+0x41a>
 8000ff8:	0034      	movs	r4, r6
 8000ffa:	2bff      	cmp	r3, #255	@ 0xff
 8000ffc:	d074      	beq.n	80010e8 <__aeabi_fsub+0x220>
 8000ffe:	002b      	movs	r3, r5
 8001000:	e103      	b.n	800120a <__aeabi_fsub+0x342>
 8001002:	42b4      	cmp	r4, r6
 8001004:	d100      	bne.n	8001008 <__aeabi_fsub+0x140>
 8001006:	e09c      	b.n	8001142 <__aeabi_fsub+0x27a>
 8001008:	2b00      	cmp	r3, #0
 800100a:	d017      	beq.n	800103c <__aeabi_fsub+0x174>
 800100c:	2d00      	cmp	r5, #0
 800100e:	d0ea      	beq.n	8000fe6 <__aeabi_fsub+0x11e>
 8001010:	0007      	movs	r7, r0
 8001012:	0034      	movs	r4, r6
 8001014:	e06c      	b.n	80010f0 <__aeabi_fsub+0x228>
 8001016:	2900      	cmp	r1, #0
 8001018:	d0cc      	beq.n	8000fb4 <__aeabi_fsub+0xec>
 800101a:	1e5a      	subs	r2, r3, #1
 800101c:	2b01      	cmp	r3, #1
 800101e:	d02b      	beq.n	8001078 <__aeabi_fsub+0x1b0>
 8001020:	2bff      	cmp	r3, #255	@ 0xff
 8001022:	d062      	beq.n	80010ea <__aeabi_fsub+0x222>
 8001024:	0013      	movs	r3, r2
 8001026:	e773      	b.n	8000f10 <__aeabi_fsub+0x48>
 8001028:	2900      	cmp	r1, #0
 800102a:	d0c3      	beq.n	8000fb4 <__aeabi_fsub+0xec>
 800102c:	1e5a      	subs	r2, r3, #1
 800102e:	2b01      	cmp	r3, #1
 8001030:	d100      	bne.n	8001034 <__aeabi_fsub+0x16c>
 8001032:	e11e      	b.n	8001272 <__aeabi_fsub+0x3aa>
 8001034:	2bff      	cmp	r3, #255	@ 0xff
 8001036:	d058      	beq.n	80010ea <__aeabi_fsub+0x222>
 8001038:	0013      	movs	r3, r2
 800103a:	e7b4      	b.n	8000fa6 <__aeabi_fsub+0xde>
 800103c:	22fe      	movs	r2, #254	@ 0xfe
 800103e:	1c6b      	adds	r3, r5, #1
 8001040:	421a      	tst	r2, r3
 8001042:	d10d      	bne.n	8001060 <__aeabi_fsub+0x198>
 8001044:	2d00      	cmp	r5, #0
 8001046:	d060      	beq.n	800110a <__aeabi_fsub+0x242>
 8001048:	4663      	mov	r3, ip
 800104a:	2b00      	cmp	r3, #0
 800104c:	d000      	beq.n	8001050 <__aeabi_fsub+0x188>
 800104e:	e120      	b.n	8001292 <__aeabi_fsub+0x3ca>
 8001050:	2900      	cmp	r1, #0
 8001052:	d000      	beq.n	8001056 <__aeabi_fsub+0x18e>
 8001054:	e128      	b.n	80012a8 <__aeabi_fsub+0x3e0>
 8001056:	2280      	movs	r2, #128	@ 0x80
 8001058:	2400      	movs	r4, #0
 800105a:	20ff      	movs	r0, #255	@ 0xff
 800105c:	03d2      	lsls	r2, r2, #15
 800105e:	e78f      	b.n	8000f80 <__aeabi_fsub+0xb8>
 8001060:	4663      	mov	r3, ip
 8001062:	1a5f      	subs	r7, r3, r1
 8001064:	017b      	lsls	r3, r7, #5
 8001066:	d500      	bpl.n	800106a <__aeabi_fsub+0x1a2>
 8001068:	e0fe      	b.n	8001268 <__aeabi_fsub+0x3a0>
 800106a:	2f00      	cmp	r7, #0
 800106c:	d000      	beq.n	8001070 <__aeabi_fsub+0x1a8>
 800106e:	e765      	b.n	8000f3c <__aeabi_fsub+0x74>
 8001070:	2400      	movs	r4, #0
 8001072:	2000      	movs	r0, #0
 8001074:	2200      	movs	r2, #0
 8001076:	e783      	b.n	8000f80 <__aeabi_fsub+0xb8>
 8001078:	4663      	mov	r3, ip
 800107a:	1a59      	subs	r1, r3, r1
 800107c:	014b      	lsls	r3, r1, #5
 800107e:	d400      	bmi.n	8001082 <__aeabi_fsub+0x1ba>
 8001080:	e119      	b.n	80012b6 <__aeabi_fsub+0x3ee>
 8001082:	018f      	lsls	r7, r1, #6
 8001084:	09bf      	lsrs	r7, r7, #6
 8001086:	0038      	movs	r0, r7
 8001088:	f000 f9a2 	bl	80013d0 <__clzsi2>
 800108c:	003b      	movs	r3, r7
 800108e:	3805      	subs	r0, #5
 8001090:	4083      	lsls	r3, r0
 8001092:	2501      	movs	r5, #1
 8001094:	2220      	movs	r2, #32
 8001096:	1b40      	subs	r0, r0, r5
 8001098:	3001      	adds	r0, #1
 800109a:	1a12      	subs	r2, r2, r0
 800109c:	0019      	movs	r1, r3
 800109e:	4093      	lsls	r3, r2
 80010a0:	40c1      	lsrs	r1, r0
 80010a2:	1e5a      	subs	r2, r3, #1
 80010a4:	4193      	sbcs	r3, r2
 80010a6:	4319      	orrs	r1, r3
 80010a8:	468c      	mov	ip, r1
 80010aa:	1e0b      	subs	r3, r1, #0
 80010ac:	d0e1      	beq.n	8001072 <__aeabi_fsub+0x1aa>
 80010ae:	075b      	lsls	r3, r3, #29
 80010b0:	d100      	bne.n	80010b4 <__aeabi_fsub+0x1ec>
 80010b2:	e152      	b.n	800135a <__aeabi_fsub+0x492>
 80010b4:	230f      	movs	r3, #15
 80010b6:	2500      	movs	r5, #0
 80010b8:	400b      	ands	r3, r1
 80010ba:	2b04      	cmp	r3, #4
 80010bc:	d000      	beq.n	80010c0 <__aeabi_fsub+0x1f8>
 80010be:	e752      	b.n	8000f66 <__aeabi_fsub+0x9e>
 80010c0:	2001      	movs	r0, #1
 80010c2:	014a      	lsls	r2, r1, #5
 80010c4:	d400      	bmi.n	80010c8 <__aeabi_fsub+0x200>
 80010c6:	e092      	b.n	80011ee <__aeabi_fsub+0x326>
 80010c8:	b2c0      	uxtb	r0, r0
 80010ca:	4663      	mov	r3, ip
 80010cc:	019a      	lsls	r2, r3, #6
 80010ce:	0a52      	lsrs	r2, r2, #9
 80010d0:	e756      	b.n	8000f80 <__aeabi_fsub+0xb8>
 80010d2:	4663      	mov	r3, ip
 80010d4:	075b      	lsls	r3, r3, #29
 80010d6:	d005      	beq.n	80010e4 <__aeabi_fsub+0x21c>
 80010d8:	230f      	movs	r3, #15
 80010da:	4662      	mov	r2, ip
 80010dc:	4013      	ands	r3, r2
 80010de:	2b04      	cmp	r3, #4
 80010e0:	d000      	beq.n	80010e4 <__aeabi_fsub+0x21c>
 80010e2:	e740      	b.n	8000f66 <__aeabi_fsub+0x9e>
 80010e4:	002b      	movs	r3, r5
 80010e6:	e765      	b.n	8000fb4 <__aeabi_fsub+0xec>
 80010e8:	0007      	movs	r7, r0
 80010ea:	2f00      	cmp	r7, #0
 80010ec:	d100      	bne.n	80010f0 <__aeabi_fsub+0x228>
 80010ee:	e745      	b.n	8000f7c <__aeabi_fsub+0xb4>
 80010f0:	2280      	movs	r2, #128	@ 0x80
 80010f2:	03d2      	lsls	r2, r2, #15
 80010f4:	433a      	orrs	r2, r7
 80010f6:	0252      	lsls	r2, r2, #9
 80010f8:	20ff      	movs	r0, #255	@ 0xff
 80010fa:	0a52      	lsrs	r2, r2, #9
 80010fc:	e740      	b.n	8000f80 <__aeabi_fsub+0xb8>
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d179      	bne.n	80011f6 <__aeabi_fsub+0x32e>
 8001102:	22fe      	movs	r2, #254	@ 0xfe
 8001104:	1c6b      	adds	r3, r5, #1
 8001106:	421a      	tst	r2, r3
 8001108:	d1aa      	bne.n	8001060 <__aeabi_fsub+0x198>
 800110a:	4663      	mov	r3, ip
 800110c:	2b00      	cmp	r3, #0
 800110e:	d100      	bne.n	8001112 <__aeabi_fsub+0x24a>
 8001110:	e0f5      	b.n	80012fe <__aeabi_fsub+0x436>
 8001112:	2900      	cmp	r1, #0
 8001114:	d100      	bne.n	8001118 <__aeabi_fsub+0x250>
 8001116:	e0d1      	b.n	80012bc <__aeabi_fsub+0x3f4>
 8001118:	1a5f      	subs	r7, r3, r1
 800111a:	2380      	movs	r3, #128	@ 0x80
 800111c:	04db      	lsls	r3, r3, #19
 800111e:	421f      	tst	r7, r3
 8001120:	d100      	bne.n	8001124 <__aeabi_fsub+0x25c>
 8001122:	e10e      	b.n	8001342 <__aeabi_fsub+0x47a>
 8001124:	4662      	mov	r2, ip
 8001126:	2401      	movs	r4, #1
 8001128:	1a8a      	subs	r2, r1, r2
 800112a:	4694      	mov	ip, r2
 800112c:	2000      	movs	r0, #0
 800112e:	4034      	ands	r4, r6
 8001130:	2a00      	cmp	r2, #0
 8001132:	d100      	bne.n	8001136 <__aeabi_fsub+0x26e>
 8001134:	e724      	b.n	8000f80 <__aeabi_fsub+0xb8>
 8001136:	2001      	movs	r0, #1
 8001138:	421a      	tst	r2, r3
 800113a:	d1c6      	bne.n	80010ca <__aeabi_fsub+0x202>
 800113c:	2300      	movs	r3, #0
 800113e:	08d7      	lsrs	r7, r2, #3
 8001140:	e73d      	b.n	8000fbe <__aeabi_fsub+0xf6>
 8001142:	2b00      	cmp	r3, #0
 8001144:	d017      	beq.n	8001176 <__aeabi_fsub+0x2ae>
 8001146:	2d00      	cmp	r5, #0
 8001148:	d000      	beq.n	800114c <__aeabi_fsub+0x284>
 800114a:	e0af      	b.n	80012ac <__aeabi_fsub+0x3e4>
 800114c:	23ff      	movs	r3, #255	@ 0xff
 800114e:	4665      	mov	r5, ip
 8001150:	2d00      	cmp	r5, #0
 8001152:	d100      	bne.n	8001156 <__aeabi_fsub+0x28e>
 8001154:	e0ad      	b.n	80012b2 <__aeabi_fsub+0x3ea>
 8001156:	1e5e      	subs	r6, r3, #1
 8001158:	2b01      	cmp	r3, #1
 800115a:	d100      	bne.n	800115e <__aeabi_fsub+0x296>
 800115c:	e089      	b.n	8001272 <__aeabi_fsub+0x3aa>
 800115e:	2bff      	cmp	r3, #255	@ 0xff
 8001160:	d0c2      	beq.n	80010e8 <__aeabi_fsub+0x220>
 8001162:	2e1b      	cmp	r6, #27
 8001164:	dc00      	bgt.n	8001168 <__aeabi_fsub+0x2a0>
 8001166:	e0ab      	b.n	80012c0 <__aeabi_fsub+0x3f8>
 8001168:	1d4b      	adds	r3, r1, #5
 800116a:	469c      	mov	ip, r3
 800116c:	0013      	movs	r3, r2
 800116e:	e721      	b.n	8000fb4 <__aeabi_fsub+0xec>
 8001170:	464b      	mov	r3, r9
 8001172:	2b00      	cmp	r3, #0
 8001174:	d170      	bne.n	8001258 <__aeabi_fsub+0x390>
 8001176:	22fe      	movs	r2, #254	@ 0xfe
 8001178:	1c6b      	adds	r3, r5, #1
 800117a:	421a      	tst	r2, r3
 800117c:	d15e      	bne.n	800123c <__aeabi_fsub+0x374>
 800117e:	2d00      	cmp	r5, #0
 8001180:	d000      	beq.n	8001184 <__aeabi_fsub+0x2bc>
 8001182:	e0c3      	b.n	800130c <__aeabi_fsub+0x444>
 8001184:	4663      	mov	r3, ip
 8001186:	2b00      	cmp	r3, #0
 8001188:	d100      	bne.n	800118c <__aeabi_fsub+0x2c4>
 800118a:	e0d0      	b.n	800132e <__aeabi_fsub+0x466>
 800118c:	2900      	cmp	r1, #0
 800118e:	d100      	bne.n	8001192 <__aeabi_fsub+0x2ca>
 8001190:	e094      	b.n	80012bc <__aeabi_fsub+0x3f4>
 8001192:	000a      	movs	r2, r1
 8001194:	4462      	add	r2, ip
 8001196:	0153      	lsls	r3, r2, #5
 8001198:	d400      	bmi.n	800119c <__aeabi_fsub+0x2d4>
 800119a:	e0d8      	b.n	800134e <__aeabi_fsub+0x486>
 800119c:	0192      	lsls	r2, r2, #6
 800119e:	2001      	movs	r0, #1
 80011a0:	0a52      	lsrs	r2, r2, #9
 80011a2:	e6ed      	b.n	8000f80 <__aeabi_fsub+0xb8>
 80011a4:	0008      	movs	r0, r1
 80011a6:	2220      	movs	r2, #32
 80011a8:	40d8      	lsrs	r0, r3
 80011aa:	1ad3      	subs	r3, r2, r3
 80011ac:	4099      	lsls	r1, r3
 80011ae:	000b      	movs	r3, r1
 80011b0:	1e5a      	subs	r2, r3, #1
 80011b2:	4193      	sbcs	r3, r2
 80011b4:	4303      	orrs	r3, r0
 80011b6:	449c      	add	ip, r3
 80011b8:	4663      	mov	r3, ip
 80011ba:	015b      	lsls	r3, r3, #5
 80011bc:	d589      	bpl.n	80010d2 <__aeabi_fsub+0x20a>
 80011be:	3501      	adds	r5, #1
 80011c0:	2dff      	cmp	r5, #255	@ 0xff
 80011c2:	d100      	bne.n	80011c6 <__aeabi_fsub+0x2fe>
 80011c4:	e6da      	b.n	8000f7c <__aeabi_fsub+0xb4>
 80011c6:	4662      	mov	r2, ip
 80011c8:	2301      	movs	r3, #1
 80011ca:	4919      	ldr	r1, [pc, #100]	@ (8001230 <__aeabi_fsub+0x368>)
 80011cc:	4013      	ands	r3, r2
 80011ce:	0852      	lsrs	r2, r2, #1
 80011d0:	400a      	ands	r2, r1
 80011d2:	431a      	orrs	r2, r3
 80011d4:	0013      	movs	r3, r2
 80011d6:	4694      	mov	ip, r2
 80011d8:	075b      	lsls	r3, r3, #29
 80011da:	d004      	beq.n	80011e6 <__aeabi_fsub+0x31e>
 80011dc:	230f      	movs	r3, #15
 80011de:	4013      	ands	r3, r2
 80011e0:	2b04      	cmp	r3, #4
 80011e2:	d000      	beq.n	80011e6 <__aeabi_fsub+0x31e>
 80011e4:	e6bf      	b.n	8000f66 <__aeabi_fsub+0x9e>
 80011e6:	4663      	mov	r3, ip
 80011e8:	015b      	lsls	r3, r3, #5
 80011ea:	d500      	bpl.n	80011ee <__aeabi_fsub+0x326>
 80011ec:	e6c2      	b.n	8000f74 <__aeabi_fsub+0xac>
 80011ee:	4663      	mov	r3, ip
 80011f0:	08df      	lsrs	r7, r3, #3
 80011f2:	002b      	movs	r3, r5
 80011f4:	e6e3      	b.n	8000fbe <__aeabi_fsub+0xf6>
 80011f6:	1b53      	subs	r3, r2, r5
 80011f8:	2d00      	cmp	r5, #0
 80011fa:	d100      	bne.n	80011fe <__aeabi_fsub+0x336>
 80011fc:	e6f4      	b.n	8000fe8 <__aeabi_fsub+0x120>
 80011fe:	2080      	movs	r0, #128	@ 0x80
 8001200:	4664      	mov	r4, ip
 8001202:	04c0      	lsls	r0, r0, #19
 8001204:	4304      	orrs	r4, r0
 8001206:	46a4      	mov	ip, r4
 8001208:	0034      	movs	r4, r6
 800120a:	2001      	movs	r0, #1
 800120c:	2b1b      	cmp	r3, #27
 800120e:	dc09      	bgt.n	8001224 <__aeabi_fsub+0x35c>
 8001210:	2520      	movs	r5, #32
 8001212:	4660      	mov	r0, ip
 8001214:	40d8      	lsrs	r0, r3
 8001216:	1aeb      	subs	r3, r5, r3
 8001218:	4665      	mov	r5, ip
 800121a:	409d      	lsls	r5, r3
 800121c:	002b      	movs	r3, r5
 800121e:	1e5d      	subs	r5, r3, #1
 8001220:	41ab      	sbcs	r3, r5
 8001222:	4318      	orrs	r0, r3
 8001224:	1a0b      	subs	r3, r1, r0
 8001226:	469c      	mov	ip, r3
 8001228:	0015      	movs	r5, r2
 800122a:	e680      	b.n	8000f2e <__aeabi_fsub+0x66>
 800122c:	fbffffff 	.word	0xfbffffff
 8001230:	7dffffff 	.word	0x7dffffff
 8001234:	22fe      	movs	r2, #254	@ 0xfe
 8001236:	1c6b      	adds	r3, r5, #1
 8001238:	4213      	tst	r3, r2
 800123a:	d0a3      	beq.n	8001184 <__aeabi_fsub+0x2bc>
 800123c:	2bff      	cmp	r3, #255	@ 0xff
 800123e:	d100      	bne.n	8001242 <__aeabi_fsub+0x37a>
 8001240:	e69c      	b.n	8000f7c <__aeabi_fsub+0xb4>
 8001242:	4461      	add	r1, ip
 8001244:	0849      	lsrs	r1, r1, #1
 8001246:	074a      	lsls	r2, r1, #29
 8001248:	d049      	beq.n	80012de <__aeabi_fsub+0x416>
 800124a:	220f      	movs	r2, #15
 800124c:	400a      	ands	r2, r1
 800124e:	2a04      	cmp	r2, #4
 8001250:	d045      	beq.n	80012de <__aeabi_fsub+0x416>
 8001252:	1d0a      	adds	r2, r1, #4
 8001254:	4694      	mov	ip, r2
 8001256:	e6ad      	b.n	8000fb4 <__aeabi_fsub+0xec>
 8001258:	2d00      	cmp	r5, #0
 800125a:	d100      	bne.n	800125e <__aeabi_fsub+0x396>
 800125c:	e776      	b.n	800114c <__aeabi_fsub+0x284>
 800125e:	e68d      	b.n	8000f7c <__aeabi_fsub+0xb4>
 8001260:	0034      	movs	r4, r6
 8001262:	20ff      	movs	r0, #255	@ 0xff
 8001264:	2200      	movs	r2, #0
 8001266:	e68b      	b.n	8000f80 <__aeabi_fsub+0xb8>
 8001268:	4663      	mov	r3, ip
 800126a:	2401      	movs	r4, #1
 800126c:	1acf      	subs	r7, r1, r3
 800126e:	4034      	ands	r4, r6
 8001270:	e664      	b.n	8000f3c <__aeabi_fsub+0x74>
 8001272:	4461      	add	r1, ip
 8001274:	014b      	lsls	r3, r1, #5
 8001276:	d56d      	bpl.n	8001354 <__aeabi_fsub+0x48c>
 8001278:	0848      	lsrs	r0, r1, #1
 800127a:	4944      	ldr	r1, [pc, #272]	@ (800138c <__aeabi_fsub+0x4c4>)
 800127c:	4001      	ands	r1, r0
 800127e:	0743      	lsls	r3, r0, #29
 8001280:	d02c      	beq.n	80012dc <__aeabi_fsub+0x414>
 8001282:	230f      	movs	r3, #15
 8001284:	4003      	ands	r3, r0
 8001286:	2b04      	cmp	r3, #4
 8001288:	d028      	beq.n	80012dc <__aeabi_fsub+0x414>
 800128a:	1d0b      	adds	r3, r1, #4
 800128c:	469c      	mov	ip, r3
 800128e:	2302      	movs	r3, #2
 8001290:	e690      	b.n	8000fb4 <__aeabi_fsub+0xec>
 8001292:	2900      	cmp	r1, #0
 8001294:	d100      	bne.n	8001298 <__aeabi_fsub+0x3d0>
 8001296:	e72b      	b.n	80010f0 <__aeabi_fsub+0x228>
 8001298:	2380      	movs	r3, #128	@ 0x80
 800129a:	03db      	lsls	r3, r3, #15
 800129c:	429f      	cmp	r7, r3
 800129e:	d200      	bcs.n	80012a2 <__aeabi_fsub+0x3da>
 80012a0:	e726      	b.n	80010f0 <__aeabi_fsub+0x228>
 80012a2:	4298      	cmp	r0, r3
 80012a4:	d300      	bcc.n	80012a8 <__aeabi_fsub+0x3e0>
 80012a6:	e723      	b.n	80010f0 <__aeabi_fsub+0x228>
 80012a8:	2401      	movs	r4, #1
 80012aa:	4034      	ands	r4, r6
 80012ac:	0007      	movs	r7, r0
 80012ae:	e71f      	b.n	80010f0 <__aeabi_fsub+0x228>
 80012b0:	0034      	movs	r4, r6
 80012b2:	468c      	mov	ip, r1
 80012b4:	e67e      	b.n	8000fb4 <__aeabi_fsub+0xec>
 80012b6:	2301      	movs	r3, #1
 80012b8:	08cf      	lsrs	r7, r1, #3
 80012ba:	e680      	b.n	8000fbe <__aeabi_fsub+0xf6>
 80012bc:	2300      	movs	r3, #0
 80012be:	e67e      	b.n	8000fbe <__aeabi_fsub+0xf6>
 80012c0:	2020      	movs	r0, #32
 80012c2:	4665      	mov	r5, ip
 80012c4:	1b80      	subs	r0, r0, r6
 80012c6:	4085      	lsls	r5, r0
 80012c8:	4663      	mov	r3, ip
 80012ca:	0028      	movs	r0, r5
 80012cc:	40f3      	lsrs	r3, r6
 80012ce:	1e45      	subs	r5, r0, #1
 80012d0:	41a8      	sbcs	r0, r5
 80012d2:	4303      	orrs	r3, r0
 80012d4:	469c      	mov	ip, r3
 80012d6:	0015      	movs	r5, r2
 80012d8:	448c      	add	ip, r1
 80012da:	e76d      	b.n	80011b8 <__aeabi_fsub+0x2f0>
 80012dc:	2302      	movs	r3, #2
 80012de:	08cf      	lsrs	r7, r1, #3
 80012e0:	e66d      	b.n	8000fbe <__aeabi_fsub+0xf6>
 80012e2:	1b0f      	subs	r7, r1, r4
 80012e4:	017b      	lsls	r3, r7, #5
 80012e6:	d528      	bpl.n	800133a <__aeabi_fsub+0x472>
 80012e8:	01bf      	lsls	r7, r7, #6
 80012ea:	09bf      	lsrs	r7, r7, #6
 80012ec:	0038      	movs	r0, r7
 80012ee:	f000 f86f 	bl	80013d0 <__clzsi2>
 80012f2:	003b      	movs	r3, r7
 80012f4:	3805      	subs	r0, #5
 80012f6:	4083      	lsls	r3, r0
 80012f8:	0034      	movs	r4, r6
 80012fa:	2501      	movs	r5, #1
 80012fc:	e6ca      	b.n	8001094 <__aeabi_fsub+0x1cc>
 80012fe:	2900      	cmp	r1, #0
 8001300:	d100      	bne.n	8001304 <__aeabi_fsub+0x43c>
 8001302:	e6b5      	b.n	8001070 <__aeabi_fsub+0x1a8>
 8001304:	2401      	movs	r4, #1
 8001306:	0007      	movs	r7, r0
 8001308:	4034      	ands	r4, r6
 800130a:	e658      	b.n	8000fbe <__aeabi_fsub+0xf6>
 800130c:	4663      	mov	r3, ip
 800130e:	2b00      	cmp	r3, #0
 8001310:	d100      	bne.n	8001314 <__aeabi_fsub+0x44c>
 8001312:	e6e9      	b.n	80010e8 <__aeabi_fsub+0x220>
 8001314:	2900      	cmp	r1, #0
 8001316:	d100      	bne.n	800131a <__aeabi_fsub+0x452>
 8001318:	e6ea      	b.n	80010f0 <__aeabi_fsub+0x228>
 800131a:	2380      	movs	r3, #128	@ 0x80
 800131c:	03db      	lsls	r3, r3, #15
 800131e:	429f      	cmp	r7, r3
 8001320:	d200      	bcs.n	8001324 <__aeabi_fsub+0x45c>
 8001322:	e6e5      	b.n	80010f0 <__aeabi_fsub+0x228>
 8001324:	4298      	cmp	r0, r3
 8001326:	d300      	bcc.n	800132a <__aeabi_fsub+0x462>
 8001328:	e6e2      	b.n	80010f0 <__aeabi_fsub+0x228>
 800132a:	0007      	movs	r7, r0
 800132c:	e6e0      	b.n	80010f0 <__aeabi_fsub+0x228>
 800132e:	2900      	cmp	r1, #0
 8001330:	d100      	bne.n	8001334 <__aeabi_fsub+0x46c>
 8001332:	e69e      	b.n	8001072 <__aeabi_fsub+0x1aa>
 8001334:	2300      	movs	r3, #0
 8001336:	08cf      	lsrs	r7, r1, #3
 8001338:	e641      	b.n	8000fbe <__aeabi_fsub+0xf6>
 800133a:	0034      	movs	r4, r6
 800133c:	2301      	movs	r3, #1
 800133e:	08ff      	lsrs	r7, r7, #3
 8001340:	e63d      	b.n	8000fbe <__aeabi_fsub+0xf6>
 8001342:	2f00      	cmp	r7, #0
 8001344:	d100      	bne.n	8001348 <__aeabi_fsub+0x480>
 8001346:	e693      	b.n	8001070 <__aeabi_fsub+0x1a8>
 8001348:	2300      	movs	r3, #0
 800134a:	08ff      	lsrs	r7, r7, #3
 800134c:	e637      	b.n	8000fbe <__aeabi_fsub+0xf6>
 800134e:	2300      	movs	r3, #0
 8001350:	08d7      	lsrs	r7, r2, #3
 8001352:	e634      	b.n	8000fbe <__aeabi_fsub+0xf6>
 8001354:	2301      	movs	r3, #1
 8001356:	08cf      	lsrs	r7, r1, #3
 8001358:	e631      	b.n	8000fbe <__aeabi_fsub+0xf6>
 800135a:	2280      	movs	r2, #128	@ 0x80
 800135c:	000b      	movs	r3, r1
 800135e:	04d2      	lsls	r2, r2, #19
 8001360:	2001      	movs	r0, #1
 8001362:	4013      	ands	r3, r2
 8001364:	4211      	tst	r1, r2
 8001366:	d000      	beq.n	800136a <__aeabi_fsub+0x4a2>
 8001368:	e6ae      	b.n	80010c8 <__aeabi_fsub+0x200>
 800136a:	08cf      	lsrs	r7, r1, #3
 800136c:	e627      	b.n	8000fbe <__aeabi_fsub+0xf6>
 800136e:	2b00      	cmp	r3, #0
 8001370:	d100      	bne.n	8001374 <__aeabi_fsub+0x4ac>
 8001372:	e75f      	b.n	8001234 <__aeabi_fsub+0x36c>
 8001374:	1b56      	subs	r6, r2, r5
 8001376:	2d00      	cmp	r5, #0
 8001378:	d101      	bne.n	800137e <__aeabi_fsub+0x4b6>
 800137a:	0033      	movs	r3, r6
 800137c:	e6e7      	b.n	800114e <__aeabi_fsub+0x286>
 800137e:	2380      	movs	r3, #128	@ 0x80
 8001380:	4660      	mov	r0, ip
 8001382:	04db      	lsls	r3, r3, #19
 8001384:	4318      	orrs	r0, r3
 8001386:	4684      	mov	ip, r0
 8001388:	e6eb      	b.n	8001162 <__aeabi_fsub+0x29a>
 800138a:	46c0      	nop			@ (mov r8, r8)
 800138c:	7dffffff 	.word	0x7dffffff

08001390 <__aeabi_f2iz>:
 8001390:	0241      	lsls	r1, r0, #9
 8001392:	0042      	lsls	r2, r0, #1
 8001394:	0fc3      	lsrs	r3, r0, #31
 8001396:	0a49      	lsrs	r1, r1, #9
 8001398:	2000      	movs	r0, #0
 800139a:	0e12      	lsrs	r2, r2, #24
 800139c:	2a7e      	cmp	r2, #126	@ 0x7e
 800139e:	dd03      	ble.n	80013a8 <__aeabi_f2iz+0x18>
 80013a0:	2a9d      	cmp	r2, #157	@ 0x9d
 80013a2:	dd02      	ble.n	80013aa <__aeabi_f2iz+0x1a>
 80013a4:	4a09      	ldr	r2, [pc, #36]	@ (80013cc <__aeabi_f2iz+0x3c>)
 80013a6:	1898      	adds	r0, r3, r2
 80013a8:	4770      	bx	lr
 80013aa:	2080      	movs	r0, #128	@ 0x80
 80013ac:	0400      	lsls	r0, r0, #16
 80013ae:	4301      	orrs	r1, r0
 80013b0:	2a95      	cmp	r2, #149	@ 0x95
 80013b2:	dc07      	bgt.n	80013c4 <__aeabi_f2iz+0x34>
 80013b4:	2096      	movs	r0, #150	@ 0x96
 80013b6:	1a82      	subs	r2, r0, r2
 80013b8:	40d1      	lsrs	r1, r2
 80013ba:	4248      	negs	r0, r1
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d1f3      	bne.n	80013a8 <__aeabi_f2iz+0x18>
 80013c0:	0008      	movs	r0, r1
 80013c2:	e7f1      	b.n	80013a8 <__aeabi_f2iz+0x18>
 80013c4:	3a96      	subs	r2, #150	@ 0x96
 80013c6:	4091      	lsls	r1, r2
 80013c8:	e7f7      	b.n	80013ba <__aeabi_f2iz+0x2a>
 80013ca:	46c0      	nop			@ (mov r8, r8)
 80013cc:	7fffffff 	.word	0x7fffffff

080013d0 <__clzsi2>:
 80013d0:	211c      	movs	r1, #28
 80013d2:	2301      	movs	r3, #1
 80013d4:	041b      	lsls	r3, r3, #16
 80013d6:	4298      	cmp	r0, r3
 80013d8:	d301      	bcc.n	80013de <__clzsi2+0xe>
 80013da:	0c00      	lsrs	r0, r0, #16
 80013dc:	3910      	subs	r1, #16
 80013de:	0a1b      	lsrs	r3, r3, #8
 80013e0:	4298      	cmp	r0, r3
 80013e2:	d301      	bcc.n	80013e8 <__clzsi2+0x18>
 80013e4:	0a00      	lsrs	r0, r0, #8
 80013e6:	3908      	subs	r1, #8
 80013e8:	091b      	lsrs	r3, r3, #4
 80013ea:	4298      	cmp	r0, r3
 80013ec:	d301      	bcc.n	80013f2 <__clzsi2+0x22>
 80013ee:	0900      	lsrs	r0, r0, #4
 80013f0:	3904      	subs	r1, #4
 80013f2:	a202      	add	r2, pc, #8	@ (adr r2, 80013fc <__clzsi2+0x2c>)
 80013f4:	5c10      	ldrb	r0, [r2, r0]
 80013f6:	1840      	adds	r0, r0, r1
 80013f8:	4770      	bx	lr
 80013fa:	46c0      	nop			@ (mov r8, r8)
 80013fc:	02020304 	.word	0x02020304
 8001400:	01010101 	.word	0x01010101
	...

0800140c <MX_DMA_Init>:

/**
  * Enable DMA controller clock and configure DMA channel for TIM3_CH2
  */
void MX_DMA_Init(void)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b082      	sub	sp, #8
 8001410:	af00      	add	r7, sp, #0
    __HAL_RCC_DMA1_CLK_ENABLE();
 8001412:	4b21      	ldr	r3, [pc, #132]	@ (8001498 <MX_DMA_Init+0x8c>)
 8001414:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001416:	4b20      	ldr	r3, [pc, #128]	@ (8001498 <MX_DMA_Init+0x8c>)
 8001418:	2101      	movs	r1, #1
 800141a:	430a      	orrs	r2, r1
 800141c:	639a      	str	r2, [r3, #56]	@ 0x38
 800141e:	4b1e      	ldr	r3, [pc, #120]	@ (8001498 <MX_DMA_Init+0x8c>)
 8001420:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001422:	2201      	movs	r2, #1
 8001424:	4013      	ands	r3, r2
 8001426:	607b      	str	r3, [r7, #4]
 8001428:	687b      	ldr	r3, [r7, #4]

    hdma_tim3_ch2.Instance = DMA1_Channel1;
 800142a:	4b1c      	ldr	r3, [pc, #112]	@ (800149c <MX_DMA_Init+0x90>)
 800142c:	4a1c      	ldr	r2, [pc, #112]	@ (80014a0 <MX_DMA_Init+0x94>)
 800142e:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch2.Init.Request = DMA_REQUEST_TIM3_CH2; // Zurück zu ursprünglicher Anforderung
 8001430:	4b1a      	ldr	r3, [pc, #104]	@ (800149c <MX_DMA_Init+0x90>)
 8001432:	2221      	movs	r2, #33	@ 0x21
 8001434:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001436:	4b19      	ldr	r3, [pc, #100]	@ (800149c <MX_DMA_Init+0x90>)
 8001438:	2210      	movs	r2, #16
 800143a:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 800143c:	4b17      	ldr	r3, [pc, #92]	@ (800149c <MX_DMA_Init+0x90>)
 800143e:	2200      	movs	r2, #0
 8001440:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8001442:	4b16      	ldr	r3, [pc, #88]	@ (800149c <MX_DMA_Init+0x90>)
 8001444:	2280      	movs	r2, #128	@ 0x80
 8001446:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001448:	4b14      	ldr	r3, [pc, #80]	@ (800149c <MX_DMA_Init+0x90>)
 800144a:	2280      	movs	r2, #128	@ 0x80
 800144c:	0092      	lsls	r2, r2, #2
 800144e:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001450:	4b12      	ldr	r3, [pc, #72]	@ (800149c <MX_DMA_Init+0x90>)
 8001452:	2280      	movs	r2, #128	@ 0x80
 8001454:	0112      	lsls	r2, r2, #4
 8001456:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch2.Init.Mode = DMA_CIRCULAR;
 8001458:	4b10      	ldr	r3, [pc, #64]	@ (800149c <MX_DMA_Init+0x90>)
 800145a:	2220      	movs	r2, #32
 800145c:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch2.Init.Priority = DMA_PRIORITY_LOW;
 800145e:	4b0f      	ldr	r3, [pc, #60]	@ (800149c <MX_DMA_Init+0x90>)
 8001460:	2200      	movs	r2, #0
 8001462:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim3_ch2) != HAL_OK)
 8001464:	4b0d      	ldr	r3, [pc, #52]	@ (800149c <MX_DMA_Init+0x90>)
 8001466:	0018      	movs	r0, r3
 8001468:	f000 ffc6 	bl	80023f8 <HAL_DMA_Init>
 800146c:	1e03      	subs	r3, r0, #0
 800146e:	d001      	beq.n	8001474 <MX_DMA_Init+0x68>
    {
        Error_Handler();
 8001470:	f000 fae2 	bl	8001a38 <Error_Handler>
    }

    extern TIM_HandleTypeDef htim3;
    __HAL_LINKDMA(&htim3, hdma[TIM_DMA_ID_CC2], hdma_tim3_ch2);
 8001474:	4b0b      	ldr	r3, [pc, #44]	@ (80014a4 <MX_DMA_Init+0x98>)
 8001476:	4a09      	ldr	r2, [pc, #36]	@ (800149c <MX_DMA_Init+0x90>)
 8001478:	629a      	str	r2, [r3, #40]	@ 0x28
 800147a:	4b08      	ldr	r3, [pc, #32]	@ (800149c <MX_DMA_Init+0x90>)
 800147c:	4a09      	ldr	r2, [pc, #36]	@ (80014a4 <MX_DMA_Init+0x98>)
 800147e:	629a      	str	r2, [r3, #40]	@ 0x28

    HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001480:	2200      	movs	r2, #0
 8001482:	2100      	movs	r1, #0
 8001484:	2009      	movs	r0, #9
 8001486:	f000 ff85 	bl	8002394 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800148a:	2009      	movs	r0, #9
 800148c:	f000 ff97 	bl	80023be <HAL_NVIC_EnableIRQ>
}
 8001490:	46c0      	nop			@ (mov r8, r8)
 8001492:	46bd      	mov	sp, r7
 8001494:	b002      	add	sp, #8
 8001496:	bd80      	pop	{r7, pc}
 8001498:	40021000 	.word	0x40021000
 800149c:	20000030 	.word	0x20000030
 80014a0:	40020008 	.word	0x40020008
 80014a4:	20000190 	.word	0x20000190

080014a8 <__NVIC_GetEnableIRQ>:
  \return             0  Interrupt is not enabled.
  \return             1  Interrupt is enabled.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE uint32_t __NVIC_GetEnableIRQ(IRQn_Type IRQn)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b082      	sub	sp, #8
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	0002      	movs	r2, r0
 80014b0:	1dfb      	adds	r3, r7, #7
 80014b2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80014b4:	1dfb      	adds	r3, r7, #7
 80014b6:	781b      	ldrb	r3, [r3, #0]
 80014b8:	2b7f      	cmp	r3, #127	@ 0x7f
 80014ba:	d80b      	bhi.n	80014d4 <__NVIC_GetEnableIRQ+0x2c>
  {
    return((uint32_t)(((NVIC->ISER[0U] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
 80014bc:	4b08      	ldr	r3, [pc, #32]	@ (80014e0 <__NVIC_GetEnableIRQ+0x38>)
 80014be:	681a      	ldr	r2, [r3, #0]
 80014c0:	1dfb      	adds	r3, r7, #7
 80014c2:	781b      	ldrb	r3, [r3, #0]
 80014c4:	0019      	movs	r1, r3
 80014c6:	231f      	movs	r3, #31
 80014c8:	400b      	ands	r3, r1
 80014ca:	40da      	lsrs	r2, r3
 80014cc:	0013      	movs	r3, r2
 80014ce:	2201      	movs	r2, #1
 80014d0:	4013      	ands	r3, r2
 80014d2:	e000      	b.n	80014d6 <__NVIC_GetEnableIRQ+0x2e>
  }
  else
  {
    return(0U);
 80014d4:	2300      	movs	r3, #0
  }
}
 80014d6:	0018      	movs	r0, r3
 80014d8:	46bd      	mov	sp, r7
 80014da:	b002      	add	sp, #8
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	46c0      	nop			@ (mov r8, r8)
 80014e0:	e000e100 	.word	0xe000e100

080014e4 <quad_calc>:
/**
  * @brief Berechnet quadratische Kurve für sanftes Fading
  * @param t: Eingabewert [0,1]
  * @return Wert [0,1]
  */
float quad_calc(float t) {
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b082      	sub	sp, #8
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
    return t * t * t * t;
 80014ec:	6879      	ldr	r1, [r7, #4]
 80014ee:	6878      	ldr	r0, [r7, #4]
 80014f0:	f7ff fb90 	bl	8000c14 <__aeabi_fmul>
 80014f4:	1c03      	adds	r3, r0, #0
 80014f6:	6879      	ldr	r1, [r7, #4]
 80014f8:	1c18      	adds	r0, r3, #0
 80014fa:	f7ff fb8b 	bl	8000c14 <__aeabi_fmul>
 80014fe:	1c03      	adds	r3, r0, #0
 8001500:	6879      	ldr	r1, [r7, #4]
 8001502:	1c18      	adds	r0, r3, #0
 8001504:	f7ff fb86 	bl	8000c14 <__aeabi_fmul>
 8001508:	1c03      	adds	r3, r0, #0
}
 800150a:	1c18      	adds	r0, r3, #0
 800150c:	46bd      	mov	sp, r7
 800150e:	b002      	add	sp, #8
 8001510:	bd80      	pop	{r7, pc}
	...

08001514 <led_fill_led_pwm_data>:
/**
  * @brief Bereitet PWM-Daten für WS2812 vor
  * @param ledx: LED-Index
  * @param ptr: Ausgabearray für PWM-Werte
  */
void led_fill_led_pwm_data(size_t ledx, uint32_t* ptr) {
 8001514:	b580      	push	{r7, lr}
 8001516:	b08a      	sub	sp, #40	@ 0x28
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
 800151c:	6039      	str	r1, [r7, #0]
    extern TIM_HandleTypeDef htim3;
    uint32_t arr = htim3.Init.Period + 1;
 800151e:	4b5a      	ldr	r3, [pc, #360]	@ (8001688 <led_fill_led_pwm_data+0x174>)
 8001520:	68db      	ldr	r3, [r3, #12]
 8001522:	3301      	adds	r3, #1
 8001524:	617b      	str	r3, [r7, #20]
    uint32_t pulse_high = (3 * arr / 4) - 1; // Hoch für logische 1 (~68%)
 8001526:	697a      	ldr	r2, [r7, #20]
 8001528:	0013      	movs	r3, r2
 800152a:	005b      	lsls	r3, r3, #1
 800152c:	189b      	adds	r3, r3, r2
 800152e:	089b      	lsrs	r3, r3, #2
 8001530:	3b01      	subs	r3, #1
 8001532:	613b      	str	r3, [r7, #16]
    uint32_t pulse_low = (1 * arr / 4) - 1;  // Hoch für logische 0 (~32%)
 8001534:	697b      	ldr	r3, [r7, #20]
 8001536:	089b      	lsrs	r3, r3, #2
 8001538:	3b01      	subs	r3, #1
 800153a:	60fb      	str	r3, [r7, #12]

    if (ledx < LED_CFG_COUNT) {
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	2b0b      	cmp	r3, #11
 8001540:	d900      	bls.n	8001544 <led_fill_led_pwm_data+0x30>
 8001542:	e09c      	b.n	800167e <led_fill_led_pwm_data+0x16a>
        uint32_t r, g, b;
        // Grüne LED im Kreis-Modus soll nicht gedimmt werden
        if (in_circle_mode && ledx == green_led_index) {
 8001544:	4b51      	ldr	r3, [pc, #324]	@ (800168c <led_fill_led_pwm_data+0x178>)
 8001546:	781b      	ldrb	r3, [r3, #0]
 8001548:	b2db      	uxtb	r3, r3
 800154a:	2b00      	cmp	r3, #0
 800154c:	d01e      	beq.n	800158c <led_fill_led_pwm_data+0x78>
 800154e:	4b50      	ldr	r3, [pc, #320]	@ (8001690 <led_fill_led_pwm_data+0x17c>)
 8001550:	781b      	ldrb	r3, [r3, #0]
 8001552:	b2db      	uxtb	r3, r3
 8001554:	001a      	movs	r2, r3
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	4293      	cmp	r3, r2
 800155a:	d117      	bne.n	800158c <led_fill_led_pwm_data+0x78>
            r = leds_color_data[ledx * LED_CFG_BYTES_PER_LED + 0]; // Volle Helligkeit
 800155c:	687a      	ldr	r2, [r7, #4]
 800155e:	0013      	movs	r3, r2
 8001560:	005b      	lsls	r3, r3, #1
 8001562:	189b      	adds	r3, r3, r2
 8001564:	4a4b      	ldr	r2, [pc, #300]	@ (8001694 <led_fill_led_pwm_data+0x180>)
 8001566:	5cd3      	ldrb	r3, [r2, r3]
 8001568:	627b      	str	r3, [r7, #36]	@ 0x24
            g = leds_color_data[ledx * LED_CFG_BYTES_PER_LED + 1];
 800156a:	687a      	ldr	r2, [r7, #4]
 800156c:	0013      	movs	r3, r2
 800156e:	005b      	lsls	r3, r3, #1
 8001570:	189b      	adds	r3, r3, r2
 8001572:	3301      	adds	r3, #1
 8001574:	4a47      	ldr	r2, [pc, #284]	@ (8001694 <led_fill_led_pwm_data+0x180>)
 8001576:	5cd3      	ldrb	r3, [r2, r3]
 8001578:	623b      	str	r3, [r7, #32]
            b = leds_color_data[ledx * LED_CFG_BYTES_PER_LED + 2];
 800157a:	687a      	ldr	r2, [r7, #4]
 800157c:	0013      	movs	r3, r2
 800157e:	005b      	lsls	r3, r3, #1
 8001580:	189b      	adds	r3, r3, r2
 8001582:	3302      	adds	r3, #2
 8001584:	4a43      	ldr	r2, [pc, #268]	@ (8001694 <led_fill_led_pwm_data+0x180>)
 8001586:	5cd3      	ldrb	r3, [r2, r3]
 8001588:	61fb      	str	r3, [r7, #28]
 800158a:	e037      	b.n	80015fc <led_fill_led_pwm_data+0xe8>
        } else {
            r = (uint8_t)(((uint32_t)leds_color_data[ledx * LED_CFG_BYTES_PER_LED + 0] * brightness) / 0xFF);
 800158c:	687a      	ldr	r2, [r7, #4]
 800158e:	0013      	movs	r3, r2
 8001590:	005b      	lsls	r3, r3, #1
 8001592:	189b      	adds	r3, r3, r2
 8001594:	4a3f      	ldr	r2, [pc, #252]	@ (8001694 <led_fill_led_pwm_data+0x180>)
 8001596:	5cd3      	ldrb	r3, [r2, r3]
 8001598:	001a      	movs	r2, r3
 800159a:	4b3f      	ldr	r3, [pc, #252]	@ (8001698 <led_fill_led_pwm_data+0x184>)
 800159c:	781b      	ldrb	r3, [r3, #0]
 800159e:	b2db      	uxtb	r3, r3
 80015a0:	4353      	muls	r3, r2
 80015a2:	21ff      	movs	r1, #255	@ 0xff
 80015a4:	0018      	movs	r0, r3
 80015a6:	f7fe fdad 	bl	8000104 <__udivsi3>
 80015aa:	0003      	movs	r3, r0
 80015ac:	b2db      	uxtb	r3, r3
 80015ae:	627b      	str	r3, [r7, #36]	@ 0x24
            g = (uint8_t)(((uint32_t)leds_color_data[ledx * LED_CFG_BYTES_PER_LED + 1] * brightness) / 0xFF);
 80015b0:	687a      	ldr	r2, [r7, #4]
 80015b2:	0013      	movs	r3, r2
 80015b4:	005b      	lsls	r3, r3, #1
 80015b6:	189b      	adds	r3, r3, r2
 80015b8:	3301      	adds	r3, #1
 80015ba:	4a36      	ldr	r2, [pc, #216]	@ (8001694 <led_fill_led_pwm_data+0x180>)
 80015bc:	5cd3      	ldrb	r3, [r2, r3]
 80015be:	001a      	movs	r2, r3
 80015c0:	4b35      	ldr	r3, [pc, #212]	@ (8001698 <led_fill_led_pwm_data+0x184>)
 80015c2:	781b      	ldrb	r3, [r3, #0]
 80015c4:	b2db      	uxtb	r3, r3
 80015c6:	4353      	muls	r3, r2
 80015c8:	21ff      	movs	r1, #255	@ 0xff
 80015ca:	0018      	movs	r0, r3
 80015cc:	f7fe fd9a 	bl	8000104 <__udivsi3>
 80015d0:	0003      	movs	r3, r0
 80015d2:	b2db      	uxtb	r3, r3
 80015d4:	623b      	str	r3, [r7, #32]
            b = (uint8_t)(((uint32_t)leds_color_data[ledx * LED_CFG_BYTES_PER_LED + 2] * brightness) / 0xFF);
 80015d6:	687a      	ldr	r2, [r7, #4]
 80015d8:	0013      	movs	r3, r2
 80015da:	005b      	lsls	r3, r3, #1
 80015dc:	189b      	adds	r3, r3, r2
 80015de:	3302      	adds	r3, #2
 80015e0:	4a2c      	ldr	r2, [pc, #176]	@ (8001694 <led_fill_led_pwm_data+0x180>)
 80015e2:	5cd3      	ldrb	r3, [r2, r3]
 80015e4:	001a      	movs	r2, r3
 80015e6:	4b2c      	ldr	r3, [pc, #176]	@ (8001698 <led_fill_led_pwm_data+0x184>)
 80015e8:	781b      	ldrb	r3, [r3, #0]
 80015ea:	b2db      	uxtb	r3, r3
 80015ec:	4353      	muls	r3, r2
 80015ee:	21ff      	movs	r1, #255	@ 0xff
 80015f0:	0018      	movs	r0, r3
 80015f2:	f7fe fd87 	bl	8000104 <__udivsi3>
 80015f6:	0003      	movs	r3, r0
 80015f8:	b2db      	uxtb	r3, r3
 80015fa:	61fb      	str	r3, [r7, #28]
        }
        for (size_t i = 0; i < 8; i++) {
 80015fc:	2300      	movs	r3, #0
 80015fe:	61bb      	str	r3, [r7, #24]
 8001600:	e03a      	b.n	8001678 <led_fill_led_pwm_data+0x164>
            ptr[i] = (g & (1 << (7 - i))) ? pulse_high : pulse_low;      // Grün
 8001602:	69bb      	ldr	r3, [r7, #24]
 8001604:	2207      	movs	r2, #7
 8001606:	1ad3      	subs	r3, r2, r3
 8001608:	2201      	movs	r2, #1
 800160a:	409a      	lsls	r2, r3
 800160c:	0013      	movs	r3, r2
 800160e:	001a      	movs	r2, r3
 8001610:	6a3b      	ldr	r3, [r7, #32]
 8001612:	4013      	ands	r3, r2
 8001614:	d001      	beq.n	800161a <led_fill_led_pwm_data+0x106>
 8001616:	693a      	ldr	r2, [r7, #16]
 8001618:	e000      	b.n	800161c <led_fill_led_pwm_data+0x108>
 800161a:	68fa      	ldr	r2, [r7, #12]
 800161c:	69bb      	ldr	r3, [r7, #24]
 800161e:	009b      	lsls	r3, r3, #2
 8001620:	6839      	ldr	r1, [r7, #0]
 8001622:	18cb      	adds	r3, r1, r3
 8001624:	601a      	str	r2, [r3, #0]
            ptr[8 + i] = (r & (1 << (7 - i))) ? pulse_high : pulse_low;  // Rot
 8001626:	69bb      	ldr	r3, [r7, #24]
 8001628:	2207      	movs	r2, #7
 800162a:	1ad3      	subs	r3, r2, r3
 800162c:	2201      	movs	r2, #1
 800162e:	409a      	lsls	r2, r3
 8001630:	0013      	movs	r3, r2
 8001632:	001a      	movs	r2, r3
 8001634:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001636:	4013      	ands	r3, r2
 8001638:	d001      	beq.n	800163e <led_fill_led_pwm_data+0x12a>
 800163a:	693a      	ldr	r2, [r7, #16]
 800163c:	e000      	b.n	8001640 <led_fill_led_pwm_data+0x12c>
 800163e:	68fa      	ldr	r2, [r7, #12]
 8001640:	69bb      	ldr	r3, [r7, #24]
 8001642:	3308      	adds	r3, #8
 8001644:	009b      	lsls	r3, r3, #2
 8001646:	6839      	ldr	r1, [r7, #0]
 8001648:	18cb      	adds	r3, r1, r3
 800164a:	601a      	str	r2, [r3, #0]
            ptr[16 + i] = (b & (1 << (7 - i))) ? pulse_high : pulse_low; // Blau
 800164c:	69bb      	ldr	r3, [r7, #24]
 800164e:	2207      	movs	r2, #7
 8001650:	1ad3      	subs	r3, r2, r3
 8001652:	2201      	movs	r2, #1
 8001654:	409a      	lsls	r2, r3
 8001656:	0013      	movs	r3, r2
 8001658:	001a      	movs	r2, r3
 800165a:	69fb      	ldr	r3, [r7, #28]
 800165c:	4013      	ands	r3, r2
 800165e:	d001      	beq.n	8001664 <led_fill_led_pwm_data+0x150>
 8001660:	693a      	ldr	r2, [r7, #16]
 8001662:	e000      	b.n	8001666 <led_fill_led_pwm_data+0x152>
 8001664:	68fa      	ldr	r2, [r7, #12]
 8001666:	69bb      	ldr	r3, [r7, #24]
 8001668:	3310      	adds	r3, #16
 800166a:	009b      	lsls	r3, r3, #2
 800166c:	6839      	ldr	r1, [r7, #0]
 800166e:	18cb      	adds	r3, r1, r3
 8001670:	601a      	str	r2, [r3, #0]
        for (size_t i = 0; i < 8; i++) {
 8001672:	69bb      	ldr	r3, [r7, #24]
 8001674:	3301      	adds	r3, #1
 8001676:	61bb      	str	r3, [r7, #24]
 8001678:	69bb      	ldr	r3, [r7, #24]
 800167a:	2b07      	cmp	r3, #7
 800167c:	d9c1      	bls.n	8001602 <led_fill_led_pwm_data+0xee>
        }
    }
}
 800167e:	46c0      	nop			@ (mov r8, r8)
 8001680:	46bd      	mov	sp, r7
 8001682:	b00a      	add	sp, #40	@ 0x28
 8001684:	bd80      	pop	{r7, pc}
 8001686:	46c0      	nop			@ (mov r8, r8)
 8001688:	20000190 	.word	0x20000190
 800168c:	20000181 	.word	0x20000181
 8001690:	20000182 	.word	0x20000182
 8001694:	2000008c 	.word	0x2000008c
 8001698:	20000000 	.word	0x20000000

0800169c <led_update_sequence>:

/**
  * @brief Aktualisiert WS2812-Daten bei DMA-HT/TC-Ereignissen
  * @param tc: 1 für Transfer Complete, 0 für Half Transfer
  */
void led_update_sequence(uint8_t tc) {
 800169c:	b580      	push	{r7, lr}
 800169e:	b084      	sub	sp, #16
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	0002      	movs	r2, r0
 80016a4:	1dfb      	adds	r3, r7, #7
 80016a6:	701a      	strb	r2, [r3, #0]
    tc = tc ? 1 : 0;
 80016a8:	1dfb      	adds	r3, r7, #7
 80016aa:	781b      	ldrb	r3, [r3, #0]
 80016ac:	1e5a      	subs	r2, r3, #1
 80016ae:	4193      	sbcs	r3, r2
 80016b0:	b2da      	uxtb	r2, r3
 80016b2:	1dfb      	adds	r3, r7, #7
 80016b4:	701a      	strb	r2, [r3, #0]
    if (!is_updating) {
 80016b6:	4b26      	ldr	r3, [pc, #152]	@ (8001750 <led_update_sequence+0xb4>)
 80016b8:	781b      	ldrb	r3, [r3, #0]
 80016ba:	b2db      	uxtb	r3, r3
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d043      	beq.n	8001748 <led_update_sequence+0xac>
        return;
    }

    led_cycles_cnt += LED_CFG_LEDS_PER_DMA_IRQ;
 80016c0:	4b24      	ldr	r3, [pc, #144]	@ (8001754 <led_update_sequence+0xb8>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	1c5a      	adds	r2, r3, #1
 80016c6:	4b23      	ldr	r3, [pc, #140]	@ (8001754 <led_update_sequence+0xb8>)
 80016c8:	601a      	str	r2, [r3, #0]

    if (led_cycles_cnt < LED_RESET_PRE_MIN_LED_CYCLES) {
 80016ca:	4b22      	ldr	r3, [pc, #136]	@ (8001754 <led_update_sequence+0xb8>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	2b01      	cmp	r3, #1
 80016d0:	d93b      	bls.n	800174a <led_update_sequence+0xae>
            for (uint32_t i = 0; index < LED_CFG_LEDS_PER_DMA_IRQ && i < LED_CFG_COUNT; ++index, ++i) {
                led_fill_led_pwm_data(i, &dma_buffer[tc * DMA_BUFF_ELE_HALF_LEN + (index % LED_CFG_LEDS_PER_DMA_IRQ) * DMA_BUFF_ELE_LED_LEN]);
            }
        }
#endif
    } else if (led_cycles_cnt < (LED_RESET_PRE_MIN_LED_CYCLES + LED_CFG_COUNT)) {
 80016d2:	4b20      	ldr	r3, [pc, #128]	@ (8001754 <led_update_sequence+0xb8>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	2b0d      	cmp	r3, #13
 80016d8:	d812      	bhi.n	8001700 <led_update_sequence+0x64>
        uint32_t next_led = led_cycles_cnt - LED_RESET_PRE_MIN_LED_CYCLES;
 80016da:	4b1e      	ldr	r3, [pc, #120]	@ (8001754 <led_update_sequence+0xb8>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	3b02      	subs	r3, #2
 80016e0:	60fb      	str	r3, [r7, #12]
#if LED_CFG_LEDS_PER_DMA_IRQ == 1
        led_fill_led_pwm_data(next_led, &dma_buffer[tc * DMA_BUFF_ELE_HALF_LEN]);
 80016e2:	1dfb      	adds	r3, r7, #7
 80016e4:	781a      	ldrb	r2, [r3, #0]
 80016e6:	0013      	movs	r3, r2
 80016e8:	005b      	lsls	r3, r3, #1
 80016ea:	189b      	adds	r3, r3, r2
 80016ec:	00db      	lsls	r3, r3, #3
 80016ee:	009a      	lsls	r2, r3, #2
 80016f0:	4b19      	ldr	r3, [pc, #100]	@ (8001758 <led_update_sequence+0xbc>)
 80016f2:	18d2      	adds	r2, r2, r3
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	0011      	movs	r1, r2
 80016f8:	0018      	movs	r0, r3
 80016fa:	f7ff ff0b 	bl	8001514 <led_fill_led_pwm_data>
 80016fe:	e024      	b.n	800174a <led_update_sequence+0xae>
        if (counter < LED_CFG_LEDS_PER_DMA_IRQ) {
            memset(&dma_buffer[tc * DMA_BUFF_ELE_HALF_LEN + counter * DMA_BUFF_ELE_LED_SIZEOF], 0x00,
                   (LED_CFG_LEDS_PER_DMA_IRQ - counter) * DMA_BUFF_ELE_LED_SIZEOF);
        }
#endif
    } else if (led_cycles_cnt < (LED_RESET_PRE_MIN_LED_CYCLES + LED_CFG_COUNT + LED_RESET_POST_MIN_LED_CYCLES + LED_CFG_LEDS_PER_DMA_IRQ)) {
 8001700:	4b14      	ldr	r3, [pc, #80]	@ (8001754 <led_update_sequence+0xb8>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	2b10      	cmp	r3, #16
 8001706:	d812      	bhi.n	800172e <led_update_sequence+0x92>
        if (led_cycles_cnt < (LED_RESET_PRE_MIN_LED_CYCLES + LED_CFG_COUNT + 2 * LED_CFG_LEDS_PER_DMA_IRQ)) {
 8001708:	4b12      	ldr	r3, [pc, #72]	@ (8001754 <led_update_sequence+0xb8>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	2b0f      	cmp	r3, #15
 800170e:	d81c      	bhi.n	800174a <led_update_sequence+0xae>
            memset(&dma_buffer[tc * DMA_BUFF_ELE_HALF_LEN], 0x00, DMA_BUFF_ELE_HALF_SIZEOF);
 8001710:	1dfb      	adds	r3, r7, #7
 8001712:	781a      	ldrb	r2, [r3, #0]
 8001714:	0013      	movs	r3, r2
 8001716:	005b      	lsls	r3, r3, #1
 8001718:	189b      	adds	r3, r3, r2
 800171a:	00db      	lsls	r3, r3, #3
 800171c:	009a      	lsls	r2, r3, #2
 800171e:	4b0e      	ldr	r3, [pc, #56]	@ (8001758 <led_update_sequence+0xbc>)
 8001720:	18d3      	adds	r3, r2, r3
 8001722:	2260      	movs	r2, #96	@ 0x60
 8001724:	2100      	movs	r1, #0
 8001726:	0018      	movs	r0, r3
 8001728:	f003 f88a 	bl	8004840 <memset>
 800172c:	e00d      	b.n	800174a <led_update_sequence+0xae>
        }
    } else {
        HAL_DMA_Abort_IT(&hdma_tim3_ch2);
 800172e:	4b0b      	ldr	r3, [pc, #44]	@ (800175c <led_update_sequence+0xc0>)
 8001730:	0018      	movs	r0, r3
 8001732:	f000 ffe9 	bl	8002708 <HAL_DMA_Abort_IT>
        HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_2);
 8001736:	4b0a      	ldr	r3, [pc, #40]	@ (8001760 <led_update_sequence+0xc4>)
 8001738:	2104      	movs	r1, #4
 800173a:	0018      	movs	r0, r3
 800173c:	f002 f87e 	bl	800383c <HAL_TIM_PWM_Stop>
        is_updating = 0;
 8001740:	4b03      	ldr	r3, [pc, #12]	@ (8001750 <led_update_sequence+0xb4>)
 8001742:	2200      	movs	r2, #0
 8001744:	701a      	strb	r2, [r3, #0]
 8001746:	e000      	b.n	800174a <led_update_sequence+0xae>
        return;
 8001748:	46c0      	nop			@ (mov r8, r8)
    }
}
 800174a:	46bd      	mov	sp, r7
 800174c:	b004      	add	sp, #16
 800174e:	bd80      	pop	{r7, pc}
 8001750:	20000170 	.word	0x20000170
 8001754:	20000174 	.word	0x20000174
 8001758:	200000b0 	.word	0x200000b0
 800175c:	20000030 	.word	0x20000030
 8001760:	20000190 	.word	0x20000190

08001764 <led_start_transfer>:

/**
  * @brief Startet die WS2812-Datenübertragung
  * @return 1 wenn gestartet, 0 wenn bereits läuft
  */
uint8_t led_start_transfer(void) {
 8001764:	b590      	push	{r4, r7, lr}
 8001766:	b085      	sub	sp, #20
 8001768:	af00      	add	r7, sp, #0
    extern TIM_HandleTypeDef htim3;
    if (is_updating) {
 800176a:	4b58      	ldr	r3, [pc, #352]	@ (80018cc <led_start_transfer+0x168>)
 800176c:	781b      	ldrb	r3, [r3, #0]
 800176e:	b2db      	uxtb	r3, r3
 8001770:	2b00      	cmp	r3, #0
 8001772:	d001      	beq.n	8001778 <led_start_transfer+0x14>
        return 0;
 8001774:	2300      	movs	r3, #0
 8001776:	e0a4      	b.n	80018c2 <led_start_transfer+0x15e>
    }

    is_updating = 1;
 8001778:	4b54      	ldr	r3, [pc, #336]	@ (80018cc <led_start_transfer+0x168>)
 800177a:	2201      	movs	r2, #1
 800177c:	701a      	strb	r2, [r3, #0]
    led_cycles_cnt = LED_CFG_LEDS_PER_DMA_IRQ;
 800177e:	4b54      	ldr	r3, [pc, #336]	@ (80018d0 <led_start_transfer+0x16c>)
 8001780:	2201      	movs	r2, #1
 8001782:	601a      	str	r2, [r3, #0]

    memset(dma_buffer, 0x00, sizeof(dma_buffer));
 8001784:	4b53      	ldr	r3, [pc, #332]	@ (80018d4 <led_start_transfer+0x170>)
 8001786:	22c0      	movs	r2, #192	@ 0xc0
 8001788:	2100      	movs	r1, #0
 800178a:	0018      	movs	r0, r3
 800178c:	f003 f858 	bl	8004840 <memset>
    for (uint32_t i = 0, index = LED_RESET_PRE_MIN_LED_CYCLES; index < 2 * LED_CFG_LEDS_PER_DMA_IRQ; ++index, ++i) {
 8001790:	2300      	movs	r3, #0
 8001792:	60fb      	str	r3, [r7, #12]
 8001794:	2302      	movs	r3, #2
 8001796:	60bb      	str	r3, [r7, #8]
 8001798:	e012      	b.n	80017c0 <led_start_transfer+0x5c>
        led_fill_led_pwm_data(i, &dma_buffer[index * DMA_BUFF_ELE_LED_LEN]);
 800179a:	68ba      	ldr	r2, [r7, #8]
 800179c:	0013      	movs	r3, r2
 800179e:	005b      	lsls	r3, r3, #1
 80017a0:	189b      	adds	r3, r3, r2
 80017a2:	00db      	lsls	r3, r3, #3
 80017a4:	009a      	lsls	r2, r3, #2
 80017a6:	4b4b      	ldr	r3, [pc, #300]	@ (80018d4 <led_start_transfer+0x170>)
 80017a8:	18d2      	adds	r2, r2, r3
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	0011      	movs	r1, r2
 80017ae:	0018      	movs	r0, r3
 80017b0:	f7ff feb0 	bl	8001514 <led_fill_led_pwm_data>
    for (uint32_t i = 0, index = LED_RESET_PRE_MIN_LED_CYCLES; index < 2 * LED_CFG_LEDS_PER_DMA_IRQ; ++index, ++i) {
 80017b4:	68bb      	ldr	r3, [r7, #8]
 80017b6:	3301      	adds	r3, #1
 80017b8:	60bb      	str	r3, [r7, #8]
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	3301      	adds	r3, #1
 80017be:	60fb      	str	r3, [r7, #12]
 80017c0:	68bb      	ldr	r3, [r7, #8]
 80017c2:	2b01      	cmp	r3, #1
 80017c4:	d9e9      	bls.n	800179a <led_start_transfer+0x36>
    }

    // Deinitialisiere und initialisiere den DMA-Kanal neu
    HAL_DMA_DeInit(&hdma_tim3_ch2);
 80017c6:	4b44      	ldr	r3, [pc, #272]	@ (80018d8 <led_start_transfer+0x174>)
 80017c8:	0018      	movs	r0, r3
 80017ca:	f000 fe9f 	bl	800250c <HAL_DMA_DeInit>
    if (HAL_DMA_Init(&hdma_tim3_ch2) != HAL_OK) {
 80017ce:	4b42      	ldr	r3, [pc, #264]	@ (80018d8 <led_start_transfer+0x174>)
 80017d0:	0018      	movs	r0, r3
 80017d2:	f000 fe11 	bl	80023f8 <HAL_DMA_Init>
 80017d6:	1e03      	subs	r3, r0, #0
 80017d8:	d00c      	beq.n	80017f4 <led_start_transfer+0x90>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 80017da:	2380      	movs	r3, #128	@ 0x80
 80017dc:	0119      	lsls	r1, r3, #4
 80017de:	23a0      	movs	r3, #160	@ 0xa0
 80017e0:	05db      	lsls	r3, r3, #23
 80017e2:	2201      	movs	r2, #1
 80017e4:	0018      	movs	r0, r3
 80017e6:	f001 faab 	bl	8002d40 <HAL_GPIO_WritePin>
        HAL_Delay(100);
 80017ea:	2064      	movs	r0, #100	@ 0x64
 80017ec:	f000 fd02 	bl	80021f4 <HAL_Delay>
        while (1);
 80017f0:	46c0      	nop			@ (mov r8, r8)
 80017f2:	e7fd      	b.n	80017f0 <led_start_transfer+0x8c>
    }

    // Überprüfe den DMA-Zustand vor dem Start
    HAL_DMA_StateTypeDef dma_state = HAL_DMA_GetState(&hdma_tim3_ch2);
 80017f4:	1dfc      	adds	r4, r7, #7
 80017f6:	4b38      	ldr	r3, [pc, #224]	@ (80018d8 <led_start_transfer+0x174>)
 80017f8:	0018      	movs	r0, r3
 80017fa:	f001 f8a1 	bl	8002940 <HAL_DMA_GetState>
 80017fe:	0003      	movs	r3, r0
 8001800:	7023      	strb	r3, [r4, #0]
    if (dma_state != HAL_DMA_STATE_READY) {
 8001802:	1dfb      	adds	r3, r7, #7
 8001804:	781b      	ldrb	r3, [r3, #0]
 8001806:	2b01      	cmp	r3, #1
 8001808:	d00c      	beq.n	8001824 <led_start_transfer+0xc0>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 800180a:	2380      	movs	r3, #128	@ 0x80
 800180c:	0119      	lsls	r1, r3, #4
 800180e:	23a0      	movs	r3, #160	@ 0xa0
 8001810:	05db      	lsls	r3, r3, #23
 8001812:	2201      	movs	r2, #1
 8001814:	0018      	movs	r0, r3
 8001816:	f001 fa93 	bl	8002d40 <HAL_GPIO_WritePin>
        HAL_Delay(100);
 800181a:	2064      	movs	r0, #100	@ 0x64
 800181c:	f000 fcea 	bl	80021f4 <HAL_Delay>
        while (1);
 8001820:	46c0      	nop			@ (mov r8, r8)
 8001822:	e7fd      	b.n	8001820 <led_start_transfer+0xbc>
    }

    // Überprüfe die NVIC-Einstellungen
    if (!NVIC_GetEnableIRQ(DMA1_Channel1_IRQn)) {
 8001824:	2009      	movs	r0, #9
 8001826:	f7ff fe3f 	bl	80014a8 <__NVIC_GetEnableIRQ>
 800182a:	1e03      	subs	r3, r0, #0
 800182c:	d114      	bne.n	8001858 <led_start_transfer+0xf4>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 800182e:	2380      	movs	r3, #128	@ 0x80
 8001830:	0119      	lsls	r1, r3, #4
 8001832:	23a0      	movs	r3, #160	@ 0xa0
 8001834:	05db      	lsls	r3, r3, #23
 8001836:	2201      	movs	r2, #1
 8001838:	0018      	movs	r0, r3
 800183a:	f001 fa81 	bl	8002d40 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 800183e:	2380      	movs	r3, #128	@ 0x80
 8001840:	0059      	lsls	r1, r3, #1
 8001842:	23a0      	movs	r3, #160	@ 0xa0
 8001844:	05db      	lsls	r3, r3, #23
 8001846:	2201      	movs	r2, #1
 8001848:	0018      	movs	r0, r3
 800184a:	f001 fa79 	bl	8002d40 <HAL_GPIO_WritePin>
        HAL_Delay(100);
 800184e:	2064      	movs	r0, #100	@ 0x64
 8001850:	f000 fcd0 	bl	80021f4 <HAL_Delay>
        while (1);
 8001854:	46c0      	nop			@ (mov r8, r8)
 8001856:	e7fd      	b.n	8001854 <led_start_transfer+0xf0>
    }

    // Überprüfe die Timer-Initialisierung
    if (htim3.Instance == NULL) {
 8001858:	4b20      	ldr	r3, [pc, #128]	@ (80018dc <led_start_transfer+0x178>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	2b00      	cmp	r3, #0
 800185e:	d109      	bne.n	8001874 <led_start_transfer+0x110>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 8001860:	2380      	movs	r3, #128	@ 0x80
 8001862:	0059      	lsls	r1, r3, #1
 8001864:	23a0      	movs	r3, #160	@ 0xa0
 8001866:	05db      	lsls	r3, r3, #23
 8001868:	2201      	movs	r2, #1
 800186a:	0018      	movs	r0, r3
 800186c:	f001 fa68 	bl	8002d40 <HAL_GPIO_WritePin>
        while (1);
 8001870:	46c0      	nop			@ (mov r8, r8)
 8001872:	e7fd      	b.n	8001870 <led_start_transfer+0x10c>
    }

    // Starte den Timer mit DMA
    htim3.Instance->DIER |= TIM_DIER_CC2DE; // Explizit aktivieren
 8001874:	4b19      	ldr	r3, [pc, #100]	@ (80018dc <led_start_transfer+0x178>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	68da      	ldr	r2, [r3, #12]
 800187a:	4b18      	ldr	r3, [pc, #96]	@ (80018dc <led_start_transfer+0x178>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	2180      	movs	r1, #128	@ 0x80
 8001880:	00c9      	lsls	r1, r1, #3
 8001882:	430a      	orrs	r2, r1
 8001884:	60da      	str	r2, [r3, #12]
    if (HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_2, dma_buffer, DMA_BUFF_ELE_LEN) != HAL_OK) {
 8001886:	4a13      	ldr	r2, [pc, #76]	@ (80018d4 <led_start_transfer+0x170>)
 8001888:	4814      	ldr	r0, [pc, #80]	@ (80018dc <led_start_transfer+0x178>)
 800188a:	2330      	movs	r3, #48	@ 0x30
 800188c:	2104      	movs	r1, #4
 800188e:	f002 f85b 	bl	8003948 <HAL_TIM_PWM_Start_DMA>
 8001892:	1e03      	subs	r3, r0, #0
 8001894:	d014      	beq.n	80018c0 <led_start_transfer+0x15c>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8001896:	2380      	movs	r3, #128	@ 0x80
 8001898:	0119      	lsls	r1, r3, #4
 800189a:	23a0      	movs	r3, #160	@ 0xa0
 800189c:	05db      	lsls	r3, r3, #23
 800189e:	2201      	movs	r2, #1
 80018a0:	0018      	movs	r0, r3
 80018a2:	f001 fa4d 	bl	8002d40 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 80018a6:	2380      	movs	r3, #128	@ 0x80
 80018a8:	0059      	lsls	r1, r3, #1
 80018aa:	23a0      	movs	r3, #160	@ 0xa0
 80018ac:	05db      	lsls	r3, r3, #23
 80018ae:	2201      	movs	r2, #1
 80018b0:	0018      	movs	r0, r3
 80018b2:	f001 fa45 	bl	8002d40 <HAL_GPIO_WritePin>
        HAL_Delay(100);
 80018b6:	2064      	movs	r0, #100	@ 0x64
 80018b8:	f000 fc9c 	bl	80021f4 <HAL_Delay>
        while (1);
 80018bc:	46c0      	nop			@ (mov r8, r8)
 80018be:	e7fd      	b.n	80018bc <led_start_transfer+0x158>
    }

    return 1;
 80018c0:	2301      	movs	r3, #1
}
 80018c2:	0018      	movs	r0, r3
 80018c4:	46bd      	mov	sp, r7
 80018c6:	b005      	add	sp, #20
 80018c8:	bd90      	pop	{r4, r7, pc}
 80018ca:	46c0      	nop			@ (mov r8, r8)
 80018cc:	20000170 	.word	0x20000170
 80018d0:	20000174 	.word	0x20000174
 80018d4:	200000b0 	.word	0x200000b0
 80018d8:	20000030 	.word	0x20000030
 80018dc:	20000190 	.word	0x20000190

080018e0 <main>:

/**
  * @brief  Der Einstiegspunkt der Anwendung.
  * @retval int
  */
int main(void) {
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b082      	sub	sp, #8
 80018e4:	af00      	add	r7, sp, #0
    HAL_Init();
 80018e6:	f000 fbff 	bl	80020e8 <HAL_Init>
    SystemClock_Config();
 80018ea:	f000 f84f 	bl	800198c <SystemClock_Config>
    MX_DMA_Init();
 80018ee:	f7ff fd8d 	bl	800140c <MX_DMA_Init>
    MX_TIM3_Init();
 80018f2:	f000 fad5 	bl	8001ea0 <MX_TIM3_Init>

    for (size_t i = 0; i < LED_CFG_COUNT; ++i) {
 80018f6:	2300      	movs	r3, #0
 80018f8:	607b      	str	r3, [r7, #4]
 80018fa:	e019      	b.n	8001930 <main+0x50>
        // Startfarbe: Rot
        leds_color_data[i * LED_CFG_BYTES_PER_LED + 0] = 0xFF; // Rot
 80018fc:	687a      	ldr	r2, [r7, #4]
 80018fe:	0013      	movs	r3, r2
 8001900:	005b      	lsls	r3, r3, #1
 8001902:	189b      	adds	r3, r3, r2
 8001904:	4a20      	ldr	r2, [pc, #128]	@ (8001988 <main+0xa8>)
 8001906:	21ff      	movs	r1, #255	@ 0xff
 8001908:	54d1      	strb	r1, [r2, r3]
        leds_color_data[i * LED_CFG_BYTES_PER_LED + 1] = 0x00; // Grün
 800190a:	687a      	ldr	r2, [r7, #4]
 800190c:	0013      	movs	r3, r2
 800190e:	005b      	lsls	r3, r3, #1
 8001910:	189b      	adds	r3, r3, r2
 8001912:	3301      	adds	r3, #1
 8001914:	4a1c      	ldr	r2, [pc, #112]	@ (8001988 <main+0xa8>)
 8001916:	2100      	movs	r1, #0
 8001918:	54d1      	strb	r1, [r2, r3]
        leds_color_data[i * LED_CFG_BYTES_PER_LED + 2] = 0x00; // Blau
 800191a:	687a      	ldr	r2, [r7, #4]
 800191c:	0013      	movs	r3, r2
 800191e:	005b      	lsls	r3, r3, #1
 8001920:	189b      	adds	r3, r3, r2
 8001922:	3302      	adds	r3, #2
 8001924:	4a18      	ldr	r2, [pc, #96]	@ (8001988 <main+0xa8>)
 8001926:	2100      	movs	r1, #0
 8001928:	54d1      	strb	r1, [r2, r3]
    for (size_t i = 0; i < LED_CFG_COUNT; ++i) {
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	3301      	adds	r3, #1
 800192e:	607b      	str	r3, [r7, #4]
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	2b0b      	cmp	r3, #11
 8001934:	d9e2      	bls.n	80018fc <main+0x1c>
    }

    led_start_transfer();
 8001936:	f7ff ff15 	bl	8001764 <led_start_transfer>

    // SysTick-Konfiguration mit Debug-Ausgabe
    HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / 1000);
 800193a:	f001 ff1d 	bl	8003778 <HAL_RCC_GetHCLKFreq>
 800193e:	0002      	movs	r2, r0
 8001940:	23fa      	movs	r3, #250	@ 0xfa
 8001942:	0099      	lsls	r1, r3, #2
 8001944:	0010      	movs	r0, r2
 8001946:	f7fe fbdd 	bl	8000104 <__udivsi3>
 800194a:	0003      	movs	r3, r0
 800194c:	0018      	movs	r0, r3
 800194e:	f000 fd46 	bl	80023de <HAL_SYSTICK_Config>
    HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0); // Höhere Priorität für SysTick
 8001952:	2301      	movs	r3, #1
 8001954:	425b      	negs	r3, r3
 8001956:	2200      	movs	r2, #0
 8001958:	2100      	movs	r1, #0
 800195a:	0018      	movs	r0, r3
 800195c:	f000 fd1a 	bl	8002394 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SysTick_IRQn);
 8001960:	2301      	movs	r3, #1
 8001962:	425b      	negs	r3, r3
 8001964:	0018      	movs	r0, r3
 8001966:	f000 fd2a 	bl	80023be <HAL_NVIC_EnableIRQ>

    while (1) {
        // Debug: Manuelles Toggeln von PA8
        HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_8);
 800196a:	2380      	movs	r3, #128	@ 0x80
 800196c:	005a      	lsls	r2, r3, #1
 800196e:	23a0      	movs	r3, #160	@ 0xa0
 8001970:	05db      	lsls	r3, r3, #23
 8001972:	0011      	movs	r1, r2
 8001974:	0018      	movs	r0, r3
 8001976:	f001 fa00 	bl	8002d7a <HAL_GPIO_TogglePin>
        HAL_Delay(500);
 800197a:	23fa      	movs	r3, #250	@ 0xfa
 800197c:	005b      	lsls	r3, r3, #1
 800197e:	0018      	movs	r0, r3
 8001980:	f000 fc38 	bl	80021f4 <HAL_Delay>
        HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_8);
 8001984:	46c0      	nop			@ (mov r8, r8)
 8001986:	e7f0      	b.n	800196a <main+0x8a>
 8001988:	2000008c 	.word	0x2000008c

0800198c <SystemClock_Config>:

/**
  * @brief Systemtakt-Konfiguration
  * @retval Keine
  */
void SystemClock_Config(void) {
 800198c:	b590      	push	{r4, r7, lr}
 800198e:	b093      	sub	sp, #76	@ 0x4c
 8001990:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001992:	2410      	movs	r4, #16
 8001994:	193b      	adds	r3, r7, r4
 8001996:	0018      	movs	r0, r3
 8001998:	2338      	movs	r3, #56	@ 0x38
 800199a:	001a      	movs	r2, r3
 800199c:	2100      	movs	r1, #0
 800199e:	f002 ff4f 	bl	8004840 <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80019a2:	003b      	movs	r3, r7
 80019a4:	0018      	movs	r0, r3
 80019a6:	2310      	movs	r3, #16
 80019a8:	001a      	movs	r2, r3
 80019aa:	2100      	movs	r1, #0
 80019ac:	f002 ff48 	bl	8004840 <memset>

    HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80019b0:	2380      	movs	r3, #128	@ 0x80
 80019b2:	009b      	lsls	r3, r3, #2
 80019b4:	0018      	movs	r0, r3
 80019b6:	f001 f9fb 	bl	8002db0 <HAL_PWREx_ControlVoltageScaling>

    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80019ba:	193b      	adds	r3, r7, r4
 80019bc:	2202      	movs	r2, #2
 80019be:	601a      	str	r2, [r3, #0]
    RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80019c0:	193b      	adds	r3, r7, r4
 80019c2:	2280      	movs	r2, #128	@ 0x80
 80019c4:	0052      	lsls	r2, r2, #1
 80019c6:	60da      	str	r2, [r3, #12]
    RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80019c8:	0021      	movs	r1, r4
 80019ca:	187b      	adds	r3, r7, r1
 80019cc:	2200      	movs	r2, #0
 80019ce:	611a      	str	r2, [r3, #16]
    RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80019d0:	187b      	adds	r3, r7, r1
 80019d2:	2240      	movs	r2, #64	@ 0x40
 80019d4:	615a      	str	r2, [r3, #20]
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80019d6:	187b      	adds	r3, r7, r1
 80019d8:	2202      	movs	r2, #2
 80019da:	61da      	str	r2, [r3, #28]
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80019dc:	187b      	adds	r3, r7, r1
 80019de:	2202      	movs	r2, #2
 80019e0:	621a      	str	r2, [r3, #32]
    RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80019e2:	187b      	adds	r3, r7, r1
 80019e4:	2200      	movs	r2, #0
 80019e6:	625a      	str	r2, [r3, #36]	@ 0x24
    RCC_OscInitStruct.PLL.PLLN = 8;
 80019e8:	187b      	adds	r3, r7, r1
 80019ea:	2208      	movs	r2, #8
 80019ec:	629a      	str	r2, [r3, #40]	@ 0x28
    RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80019ee:	187b      	adds	r3, r7, r1
 80019f0:	2280      	movs	r2, #128	@ 0x80
 80019f2:	0292      	lsls	r2, r2, #10
 80019f4:	62da      	str	r2, [r3, #44]	@ 0x2c
    RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80019f6:	187b      	adds	r3, r7, r1
 80019f8:	2280      	movs	r2, #128	@ 0x80
 80019fa:	0492      	lsls	r2, r2, #18
 80019fc:	631a      	str	r2, [r3, #48]	@ 0x30
    RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80019fe:	187b      	adds	r3, r7, r1
 8001a00:	2280      	movs	r2, #128	@ 0x80
 8001a02:	0592      	lsls	r2, r2, #22
 8001a04:	635a      	str	r2, [r3, #52]	@ 0x34
    HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8001a06:	187b      	adds	r3, r7, r1
 8001a08:	0018      	movs	r0, r3
 8001a0a:	f001 fa11 	bl	8002e30 <HAL_RCC_OscConfig>

    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1;
 8001a0e:	003b      	movs	r3, r7
 8001a10:	2207      	movs	r2, #7
 8001a12:	601a      	str	r2, [r3, #0]
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a14:	003b      	movs	r3, r7
 8001a16:	2202      	movs	r2, #2
 8001a18:	605a      	str	r2, [r3, #4]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a1a:	003b      	movs	r3, r7
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	609a      	str	r2, [r3, #8]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001a20:	003b      	movs	r3, r7
 8001a22:	2200      	movs	r2, #0
 8001a24:	60da      	str	r2, [r3, #12]
    HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2);
 8001a26:	003b      	movs	r3, r7
 8001a28:	2102      	movs	r1, #2
 8001a2a:	0018      	movs	r0, r3
 8001a2c:	f001 fd1a 	bl	8003464 <HAL_RCC_ClockConfig>
}
 8001a30:	46c0      	nop			@ (mov r8, r8)
 8001a32:	46bd      	mov	sp, r7
 8001a34:	b013      	add	sp, #76	@ 0x4c
 8001a36:	bd90      	pop	{r4, r7, pc}

08001a38 <Error_Handler>:

/**
  * @brief  Diese Funktion wird bei Fehlern ausgeführt.
  * @retval Keine
  */
void Error_Handler(void) {
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a3c:	b672      	cpsid	i
}
 8001a3e:	46c0      	nop			@ (mov r8, r8)
    __disable_irq();
    while (1) {
 8001a40:	46c0      	nop			@ (mov r8, r8)
 8001a42:	e7fd      	b.n	8001a40 <Error_Handler+0x8>

08001a44 <HAL_TIM_PWM_PulseFinishedCallback>:
    }
}

/* USER CODE BEGIN 4 */
void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim) {
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b082      	sub	sp, #8
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM3 && htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2) {
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	4a06      	ldr	r2, [pc, #24]	@ (8001a6c <HAL_TIM_PWM_PulseFinishedCallback+0x28>)
 8001a52:	4293      	cmp	r3, r2
 8001a54:	d106      	bne.n	8001a64 <HAL_TIM_PWM_PulseFinishedCallback+0x20>
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	7f1b      	ldrb	r3, [r3, #28]
 8001a5a:	2b02      	cmp	r3, #2
 8001a5c:	d102      	bne.n	8001a64 <HAL_TIM_PWM_PulseFinishedCallback+0x20>
        led_update_sequence(1);
 8001a5e:	2001      	movs	r0, #1
 8001a60:	f7ff fe1c 	bl	800169c <led_update_sequence>
    }
}
 8001a64:	46c0      	nop			@ (mov r8, r8)
 8001a66:	46bd      	mov	sp, r7
 8001a68:	b002      	add	sp, #8
 8001a6a:	bd80      	pop	{r7, pc}
 8001a6c:	40000400 	.word	0x40000400

08001a70 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:

void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim) {
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b082      	sub	sp, #8
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM3 && htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2) {
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	4a06      	ldr	r2, [pc, #24]	@ (8001a98 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x28>)
 8001a7e:	4293      	cmp	r3, r2
 8001a80:	d106      	bne.n	8001a90 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x20>
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	7f1b      	ldrb	r3, [r3, #28]
 8001a86:	2b02      	cmp	r3, #2
 8001a88:	d102      	bne.n	8001a90 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x20>
        led_update_sequence(0);
 8001a8a:	2000      	movs	r0, #0
 8001a8c:	f7ff fe06 	bl	800169c <led_update_sequence>
    }
}
 8001a90:	46c0      	nop			@ (mov r8, r8)
 8001a92:	46bd      	mov	sp, r7
 8001a94:	b002      	add	sp, #8
 8001a96:	bd80      	pop	{r7, pc}
 8001a98:	40000400 	.word	0x40000400

08001a9c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b082      	sub	sp, #8
 8001aa0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001aa2:	4b0f      	ldr	r3, [pc, #60]	@ (8001ae0 <HAL_MspInit+0x44>)
 8001aa4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001aa6:	4b0e      	ldr	r3, [pc, #56]	@ (8001ae0 <HAL_MspInit+0x44>)
 8001aa8:	2101      	movs	r1, #1
 8001aaa:	430a      	orrs	r2, r1
 8001aac:	641a      	str	r2, [r3, #64]	@ 0x40
 8001aae:	4b0c      	ldr	r3, [pc, #48]	@ (8001ae0 <HAL_MspInit+0x44>)
 8001ab0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ab2:	2201      	movs	r2, #1
 8001ab4:	4013      	ands	r3, r2
 8001ab6:	607b      	str	r3, [r7, #4]
 8001ab8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001aba:	4b09      	ldr	r3, [pc, #36]	@ (8001ae0 <HAL_MspInit+0x44>)
 8001abc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001abe:	4b08      	ldr	r3, [pc, #32]	@ (8001ae0 <HAL_MspInit+0x44>)
 8001ac0:	2180      	movs	r1, #128	@ 0x80
 8001ac2:	0549      	lsls	r1, r1, #21
 8001ac4:	430a      	orrs	r2, r1
 8001ac6:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001ac8:	4b05      	ldr	r3, [pc, #20]	@ (8001ae0 <HAL_MspInit+0x44>)
 8001aca:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001acc:	2380      	movs	r3, #128	@ 0x80
 8001ace:	055b      	lsls	r3, r3, #21
 8001ad0:	4013      	ands	r3, r2
 8001ad2:	603b      	str	r3, [r7, #0]
 8001ad4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ad6:	46c0      	nop			@ (mov r8, r8)
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	b002      	add	sp, #8
 8001adc:	bd80      	pop	{r7, pc}
 8001ade:	46c0      	nop			@ (mov r8, r8)
 8001ae0:	40021000 	.word	0x40021000

08001ae4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001ae8:	46c0      	nop			@ (mov r8, r8)
 8001aea:	e7fd      	b.n	8001ae8 <NMI_Handler+0x4>

08001aec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001af0:	46c0      	nop			@ (mov r8, r8)
 8001af2:	e7fd      	b.n	8001af0 <HardFault_Handler+0x4>

08001af4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001af8:	46c0      	nop			@ (mov r8, r8)
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}

08001afe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001afe:	b580      	push	{r7, lr}
 8001b00:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b02:	46c0      	nop			@ (mov r8, r8)
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bd80      	pop	{r7, pc}

08001b08 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b082      	sub	sp, #8
 8001b0c:	af00      	add	r7, sp, #0
  static uint32_t counter = 0;
  static uint32_t color_change_counter = 0;
  static uint32_t circle_mode_counter = 0;

  // Debug: Toggeln von PA8, um sicherzustellen, dass SysTick läuft
  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_8);
 8001b0e:	2380      	movs	r3, #128	@ 0x80
 8001b10:	005a      	lsls	r2, r3, #1
 8001b12:	23a0      	movs	r3, #160	@ 0xa0
 8001b14:	05db      	lsls	r3, r3, #23
 8001b16:	0011      	movs	r1, r2
 8001b18:	0018      	movs	r0, r3
 8001b1a:	f001 f92e 	bl	8002d7a <HAL_GPIO_TogglePin>

  // Farbwechsel und Kreis-Modus
  if (!in_circle_mode) {
 8001b1e:	4bc8      	ldr	r3, [pc, #800]	@ (8001e40 <SysTick_Handler+0x338>)
 8001b20:	781b      	ldrb	r3, [r3, #0]
 8001b22:	b2db      	uxtb	r3, r3
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d000      	beq.n	8001b2a <SysTick_Handler+0x22>
 8001b28:	e0a6      	b.n	8001c78 <SysTick_Handler+0x170>
      // Normaler Modus: Farbwechsel alle 1000 ms (1 Sekunde)
      if (++color_change_counter >= 1000) { // 1000 × 1 ms = 1 Sekunde
 8001b2a:	4bc6      	ldr	r3, [pc, #792]	@ (8001e44 <SysTick_Handler+0x33c>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	1c5a      	adds	r2, r3, #1
 8001b30:	4bc4      	ldr	r3, [pc, #784]	@ (8001e44 <SysTick_Handler+0x33c>)
 8001b32:	601a      	str	r2, [r3, #0]
 8001b34:	4bc3      	ldr	r3, [pc, #780]	@ (8001e44 <SysTick_Handler+0x33c>)
 8001b36:	681a      	ldr	r2, [r3, #0]
 8001b38:	23fa      	movs	r3, #250	@ 0xfa
 8001b3a:	009b      	lsls	r3, r3, #2
 8001b3c:	429a      	cmp	r2, r3
 8001b3e:	d200      	bcs.n	8001b42 <SysTick_Handler+0x3a>
 8001b40:	e10c      	b.n	8001d5c <SysTick_Handler+0x254>
          color_change_counter = 0;
 8001b42:	4bc0      	ldr	r3, [pc, #768]	@ (8001e44 <SysTick_Handler+0x33c>)
 8001b44:	2200      	movs	r2, #0
 8001b46:	601a      	str	r2, [r3, #0]

          // Stelle sicher, dass der vorherige DMA-Transfer abgeschlossen ist
          if (is_updating) {
 8001b48:	4bbf      	ldr	r3, [pc, #764]	@ (8001e48 <SysTick_Handler+0x340>)
 8001b4a:	781b      	ldrb	r3, [r3, #0]
 8001b4c:	b2db      	uxtb	r3, r3
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d013      	beq.n	8001b7a <SysTick_Handler+0x72>
              HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET); // Debugging: Zeigt an, dass is_updating blockiert
 8001b52:	2380      	movs	r3, #128	@ 0x80
 8001b54:	0119      	lsls	r1, r3, #4
 8001b56:	23a0      	movs	r3, #160	@ 0xa0
 8001b58:	05db      	lsls	r3, r3, #23
 8001b5a:	2201      	movs	r2, #1
 8001b5c:	0018      	movs	r0, r3
 8001b5e:	f001 f8ef 	bl	8002d40 <HAL_GPIO_WritePin>
              HAL_DMA_Abort_IT(&hdma_tim3_ch2);
 8001b62:	4bba      	ldr	r3, [pc, #744]	@ (8001e4c <SysTick_Handler+0x344>)
 8001b64:	0018      	movs	r0, r3
 8001b66:	f000 fdcf 	bl	8002708 <HAL_DMA_Abort_IT>
              HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_2);
 8001b6a:	4bb9      	ldr	r3, [pc, #740]	@ (8001e50 <SysTick_Handler+0x348>)
 8001b6c:	2104      	movs	r1, #4
 8001b6e:	0018      	movs	r0, r3
 8001b70:	f001 fe64 	bl	800383c <HAL_TIM_PWM_Stop>
              is_updating = 0;
 8001b74:	4bb4      	ldr	r3, [pc, #720]	@ (8001e48 <SysTick_Handler+0x340>)
 8001b76:	2200      	movs	r2, #0
 8001b78:	701a      	strb	r2, [r3, #0]
          }

          // Nach 3 Farbzyklen (Rot → Grün → Blau = 1 Zyklus, 3 Zyklen = 9 Sekunden) in Kreis-Modus wechseln
          if (cycle_count >= 3) {
 8001b7a:	4bb6      	ldr	r3, [pc, #728]	@ (8001e54 <SysTick_Handler+0x34c>)
 8001b7c:	781b      	ldrb	r3, [r3, #0]
 8001b7e:	b2db      	uxtb	r3, r3
 8001b80:	2b02      	cmp	r3, #2
 8001b82:	d902      	bls.n	8001b8a <SysTick_Handler+0x82>
              in_circle_mode = 1;
 8001b84:	4bae      	ldr	r3, [pc, #696]	@ (8001e40 <SysTick_Handler+0x338>)
 8001b86:	2201      	movs	r2, #1
 8001b88:	701a      	strb	r2, [r3, #0]
          }

          // Farben setzen
          for (size_t i = 0; i < LED_CFG_COUNT; ++i) {
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	607b      	str	r3, [r7, #4]
 8001b8e:	e059      	b.n	8001c44 <SysTick_Handler+0x13c>
              switch (color_counter % 3) {
 8001b90:	4bb1      	ldr	r3, [pc, #708]	@ (8001e58 <SysTick_Handler+0x350>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	2103      	movs	r1, #3
 8001b96:	0018      	movs	r0, r3
 8001b98:	f7fe fb3a 	bl	8000210 <__aeabi_uidivmod>
 8001b9c:	000b      	movs	r3, r1
 8001b9e:	2b02      	cmp	r3, #2
 8001ba0:	d035      	beq.n	8001c0e <SysTick_Handler+0x106>
 8001ba2:	d84c      	bhi.n	8001c3e <SysTick_Handler+0x136>
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d002      	beq.n	8001bae <SysTick_Handler+0xa6>
 8001ba8:	2b01      	cmp	r3, #1
 8001baa:	d018      	beq.n	8001bde <SysTick_Handler+0xd6>
 8001bac:	e047      	b.n	8001c3e <SysTick_Handler+0x136>
                  case 0: // Rot
                      leds_color_data[i * LED_CFG_BYTES_PER_LED + 0] = 0xFF;
 8001bae:	687a      	ldr	r2, [r7, #4]
 8001bb0:	0013      	movs	r3, r2
 8001bb2:	005b      	lsls	r3, r3, #1
 8001bb4:	189b      	adds	r3, r3, r2
 8001bb6:	4aa9      	ldr	r2, [pc, #676]	@ (8001e5c <SysTick_Handler+0x354>)
 8001bb8:	21ff      	movs	r1, #255	@ 0xff
 8001bba:	54d1      	strb	r1, [r2, r3]
                      leds_color_data[i * LED_CFG_BYTES_PER_LED + 1] = 0x00;
 8001bbc:	687a      	ldr	r2, [r7, #4]
 8001bbe:	0013      	movs	r3, r2
 8001bc0:	005b      	lsls	r3, r3, #1
 8001bc2:	189b      	adds	r3, r3, r2
 8001bc4:	3301      	adds	r3, #1
 8001bc6:	4aa5      	ldr	r2, [pc, #660]	@ (8001e5c <SysTick_Handler+0x354>)
 8001bc8:	2100      	movs	r1, #0
 8001bca:	54d1      	strb	r1, [r2, r3]
                      leds_color_data[i * LED_CFG_BYTES_PER_LED + 2] = 0x00;
 8001bcc:	687a      	ldr	r2, [r7, #4]
 8001bce:	0013      	movs	r3, r2
 8001bd0:	005b      	lsls	r3, r3, #1
 8001bd2:	189b      	adds	r3, r3, r2
 8001bd4:	3302      	adds	r3, #2
 8001bd6:	4aa1      	ldr	r2, [pc, #644]	@ (8001e5c <SysTick_Handler+0x354>)
 8001bd8:	2100      	movs	r1, #0
 8001bda:	54d1      	strb	r1, [r2, r3]
                      break;
 8001bdc:	e02f      	b.n	8001c3e <SysTick_Handler+0x136>
                  case 1: // Grün
                      leds_color_data[i * LED_CFG_BYTES_PER_LED + 0] = 0x00;
 8001bde:	687a      	ldr	r2, [r7, #4]
 8001be0:	0013      	movs	r3, r2
 8001be2:	005b      	lsls	r3, r3, #1
 8001be4:	189b      	adds	r3, r3, r2
 8001be6:	4a9d      	ldr	r2, [pc, #628]	@ (8001e5c <SysTick_Handler+0x354>)
 8001be8:	2100      	movs	r1, #0
 8001bea:	54d1      	strb	r1, [r2, r3]
                      leds_color_data[i * LED_CFG_BYTES_PER_LED + 1] = 0xFF;
 8001bec:	687a      	ldr	r2, [r7, #4]
 8001bee:	0013      	movs	r3, r2
 8001bf0:	005b      	lsls	r3, r3, #1
 8001bf2:	189b      	adds	r3, r3, r2
 8001bf4:	3301      	adds	r3, #1
 8001bf6:	4a99      	ldr	r2, [pc, #612]	@ (8001e5c <SysTick_Handler+0x354>)
 8001bf8:	21ff      	movs	r1, #255	@ 0xff
 8001bfa:	54d1      	strb	r1, [r2, r3]
                      leds_color_data[i * LED_CFG_BYTES_PER_LED + 2] = 0x00;
 8001bfc:	687a      	ldr	r2, [r7, #4]
 8001bfe:	0013      	movs	r3, r2
 8001c00:	005b      	lsls	r3, r3, #1
 8001c02:	189b      	adds	r3, r3, r2
 8001c04:	3302      	adds	r3, #2
 8001c06:	4a95      	ldr	r2, [pc, #596]	@ (8001e5c <SysTick_Handler+0x354>)
 8001c08:	2100      	movs	r1, #0
 8001c0a:	54d1      	strb	r1, [r2, r3]
                      break;
 8001c0c:	e017      	b.n	8001c3e <SysTick_Handler+0x136>
                  case 2: // Blau
                      leds_color_data[i * LED_CFG_BYTES_PER_LED + 0] = 0x00;
 8001c0e:	687a      	ldr	r2, [r7, #4]
 8001c10:	0013      	movs	r3, r2
 8001c12:	005b      	lsls	r3, r3, #1
 8001c14:	189b      	adds	r3, r3, r2
 8001c16:	4a91      	ldr	r2, [pc, #580]	@ (8001e5c <SysTick_Handler+0x354>)
 8001c18:	2100      	movs	r1, #0
 8001c1a:	54d1      	strb	r1, [r2, r3]
                      leds_color_data[i * LED_CFG_BYTES_PER_LED + 1] = 0x00;
 8001c1c:	687a      	ldr	r2, [r7, #4]
 8001c1e:	0013      	movs	r3, r2
 8001c20:	005b      	lsls	r3, r3, #1
 8001c22:	189b      	adds	r3, r3, r2
 8001c24:	3301      	adds	r3, #1
 8001c26:	4a8d      	ldr	r2, [pc, #564]	@ (8001e5c <SysTick_Handler+0x354>)
 8001c28:	2100      	movs	r1, #0
 8001c2a:	54d1      	strb	r1, [r2, r3]
                      leds_color_data[i * LED_CFG_BYTES_PER_LED + 2] = 0xFF;
 8001c2c:	687a      	ldr	r2, [r7, #4]
 8001c2e:	0013      	movs	r3, r2
 8001c30:	005b      	lsls	r3, r3, #1
 8001c32:	189b      	adds	r3, r3, r2
 8001c34:	3302      	adds	r3, #2
 8001c36:	4a89      	ldr	r2, [pc, #548]	@ (8001e5c <SysTick_Handler+0x354>)
 8001c38:	21ff      	movs	r1, #255	@ 0xff
 8001c3a:	54d1      	strb	r1, [r2, r3]
                      break;
 8001c3c:	46c0      	nop			@ (mov r8, r8)
          for (size_t i = 0; i < LED_CFG_COUNT; ++i) {
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	3301      	adds	r3, #1
 8001c42:	607b      	str	r3, [r7, #4]
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2b0b      	cmp	r3, #11
 8001c48:	d9a2      	bls.n	8001b90 <SysTick_Handler+0x88>
              }
          }

          color_counter++;
 8001c4a:	4b83      	ldr	r3, [pc, #524]	@ (8001e58 <SysTick_Handler+0x350>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	1c5a      	adds	r2, r3, #1
 8001c50:	4b81      	ldr	r3, [pc, #516]	@ (8001e58 <SysTick_Handler+0x350>)
 8001c52:	601a      	str	r2, [r3, #0]
          if (color_counter % 3 == 0) {
 8001c54:	4b80      	ldr	r3, [pc, #512]	@ (8001e58 <SysTick_Handler+0x350>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	2103      	movs	r1, #3
 8001c5a:	0018      	movs	r0, r3
 8001c5c:	f7fe fad8 	bl	8000210 <__aeabi_uidivmod>
 8001c60:	1e0b      	subs	r3, r1, #0
 8001c62:	d106      	bne.n	8001c72 <SysTick_Handler+0x16a>
              cycle_count++;
 8001c64:	4b7b      	ldr	r3, [pc, #492]	@ (8001e54 <SysTick_Handler+0x34c>)
 8001c66:	781b      	ldrb	r3, [r3, #0]
 8001c68:	b2db      	uxtb	r3, r3
 8001c6a:	3301      	adds	r3, #1
 8001c6c:	b2da      	uxtb	r2, r3
 8001c6e:	4b79      	ldr	r3, [pc, #484]	@ (8001e54 <SysTick_Handler+0x34c>)
 8001c70:	701a      	strb	r2, [r3, #0]
          }

          led_start_transfer(); // Sofortiger Transfer nach Farbwechsel
 8001c72:	f7ff fd77 	bl	8001764 <led_start_transfer>
 8001c76:	e071      	b.n	8001d5c <SysTick_Handler+0x254>
      }
  } else {
      // Kreis-Modus: Farbwechsel alle 67 ms (fünfmal so schnell wie vorher 333 ms)
      if (++circle_mode_counter >= 67) { // 67 × 1 ms = 67 ms
 8001c78:	4b79      	ldr	r3, [pc, #484]	@ (8001e60 <SysTick_Handler+0x358>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	1c5a      	adds	r2, r3, #1
 8001c7e:	4b78      	ldr	r3, [pc, #480]	@ (8001e60 <SysTick_Handler+0x358>)
 8001c80:	601a      	str	r2, [r3, #0]
 8001c82:	4b77      	ldr	r3, [pc, #476]	@ (8001e60 <SysTick_Handler+0x358>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	2b42      	cmp	r3, #66	@ 0x42
 8001c88:	d968      	bls.n	8001d5c <SysTick_Handler+0x254>
          circle_mode_counter = 0;
 8001c8a:	4b75      	ldr	r3, [pc, #468]	@ (8001e60 <SysTick_Handler+0x358>)
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	601a      	str	r2, [r3, #0]

          // Stelle sicher, dass der vorherige DMA-Transfer abgeschlossen ist
          if (is_updating) {
 8001c90:	4b6d      	ldr	r3, [pc, #436]	@ (8001e48 <SysTick_Handler+0x340>)
 8001c92:	781b      	ldrb	r3, [r3, #0]
 8001c94:	b2db      	uxtb	r3, r3
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d013      	beq.n	8001cc2 <SysTick_Handler+0x1ba>
              HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET); // Debugging: Zeigt an, dass is_updating blockiert
 8001c9a:	2380      	movs	r3, #128	@ 0x80
 8001c9c:	0119      	lsls	r1, r3, #4
 8001c9e:	23a0      	movs	r3, #160	@ 0xa0
 8001ca0:	05db      	lsls	r3, r3, #23
 8001ca2:	2201      	movs	r2, #1
 8001ca4:	0018      	movs	r0, r3
 8001ca6:	f001 f84b 	bl	8002d40 <HAL_GPIO_WritePin>
              HAL_DMA_Abort_IT(&hdma_tim3_ch2);
 8001caa:	4b68      	ldr	r3, [pc, #416]	@ (8001e4c <SysTick_Handler+0x344>)
 8001cac:	0018      	movs	r0, r3
 8001cae:	f000 fd2b 	bl	8002708 <HAL_DMA_Abort_IT>
              HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_2);
 8001cb2:	4b67      	ldr	r3, [pc, #412]	@ (8001e50 <SysTick_Handler+0x348>)
 8001cb4:	2104      	movs	r1, #4
 8001cb6:	0018      	movs	r0, r3
 8001cb8:	f001 fdc0 	bl	800383c <HAL_TIM_PWM_Stop>
              is_updating = 0;
 8001cbc:	4b62      	ldr	r3, [pc, #392]	@ (8001e48 <SysTick_Handler+0x340>)
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	701a      	strb	r2, [r3, #0]
          }

          // Farben setzen
          for (size_t i = 0; i < LED_CFG_COUNT; ++i) {
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	603b      	str	r3, [r7, #0]
 8001cc6:	e038      	b.n	8001d3a <SysTick_Handler+0x232>
              if (i == green_led_index) {
 8001cc8:	4b66      	ldr	r3, [pc, #408]	@ (8001e64 <SysTick_Handler+0x35c>)
 8001cca:	781b      	ldrb	r3, [r3, #0]
 8001ccc:	b2db      	uxtb	r3, r3
 8001cce:	001a      	movs	r2, r3
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	d117      	bne.n	8001d06 <SysTick_Handler+0x1fe>
                  // Grüne LED bei voller Helligkeit
                  leds_color_data[i * LED_CFG_BYTES_PER_LED + 0] = 0x00; // Rot
 8001cd6:	683a      	ldr	r2, [r7, #0]
 8001cd8:	0013      	movs	r3, r2
 8001cda:	005b      	lsls	r3, r3, #1
 8001cdc:	189b      	adds	r3, r3, r2
 8001cde:	4a5f      	ldr	r2, [pc, #380]	@ (8001e5c <SysTick_Handler+0x354>)
 8001ce0:	2100      	movs	r1, #0
 8001ce2:	54d1      	strb	r1, [r2, r3]
                  leds_color_data[i * LED_CFG_BYTES_PER_LED + 1] = 0xFF; // Grün
 8001ce4:	683a      	ldr	r2, [r7, #0]
 8001ce6:	0013      	movs	r3, r2
 8001ce8:	005b      	lsls	r3, r3, #1
 8001cea:	189b      	adds	r3, r3, r2
 8001cec:	3301      	adds	r3, #1
 8001cee:	4a5b      	ldr	r2, [pc, #364]	@ (8001e5c <SysTick_Handler+0x354>)
 8001cf0:	21ff      	movs	r1, #255	@ 0xff
 8001cf2:	54d1      	strb	r1, [r2, r3]
                  leds_color_data[i * LED_CFG_BYTES_PER_LED + 2] = 0x00; // Blau
 8001cf4:	683a      	ldr	r2, [r7, #0]
 8001cf6:	0013      	movs	r3, r2
 8001cf8:	005b      	lsls	r3, r3, #1
 8001cfa:	189b      	adds	r3, r3, r2
 8001cfc:	3302      	adds	r3, #2
 8001cfe:	4a57      	ldr	r2, [pc, #348]	@ (8001e5c <SysTick_Handler+0x354>)
 8001d00:	2100      	movs	r1, #0
 8001d02:	54d1      	strb	r1, [r2, r3]
 8001d04:	e016      	b.n	8001d34 <SysTick_Handler+0x22c>
              } else {
                  // Andere LEDs rot mit 50% Helligkeit
                  leds_color_data[i * LED_CFG_BYTES_PER_LED + 0] = 0x80; // Rot (50%)
 8001d06:	683a      	ldr	r2, [r7, #0]
 8001d08:	0013      	movs	r3, r2
 8001d0a:	005b      	lsls	r3, r3, #1
 8001d0c:	189b      	adds	r3, r3, r2
 8001d0e:	4a53      	ldr	r2, [pc, #332]	@ (8001e5c <SysTick_Handler+0x354>)
 8001d10:	2180      	movs	r1, #128	@ 0x80
 8001d12:	54d1      	strb	r1, [r2, r3]
                  leds_color_data[i * LED_CFG_BYTES_PER_LED + 1] = 0x00; // Grün
 8001d14:	683a      	ldr	r2, [r7, #0]
 8001d16:	0013      	movs	r3, r2
 8001d18:	005b      	lsls	r3, r3, #1
 8001d1a:	189b      	adds	r3, r3, r2
 8001d1c:	3301      	adds	r3, #1
 8001d1e:	4a4f      	ldr	r2, [pc, #316]	@ (8001e5c <SysTick_Handler+0x354>)
 8001d20:	2100      	movs	r1, #0
 8001d22:	54d1      	strb	r1, [r2, r3]
                  leds_color_data[i * LED_CFG_BYTES_PER_LED + 2] = 0x00; // Blau
 8001d24:	683a      	ldr	r2, [r7, #0]
 8001d26:	0013      	movs	r3, r2
 8001d28:	005b      	lsls	r3, r3, #1
 8001d2a:	189b      	adds	r3, r3, r2
 8001d2c:	3302      	adds	r3, #2
 8001d2e:	4a4b      	ldr	r2, [pc, #300]	@ (8001e5c <SysTick_Handler+0x354>)
 8001d30:	2100      	movs	r1, #0
 8001d32:	54d1      	strb	r1, [r2, r3]
          for (size_t i = 0; i < LED_CFG_COUNT; ++i) {
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	3301      	adds	r3, #1
 8001d38:	603b      	str	r3, [r7, #0]
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	2b0b      	cmp	r3, #11
 8001d3e:	d9c3      	bls.n	8001cc8 <SysTick_Handler+0x1c0>
              }
          }

          // Im Kreis-Modus die grüne LED weiterbewegen
          green_led_index = (green_led_index + 1) % LED_CFG_COUNT;
 8001d40:	4b48      	ldr	r3, [pc, #288]	@ (8001e64 <SysTick_Handler+0x35c>)
 8001d42:	781b      	ldrb	r3, [r3, #0]
 8001d44:	b2db      	uxtb	r3, r3
 8001d46:	3301      	adds	r3, #1
 8001d48:	210c      	movs	r1, #12
 8001d4a:	0018      	movs	r0, r3
 8001d4c:	f7fe fb4a 	bl	80003e4 <__aeabi_idivmod>
 8001d50:	000b      	movs	r3, r1
 8001d52:	b2da      	uxtb	r2, r3
 8001d54:	4b43      	ldr	r3, [pc, #268]	@ (8001e64 <SysTick_Handler+0x35c>)
 8001d56:	701a      	strb	r2, [r3, #0]

          led_start_transfer(); // Sofortiger Transfer nach Farbwechsel
 8001d58:	f7ff fd04 	bl	8001764 <led_start_transfer>
      }
  }

  // Fading alle 10 ms aktualisieren (für doppelt so lange Dauer)
  if (++counter % 10 == 0) { // 10 ms pro Schritt
 8001d5c:	4b42      	ldr	r3, [pc, #264]	@ (8001e68 <SysTick_Handler+0x360>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	1c5a      	adds	r2, r3, #1
 8001d62:	4b41      	ldr	r3, [pc, #260]	@ (8001e68 <SysTick_Handler+0x360>)
 8001d64:	601a      	str	r2, [r3, #0]
 8001d66:	4b40      	ldr	r3, [pc, #256]	@ (8001e68 <SysTick_Handler+0x360>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	210a      	movs	r1, #10
 8001d6c:	0018      	movs	r0, r3
 8001d6e:	f7fe fa4f 	bl	8000210 <__aeabi_uidivmod>
 8001d72:	1e0b      	subs	r3, r1, #0
 8001d74:	d15f      	bne.n	8001e36 <SysTick_Handler+0x32e>
      if (is_updating) {
 8001d76:	4b34      	ldr	r3, [pc, #208]	@ (8001e48 <SysTick_Handler+0x340>)
 8001d78:	781b      	ldrb	r3, [r3, #0]
 8001d7a:	b2db      	uxtb	r3, r3
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d008      	beq.n	8001d92 <SysTick_Handler+0x28a>
          HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET); // Debugging: Zeigt an, dass is_updating blockiert
 8001d80:	2380      	movs	r3, #128	@ 0x80
 8001d82:	0119      	lsls	r1, r3, #4
 8001d84:	23a0      	movs	r3, #160	@ 0xa0
 8001d86:	05db      	lsls	r3, r3, #23
 8001d88:	2201      	movs	r2, #1
 8001d8a:	0018      	movs	r0, r3
 8001d8c:	f000 ffd8 	bl	8002d40 <HAL_GPIO_WritePin>
          return;
 8001d90:	e053      	b.n	8001e3a <SysTick_Handler+0x332>
      }

      fade_value += fade_step;
 8001d92:	4b36      	ldr	r3, [pc, #216]	@ (8001e6c <SysTick_Handler+0x364>)
 8001d94:	681a      	ldr	r2, [r3, #0]
 8001d96:	4b36      	ldr	r3, [pc, #216]	@ (8001e70 <SysTick_Handler+0x368>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	1c19      	adds	r1, r3, #0
 8001d9c:	1c10      	adds	r0, r2, #0
 8001d9e:	f7fe fb79 	bl	8000494 <__aeabi_fadd>
 8001da2:	1c03      	adds	r3, r0, #0
 8001da4:	1c1a      	adds	r2, r3, #0
 8001da6:	4b31      	ldr	r3, [pc, #196]	@ (8001e6c <SysTick_Handler+0x364>)
 8001da8:	601a      	str	r2, [r3, #0]
      if (fade_value > 255.0f) {
 8001daa:	4b30      	ldr	r3, [pc, #192]	@ (8001e6c <SysTick_Handler+0x364>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	4931      	ldr	r1, [pc, #196]	@ (8001e74 <SysTick_Handler+0x36c>)
 8001db0:	1c18      	adds	r0, r3, #0
 8001db2:	f7fe fb43 	bl	800043c <__aeabi_fcmpgt>
 8001db6:	1e03      	subs	r3, r0, #0
 8001db8:	d00a      	beq.n	8001dd0 <SysTick_Handler+0x2c8>
          fade_value = 255.0f;
 8001dba:	4b2c      	ldr	r3, [pc, #176]	@ (8001e6c <SysTick_Handler+0x364>)
 8001dbc:	4a2d      	ldr	r2, [pc, #180]	@ (8001e74 <SysTick_Handler+0x36c>)
 8001dbe:	601a      	str	r2, [r3, #0]
          fade_step = -fade_step;
 8001dc0:	4b2b      	ldr	r3, [pc, #172]	@ (8001e70 <SysTick_Handler+0x368>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	2280      	movs	r2, #128	@ 0x80
 8001dc6:	0612      	lsls	r2, r2, #24
 8001dc8:	405a      	eors	r2, r3
 8001dca:	4b29      	ldr	r3, [pc, #164]	@ (8001e70 <SysTick_Handler+0x368>)
 8001dcc:	601a      	str	r2, [r3, #0]
 8001dce:	e011      	b.n	8001df4 <SysTick_Handler+0x2ec>
      } else if (fade_value < 0.0f) {
 8001dd0:	4b26      	ldr	r3, [pc, #152]	@ (8001e6c <SysTick_Handler+0x364>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	2100      	movs	r1, #0
 8001dd6:	1c18      	adds	r0, r3, #0
 8001dd8:	f7fe fb1c 	bl	8000414 <__aeabi_fcmplt>
 8001ddc:	1e03      	subs	r3, r0, #0
 8001dde:	d009      	beq.n	8001df4 <SysTick_Handler+0x2ec>
          fade_value = 0.0f;
 8001de0:	4b22      	ldr	r3, [pc, #136]	@ (8001e6c <SysTick_Handler+0x364>)
 8001de2:	2200      	movs	r2, #0
 8001de4:	601a      	str	r2, [r3, #0]
          fade_step = -fade_step;
 8001de6:	4b22      	ldr	r3, [pc, #136]	@ (8001e70 <SysTick_Handler+0x368>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	2280      	movs	r2, #128	@ 0x80
 8001dec:	0612      	lsls	r2, r2, #24
 8001dee:	405a      	eors	r2, r3
 8001df0:	4b1f      	ldr	r3, [pc, #124]	@ (8001e70 <SysTick_Handler+0x368>)
 8001df2:	601a      	str	r2, [r3, #0]
      }

      brightness = (uint8_t)(quad_calc(fade_value / 255.0f) * 0xFF); // Maximale Helligkeit auf 255 setzen
 8001df4:	4b1d      	ldr	r3, [pc, #116]	@ (8001e6c <SysTick_Handler+0x364>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	491e      	ldr	r1, [pc, #120]	@ (8001e74 <SysTick_Handler+0x36c>)
 8001dfa:	1c18      	adds	r0, r3, #0
 8001dfc:	f7fe fd3c 	bl	8000878 <__aeabi_fdiv>
 8001e00:	1c03      	adds	r3, r0, #0
 8001e02:	1c18      	adds	r0, r3, #0
 8001e04:	f7ff fb6e 	bl	80014e4 <quad_calc>
 8001e08:	1c03      	adds	r3, r0, #0
 8001e0a:	491a      	ldr	r1, [pc, #104]	@ (8001e74 <SysTick_Handler+0x36c>)
 8001e0c:	1c18      	adds	r0, r3, #0
 8001e0e:	f7fe ff01 	bl	8000c14 <__aeabi_fmul>
 8001e12:	1c03      	adds	r3, r0, #0
 8001e14:	1c18      	adds	r0, r3, #0
 8001e16:	f7fe fb25 	bl	8000464 <__aeabi_f2uiz>
 8001e1a:	0003      	movs	r3, r0
 8001e1c:	b2da      	uxtb	r2, r3
 8001e1e:	4b16      	ldr	r3, [pc, #88]	@ (8001e78 <SysTick_Handler+0x370>)
 8001e20:	701a      	strb	r2, [r3, #0]

      // Debug: Sicherstellen, dass brightness nicht 0 ist
      if (brightness == 0) {
 8001e22:	4b15      	ldr	r3, [pc, #84]	@ (8001e78 <SysTick_Handler+0x370>)
 8001e24:	781b      	ldrb	r3, [r3, #0]
 8001e26:	b2db      	uxtb	r3, r3
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d102      	bne.n	8001e32 <SysTick_Handler+0x32a>
          brightness = 1; // Minimaler Wert, um Dunkelheit zu vermeiden
 8001e2c:	4b12      	ldr	r3, [pc, #72]	@ (8001e78 <SysTick_Handler+0x370>)
 8001e2e:	2201      	movs	r2, #1
 8001e30:	701a      	strb	r2, [r3, #0]
      }

      led_start_transfer();
 8001e32:	f7ff fc97 	bl	8001764 <led_start_transfer>
  }
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e36:	f000 f9c1 	bl	80021bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	b002      	add	sp, #8
 8001e3e:	bd80      	pop	{r7, pc}
 8001e40:	20000181 	.word	0x20000181
 8001e44:	20000184 	.word	0x20000184
 8001e48:	20000170 	.word	0x20000170
 8001e4c:	20000030 	.word	0x20000030
 8001e50:	20000190 	.word	0x20000190
 8001e54:	20000180 	.word	0x20000180
 8001e58:	20000178 	.word	0x20000178
 8001e5c:	2000008c 	.word	0x2000008c
 8001e60:	20000188 	.word	0x20000188
 8001e64:	20000182 	.word	0x20000182
 8001e68:	2000018c 	.word	0x2000018c
 8001e6c:	2000017c 	.word	0x2000017c
 8001e70:	20000004 	.word	0x20000004
 8001e74:	437f0000 	.word	0x437f0000
 8001e78:	20000000 	.word	0x20000000

08001e7c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */
  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch2);
 8001e80:	4b03      	ldr	r3, [pc, #12]	@ (8001e90 <DMA1_Channel1_IRQHandler+0x14>)
 8001e82:	0018      	movs	r0, r3
 8001e84:	f000 fcaa 	bl	80027dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001e88:	46c0      	nop			@ (mov r8, r8)
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bd80      	pop	{r7, pc}
 8001e8e:	46c0      	nop			@ (mov r8, r8)
 8001e90:	20000030 	.word	0x20000030

08001e94 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e98:	46c0      	nop			@ (mov r8, r8)
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}
	...

08001ea0 <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b08a      	sub	sp, #40	@ 0x28
 8001ea4:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ea6:	231c      	movs	r3, #28
 8001ea8:	18fb      	adds	r3, r7, r3
 8001eaa:	0018      	movs	r0, r3
 8001eac:	230c      	movs	r3, #12
 8001eae:	001a      	movs	r2, r3
 8001eb0:	2100      	movs	r1, #0
 8001eb2:	f002 fcc5 	bl	8004840 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001eb6:	003b      	movs	r3, r7
 8001eb8:	0018      	movs	r0, r3
 8001eba:	231c      	movs	r3, #28
 8001ebc:	001a      	movs	r2, r3
 8001ebe:	2100      	movs	r1, #0
 8001ec0:	f002 fcbe 	bl	8004840 <memset>

  htim3.Instance = TIM3;
 8001ec4:	4b24      	ldr	r3, [pc, #144]	@ (8001f58 <MX_TIM3_Init+0xb8>)
 8001ec6:	4a25      	ldr	r2, [pc, #148]	@ (8001f5c <MX_TIM3_Init+0xbc>)
 8001ec8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001eca:	4b23      	ldr	r3, [pc, #140]	@ (8001f58 <MX_TIM3_Init+0xb8>)
 8001ecc:	2200      	movs	r2, #0
 8001ece:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ed0:	4b21      	ldr	r3, [pc, #132]	@ (8001f58 <MX_TIM3_Init+0xb8>)
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 79;
 8001ed6:	4b20      	ldr	r3, [pc, #128]	@ (8001f58 <MX_TIM3_Init+0xb8>)
 8001ed8:	224f      	movs	r2, #79	@ 0x4f
 8001eda:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001edc:	4b1e      	ldr	r3, [pc, #120]	@ (8001f58 <MX_TIM3_Init+0xb8>)
 8001ede:	2200      	movs	r2, #0
 8001ee0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001ee2:	4b1d      	ldr	r3, [pc, #116]	@ (8001f58 <MX_TIM3_Init+0xb8>)
 8001ee4:	2280      	movs	r2, #128	@ 0x80
 8001ee6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001ee8:	4b1b      	ldr	r3, [pc, #108]	@ (8001f58 <MX_TIM3_Init+0xb8>)
 8001eea:	0018      	movs	r0, r3
 8001eec:	f001 fc4e 	bl	800378c <HAL_TIM_PWM_Init>
 8001ef0:	1e03      	subs	r3, r0, #0
 8001ef2:	d001      	beq.n	8001ef8 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8001ef4:	f7ff fda0 	bl	8001a38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ef8:	211c      	movs	r1, #28
 8001efa:	187b      	adds	r3, r7, r1
 8001efc:	2200      	movs	r2, #0
 8001efe:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f00:	187b      	adds	r3, r7, r1
 8001f02:	2200      	movs	r2, #0
 8001f04:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001f06:	187a      	adds	r2, r7, r1
 8001f08:	4b13      	ldr	r3, [pc, #76]	@ (8001f58 <MX_TIM3_Init+0xb8>)
 8001f0a:	0011      	movs	r1, r2
 8001f0c:	0018      	movs	r0, r3
 8001f0e:	f002 fc2f 	bl	8004770 <HAL_TIMEx_MasterConfigSynchronization>
 8001f12:	1e03      	subs	r3, r0, #0
 8001f14:	d001      	beq.n	8001f1a <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 8001f16:	f7ff fd8f 	bl	8001a38 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001f1a:	003b      	movs	r3, r7
 8001f1c:	2260      	movs	r2, #96	@ 0x60
 8001f1e:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8001f20:	003b      	movs	r3, r7
 8001f22:	2200      	movs	r2, #0
 8001f24:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f26:	003b      	movs	r3, r7
 8001f28:	2200      	movs	r2, #0
 8001f2a:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f2c:	003b      	movs	r3, r7
 8001f2e:	2200      	movs	r2, #0
 8001f30:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001f32:	0039      	movs	r1, r7
 8001f34:	4b08      	ldr	r3, [pc, #32]	@ (8001f58 <MX_TIM3_Init+0xb8>)
 8001f36:	2204      	movs	r2, #4
 8001f38:	0018      	movs	r0, r3
 8001f3a:	f001 fef9 	bl	8003d30 <HAL_TIM_PWM_ConfigChannel>
 8001f3e:	1e03      	subs	r3, r0, #0
 8001f40:	d001      	beq.n	8001f46 <MX_TIM3_Init+0xa6>
  {
    Error_Handler();
 8001f42:	f7ff fd79 	bl	8001a38 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim3);
 8001f46:	4b04      	ldr	r3, [pc, #16]	@ (8001f58 <MX_TIM3_Init+0xb8>)
 8001f48:	0018      	movs	r0, r3
 8001f4a:	f000 f827 	bl	8001f9c <HAL_TIM_MspPostInit>
}
 8001f4e:	46c0      	nop			@ (mov r8, r8)
 8001f50:	46bd      	mov	sp, r7
 8001f52:	b00a      	add	sp, #40	@ 0x28
 8001f54:	bd80      	pop	{r7, pc}
 8001f56:	46c0      	nop			@ (mov r8, r8)
 8001f58:	20000190 	.word	0x20000190
 8001f5c:	40000400 	.word	0x40000400

08001f60 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b084      	sub	sp, #16
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  if(tim_pwmHandle->Instance==TIM3)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	4a09      	ldr	r2, [pc, #36]	@ (8001f94 <HAL_TIM_PWM_MspInit+0x34>)
 8001f6e:	4293      	cmp	r3, r2
 8001f70:	d10b      	bne.n	8001f8a <HAL_TIM_PWM_MspInit+0x2a>
  {
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001f72:	4b09      	ldr	r3, [pc, #36]	@ (8001f98 <HAL_TIM_PWM_MspInit+0x38>)
 8001f74:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001f76:	4b08      	ldr	r3, [pc, #32]	@ (8001f98 <HAL_TIM_PWM_MspInit+0x38>)
 8001f78:	2102      	movs	r1, #2
 8001f7a:	430a      	orrs	r2, r1
 8001f7c:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001f7e:	4b06      	ldr	r3, [pc, #24]	@ (8001f98 <HAL_TIM_PWM_MspInit+0x38>)
 8001f80:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f82:	2202      	movs	r2, #2
 8001f84:	4013      	ands	r3, r2
 8001f86:	60fb      	str	r3, [r7, #12]
 8001f88:	68fb      	ldr	r3, [r7, #12]
  }
}
 8001f8a:	46c0      	nop			@ (mov r8, r8)
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	b004      	add	sp, #16
 8001f90:	bd80      	pop	{r7, pc}
 8001f92:	46c0      	nop			@ (mov r8, r8)
 8001f94:	40000400 	.word	0x40000400
 8001f98:	40021000 	.word	0x40021000

08001f9c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001f9c:	b590      	push	{r4, r7, lr}
 8001f9e:	b089      	sub	sp, #36	@ 0x24
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fa4:	240c      	movs	r4, #12
 8001fa6:	193b      	adds	r3, r7, r4
 8001fa8:	0018      	movs	r0, r3
 8001faa:	2314      	movs	r3, #20
 8001fac:	001a      	movs	r2, r3
 8001fae:	2100      	movs	r1, #0
 8001fb0:	f002 fc46 	bl	8004840 <memset>
  if(timHandle->Instance==TIM3)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	4a34      	ldr	r2, [pc, #208]	@ (800208c <HAL_TIM_MspPostInit+0xf0>)
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d162      	bne.n	8002084 <HAL_TIM_MspPostInit+0xe8>
  {
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fbe:	4b34      	ldr	r3, [pc, #208]	@ (8002090 <HAL_TIM_MspPostInit+0xf4>)
 8001fc0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001fc2:	4b33      	ldr	r3, [pc, #204]	@ (8002090 <HAL_TIM_MspPostInit+0xf4>)
 8001fc4:	2101      	movs	r1, #1
 8001fc6:	430a      	orrs	r2, r1
 8001fc8:	635a      	str	r2, [r3, #52]	@ 0x34
 8001fca:	4b31      	ldr	r3, [pc, #196]	@ (8002090 <HAL_TIM_MspPostInit+0xf4>)
 8001fcc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001fce:	2201      	movs	r2, #1
 8001fd0:	4013      	ands	r3, r2
 8001fd2:	60bb      	str	r3, [r7, #8]
 8001fd4:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001fd6:	193b      	adds	r3, r7, r4
 8001fd8:	2280      	movs	r2, #128	@ 0x80
 8001fda:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fdc:	193b      	adds	r3, r7, r4
 8001fde:	2202      	movs	r2, #2
 8001fe0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fe2:	193b      	adds	r3, r7, r4
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH; // Hohe Geschwindigkeit für WS2812
 8001fe8:	193b      	adds	r3, r7, r4
 8001fea:	2202      	movs	r2, #2
 8001fec:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8001fee:	193b      	adds	r3, r7, r4
 8001ff0:	2201      	movs	r2, #1
 8001ff2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ff4:	193a      	adds	r2, r7, r4
 8001ff6:	23a0      	movs	r3, #160	@ 0xa0
 8001ff8:	05db      	lsls	r3, r3, #23
 8001ffa:	0011      	movs	r1, r2
 8001ffc:	0018      	movs	r0, r3
 8001ffe:	f000 fd3b 	bl	8002a78 <HAL_GPIO_Init>

    /**Debug Pin PA8 Configuration (SysTick-Debug)
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002002:	0021      	movs	r1, r4
 8002004:	187b      	adds	r3, r7, r1
 8002006:	2280      	movs	r2, #128	@ 0x80
 8002008:	0052      	lsls	r2, r2, #1
 800200a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800200c:	000c      	movs	r4, r1
 800200e:	193b      	adds	r3, r7, r4
 8002010:	2201      	movs	r2, #1
 8002012:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002014:	193b      	adds	r3, r7, r4
 8002016:	2200      	movs	r2, #0
 8002018:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800201a:	193b      	adds	r3, r7, r4
 800201c:	2200      	movs	r2, #0
 800201e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = 0;
 8002020:	193b      	adds	r3, r7, r4
 8002022:	2200      	movs	r2, #0
 8002024:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002026:	193a      	adds	r2, r7, r4
 8002028:	23a0      	movs	r3, #160	@ 0xa0
 800202a:	05db      	lsls	r3, r3, #23
 800202c:	0011      	movs	r1, r2
 800202e:	0018      	movs	r0, r3
 8002030:	f000 fd22 	bl	8002a78 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET); // Initial Low
 8002034:	2380      	movs	r3, #128	@ 0x80
 8002036:	0059      	lsls	r1, r3, #1
 8002038:	23a0      	movs	r3, #160	@ 0xa0
 800203a:	05db      	lsls	r3, r3, #23
 800203c:	2200      	movs	r2, #0
 800203e:	0018      	movs	r0, r3
 8002040:	f000 fe7e 	bl	8002d40 <HAL_GPIO_WritePin>

    /**Debug Pin PA11 Configuration (DMA-Debug)
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002044:	193b      	adds	r3, r7, r4
 8002046:	2280      	movs	r2, #128	@ 0x80
 8002048:	0112      	lsls	r2, r2, #4
 800204a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800204c:	0021      	movs	r1, r4
 800204e:	187b      	adds	r3, r7, r1
 8002050:	2201      	movs	r2, #1
 8002052:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002054:	187b      	adds	r3, r7, r1
 8002056:	2200      	movs	r2, #0
 8002058:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800205a:	187b      	adds	r3, r7, r1
 800205c:	2200      	movs	r2, #0
 800205e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = 0;
 8002060:	187b      	adds	r3, r7, r1
 8002062:	2200      	movs	r2, #0
 8002064:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002066:	187a      	adds	r2, r7, r1
 8002068:	23a0      	movs	r3, #160	@ 0xa0
 800206a:	05db      	lsls	r3, r3, #23
 800206c:	0011      	movs	r1, r2
 800206e:	0018      	movs	r0, r3
 8002070:	f000 fd02 	bl	8002a78 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET); // Initial Low
 8002074:	2380      	movs	r3, #128	@ 0x80
 8002076:	0119      	lsls	r1, r3, #4
 8002078:	23a0      	movs	r3, #160	@ 0xa0
 800207a:	05db      	lsls	r3, r3, #23
 800207c:	2200      	movs	r2, #0
 800207e:	0018      	movs	r0, r3
 8002080:	f000 fe5e 	bl	8002d40 <HAL_GPIO_WritePin>
  }
}
 8002084:	46c0      	nop			@ (mov r8, r8)
 8002086:	46bd      	mov	sp, r7
 8002088:	b009      	add	sp, #36	@ 0x24
 800208a:	bd90      	pop	{r4, r7, pc}
 800208c:	40000400 	.word	0x40000400
 8002090:	40021000 	.word	0x40021000

08002094 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002094:	480d      	ldr	r0, [pc, #52]	@ (80020cc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002096:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002098:	f7ff fefc 	bl	8001e94 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800209c:	480c      	ldr	r0, [pc, #48]	@ (80020d0 <LoopForever+0x6>)
  ldr r1, =_edata
 800209e:	490d      	ldr	r1, [pc, #52]	@ (80020d4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80020a0:	4a0d      	ldr	r2, [pc, #52]	@ (80020d8 <LoopForever+0xe>)
  movs r3, #0
 80020a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80020a4:	e002      	b.n	80020ac <LoopCopyDataInit>

080020a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80020a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80020a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80020aa:	3304      	adds	r3, #4

080020ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80020ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80020ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80020b0:	d3f9      	bcc.n	80020a6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80020b2:	4a0a      	ldr	r2, [pc, #40]	@ (80020dc <LoopForever+0x12>)
  ldr r4, =_ebss
 80020b4:	4c0a      	ldr	r4, [pc, #40]	@ (80020e0 <LoopForever+0x16>)
  movs r3, #0
 80020b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80020b8:	e001      	b.n	80020be <LoopFillZerobss>

080020ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80020ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80020bc:	3204      	adds	r2, #4

080020be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80020be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80020c0:	d3fb      	bcc.n	80020ba <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80020c2:	f002 fbc5 	bl	8004850 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80020c6:	f7ff fc0b 	bl	80018e0 <main>

080020ca <LoopForever>:

LoopForever:
  b LoopForever
 80020ca:	e7fe      	b.n	80020ca <LoopForever>
  ldr   r0, =_estack
 80020cc:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80020d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80020d4:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 80020d8:	080049c8 	.word	0x080049c8
  ldr r2, =_sbss
 80020dc:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 80020e0:	200001e0 	.word	0x200001e0

080020e4 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80020e4:	e7fe      	b.n	80020e4 <ADC1_IRQHandler>
	...

080020e8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b082      	sub	sp, #8
 80020ec:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80020ee:	1dfb      	adds	r3, r7, #7
 80020f0:	2200      	movs	r2, #0
 80020f2:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80020f4:	4b0b      	ldr	r3, [pc, #44]	@ (8002124 <HAL_Init+0x3c>)
 80020f6:	681a      	ldr	r2, [r3, #0]
 80020f8:	4b0a      	ldr	r3, [pc, #40]	@ (8002124 <HAL_Init+0x3c>)
 80020fa:	2180      	movs	r1, #128	@ 0x80
 80020fc:	0049      	lsls	r1, r1, #1
 80020fe:	430a      	orrs	r2, r1
 8002100:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002102:	2001      	movs	r0, #1
 8002104:	f000 f810 	bl	8002128 <HAL_InitTick>
 8002108:	1e03      	subs	r3, r0, #0
 800210a:	d003      	beq.n	8002114 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 800210c:	1dfb      	adds	r3, r7, #7
 800210e:	2201      	movs	r2, #1
 8002110:	701a      	strb	r2, [r3, #0]
 8002112:	e001      	b.n	8002118 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8002114:	f7ff fcc2 	bl	8001a9c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002118:	1dfb      	adds	r3, r7, #7
 800211a:	781b      	ldrb	r3, [r3, #0]
}
 800211c:	0018      	movs	r0, r3
 800211e:	46bd      	mov	sp, r7
 8002120:	b002      	add	sp, #8
 8002122:	bd80      	pop	{r7, pc}
 8002124:	40022000 	.word	0x40022000

08002128 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002128:	b590      	push	{r4, r7, lr}
 800212a:	b085      	sub	sp, #20
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002130:	230f      	movs	r3, #15
 8002132:	18fb      	adds	r3, r7, r3
 8002134:	2200      	movs	r2, #0
 8002136:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8002138:	4b1d      	ldr	r3, [pc, #116]	@ (80021b0 <HAL_InitTick+0x88>)
 800213a:	781b      	ldrb	r3, [r3, #0]
 800213c:	2b00      	cmp	r3, #0
 800213e:	d02b      	beq.n	8002198 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8002140:	4b1c      	ldr	r3, [pc, #112]	@ (80021b4 <HAL_InitTick+0x8c>)
 8002142:	681c      	ldr	r4, [r3, #0]
 8002144:	4b1a      	ldr	r3, [pc, #104]	@ (80021b0 <HAL_InitTick+0x88>)
 8002146:	781b      	ldrb	r3, [r3, #0]
 8002148:	0019      	movs	r1, r3
 800214a:	23fa      	movs	r3, #250	@ 0xfa
 800214c:	0098      	lsls	r0, r3, #2
 800214e:	f7fd ffd9 	bl	8000104 <__udivsi3>
 8002152:	0003      	movs	r3, r0
 8002154:	0019      	movs	r1, r3
 8002156:	0020      	movs	r0, r4
 8002158:	f7fd ffd4 	bl	8000104 <__udivsi3>
 800215c:	0003      	movs	r3, r0
 800215e:	0018      	movs	r0, r3
 8002160:	f000 f93d 	bl	80023de <HAL_SYSTICK_Config>
 8002164:	1e03      	subs	r3, r0, #0
 8002166:	d112      	bne.n	800218e <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2b03      	cmp	r3, #3
 800216c:	d80a      	bhi.n	8002184 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800216e:	6879      	ldr	r1, [r7, #4]
 8002170:	2301      	movs	r3, #1
 8002172:	425b      	negs	r3, r3
 8002174:	2200      	movs	r2, #0
 8002176:	0018      	movs	r0, r3
 8002178:	f000 f90c 	bl	8002394 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800217c:	4b0e      	ldr	r3, [pc, #56]	@ (80021b8 <HAL_InitTick+0x90>)
 800217e:	687a      	ldr	r2, [r7, #4]
 8002180:	601a      	str	r2, [r3, #0]
 8002182:	e00d      	b.n	80021a0 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8002184:	230f      	movs	r3, #15
 8002186:	18fb      	adds	r3, r7, r3
 8002188:	2201      	movs	r2, #1
 800218a:	701a      	strb	r2, [r3, #0]
 800218c:	e008      	b.n	80021a0 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 800218e:	230f      	movs	r3, #15
 8002190:	18fb      	adds	r3, r7, r3
 8002192:	2201      	movs	r2, #1
 8002194:	701a      	strb	r2, [r3, #0]
 8002196:	e003      	b.n	80021a0 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002198:	230f      	movs	r3, #15
 800219a:	18fb      	adds	r3, r7, r3
 800219c:	2201      	movs	r2, #1
 800219e:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80021a0:	230f      	movs	r3, #15
 80021a2:	18fb      	adds	r3, r7, r3
 80021a4:	781b      	ldrb	r3, [r3, #0]
}
 80021a6:	0018      	movs	r0, r3
 80021a8:	46bd      	mov	sp, r7
 80021aa:	b005      	add	sp, #20
 80021ac:	bd90      	pop	{r4, r7, pc}
 80021ae:	46c0      	nop			@ (mov r8, r8)
 80021b0:	20000010 	.word	0x20000010
 80021b4:	20000008 	.word	0x20000008
 80021b8:	2000000c 	.word	0x2000000c

080021bc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80021c0:	4b05      	ldr	r3, [pc, #20]	@ (80021d8 <HAL_IncTick+0x1c>)
 80021c2:	781b      	ldrb	r3, [r3, #0]
 80021c4:	001a      	movs	r2, r3
 80021c6:	4b05      	ldr	r3, [pc, #20]	@ (80021dc <HAL_IncTick+0x20>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	18d2      	adds	r2, r2, r3
 80021cc:	4b03      	ldr	r3, [pc, #12]	@ (80021dc <HAL_IncTick+0x20>)
 80021ce:	601a      	str	r2, [r3, #0]
}
 80021d0:	46c0      	nop			@ (mov r8, r8)
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bd80      	pop	{r7, pc}
 80021d6:	46c0      	nop			@ (mov r8, r8)
 80021d8:	20000010 	.word	0x20000010
 80021dc:	200001dc 	.word	0x200001dc

080021e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	af00      	add	r7, sp, #0
  return uwTick;
 80021e4:	4b02      	ldr	r3, [pc, #8]	@ (80021f0 <HAL_GetTick+0x10>)
 80021e6:	681b      	ldr	r3, [r3, #0]
}
 80021e8:	0018      	movs	r0, r3
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd80      	pop	{r7, pc}
 80021ee:	46c0      	nop			@ (mov r8, r8)
 80021f0:	200001dc 	.word	0x200001dc

080021f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b084      	sub	sp, #16
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80021fc:	f7ff fff0 	bl	80021e0 <HAL_GetTick>
 8002200:	0003      	movs	r3, r0
 8002202:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	3301      	adds	r3, #1
 800220c:	d005      	beq.n	800221a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800220e:	4b0a      	ldr	r3, [pc, #40]	@ (8002238 <HAL_Delay+0x44>)
 8002210:	781b      	ldrb	r3, [r3, #0]
 8002212:	001a      	movs	r2, r3
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	189b      	adds	r3, r3, r2
 8002218:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800221a:	46c0      	nop			@ (mov r8, r8)
 800221c:	f7ff ffe0 	bl	80021e0 <HAL_GetTick>
 8002220:	0002      	movs	r2, r0
 8002222:	68bb      	ldr	r3, [r7, #8]
 8002224:	1ad3      	subs	r3, r2, r3
 8002226:	68fa      	ldr	r2, [r7, #12]
 8002228:	429a      	cmp	r2, r3
 800222a:	d8f7      	bhi.n	800221c <HAL_Delay+0x28>
  {
  }
}
 800222c:	46c0      	nop			@ (mov r8, r8)
 800222e:	46c0      	nop			@ (mov r8, r8)
 8002230:	46bd      	mov	sp, r7
 8002232:	b004      	add	sp, #16
 8002234:	bd80      	pop	{r7, pc}
 8002236:	46c0      	nop			@ (mov r8, r8)
 8002238:	20000010 	.word	0x20000010

0800223c <__NVIC_EnableIRQ>:
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b082      	sub	sp, #8
 8002240:	af00      	add	r7, sp, #0
 8002242:	0002      	movs	r2, r0
 8002244:	1dfb      	adds	r3, r7, #7
 8002246:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002248:	1dfb      	adds	r3, r7, #7
 800224a:	781b      	ldrb	r3, [r3, #0]
 800224c:	2b7f      	cmp	r3, #127	@ 0x7f
 800224e:	d809      	bhi.n	8002264 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002250:	1dfb      	adds	r3, r7, #7
 8002252:	781b      	ldrb	r3, [r3, #0]
 8002254:	001a      	movs	r2, r3
 8002256:	231f      	movs	r3, #31
 8002258:	401a      	ands	r2, r3
 800225a:	4b04      	ldr	r3, [pc, #16]	@ (800226c <__NVIC_EnableIRQ+0x30>)
 800225c:	2101      	movs	r1, #1
 800225e:	4091      	lsls	r1, r2
 8002260:	000a      	movs	r2, r1
 8002262:	601a      	str	r2, [r3, #0]
}
 8002264:	46c0      	nop			@ (mov r8, r8)
 8002266:	46bd      	mov	sp, r7
 8002268:	b002      	add	sp, #8
 800226a:	bd80      	pop	{r7, pc}
 800226c:	e000e100 	.word	0xe000e100

08002270 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002270:	b590      	push	{r4, r7, lr}
 8002272:	b083      	sub	sp, #12
 8002274:	af00      	add	r7, sp, #0
 8002276:	0002      	movs	r2, r0
 8002278:	6039      	str	r1, [r7, #0]
 800227a:	1dfb      	adds	r3, r7, #7
 800227c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800227e:	1dfb      	adds	r3, r7, #7
 8002280:	781b      	ldrb	r3, [r3, #0]
 8002282:	2b7f      	cmp	r3, #127	@ 0x7f
 8002284:	d828      	bhi.n	80022d8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002286:	4a2f      	ldr	r2, [pc, #188]	@ (8002344 <__NVIC_SetPriority+0xd4>)
 8002288:	1dfb      	adds	r3, r7, #7
 800228a:	781b      	ldrb	r3, [r3, #0]
 800228c:	b25b      	sxtb	r3, r3
 800228e:	089b      	lsrs	r3, r3, #2
 8002290:	33c0      	adds	r3, #192	@ 0xc0
 8002292:	009b      	lsls	r3, r3, #2
 8002294:	589b      	ldr	r3, [r3, r2]
 8002296:	1dfa      	adds	r2, r7, #7
 8002298:	7812      	ldrb	r2, [r2, #0]
 800229a:	0011      	movs	r1, r2
 800229c:	2203      	movs	r2, #3
 800229e:	400a      	ands	r2, r1
 80022a0:	00d2      	lsls	r2, r2, #3
 80022a2:	21ff      	movs	r1, #255	@ 0xff
 80022a4:	4091      	lsls	r1, r2
 80022a6:	000a      	movs	r2, r1
 80022a8:	43d2      	mvns	r2, r2
 80022aa:	401a      	ands	r2, r3
 80022ac:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	019b      	lsls	r3, r3, #6
 80022b2:	22ff      	movs	r2, #255	@ 0xff
 80022b4:	401a      	ands	r2, r3
 80022b6:	1dfb      	adds	r3, r7, #7
 80022b8:	781b      	ldrb	r3, [r3, #0]
 80022ba:	0018      	movs	r0, r3
 80022bc:	2303      	movs	r3, #3
 80022be:	4003      	ands	r3, r0
 80022c0:	00db      	lsls	r3, r3, #3
 80022c2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80022c4:	481f      	ldr	r0, [pc, #124]	@ (8002344 <__NVIC_SetPriority+0xd4>)
 80022c6:	1dfb      	adds	r3, r7, #7
 80022c8:	781b      	ldrb	r3, [r3, #0]
 80022ca:	b25b      	sxtb	r3, r3
 80022cc:	089b      	lsrs	r3, r3, #2
 80022ce:	430a      	orrs	r2, r1
 80022d0:	33c0      	adds	r3, #192	@ 0xc0
 80022d2:	009b      	lsls	r3, r3, #2
 80022d4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80022d6:	e031      	b.n	800233c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80022d8:	4a1b      	ldr	r2, [pc, #108]	@ (8002348 <__NVIC_SetPriority+0xd8>)
 80022da:	1dfb      	adds	r3, r7, #7
 80022dc:	781b      	ldrb	r3, [r3, #0]
 80022de:	0019      	movs	r1, r3
 80022e0:	230f      	movs	r3, #15
 80022e2:	400b      	ands	r3, r1
 80022e4:	3b08      	subs	r3, #8
 80022e6:	089b      	lsrs	r3, r3, #2
 80022e8:	3306      	adds	r3, #6
 80022ea:	009b      	lsls	r3, r3, #2
 80022ec:	18d3      	adds	r3, r2, r3
 80022ee:	3304      	adds	r3, #4
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	1dfa      	adds	r2, r7, #7
 80022f4:	7812      	ldrb	r2, [r2, #0]
 80022f6:	0011      	movs	r1, r2
 80022f8:	2203      	movs	r2, #3
 80022fa:	400a      	ands	r2, r1
 80022fc:	00d2      	lsls	r2, r2, #3
 80022fe:	21ff      	movs	r1, #255	@ 0xff
 8002300:	4091      	lsls	r1, r2
 8002302:	000a      	movs	r2, r1
 8002304:	43d2      	mvns	r2, r2
 8002306:	401a      	ands	r2, r3
 8002308:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	019b      	lsls	r3, r3, #6
 800230e:	22ff      	movs	r2, #255	@ 0xff
 8002310:	401a      	ands	r2, r3
 8002312:	1dfb      	adds	r3, r7, #7
 8002314:	781b      	ldrb	r3, [r3, #0]
 8002316:	0018      	movs	r0, r3
 8002318:	2303      	movs	r3, #3
 800231a:	4003      	ands	r3, r0
 800231c:	00db      	lsls	r3, r3, #3
 800231e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002320:	4809      	ldr	r0, [pc, #36]	@ (8002348 <__NVIC_SetPriority+0xd8>)
 8002322:	1dfb      	adds	r3, r7, #7
 8002324:	781b      	ldrb	r3, [r3, #0]
 8002326:	001c      	movs	r4, r3
 8002328:	230f      	movs	r3, #15
 800232a:	4023      	ands	r3, r4
 800232c:	3b08      	subs	r3, #8
 800232e:	089b      	lsrs	r3, r3, #2
 8002330:	430a      	orrs	r2, r1
 8002332:	3306      	adds	r3, #6
 8002334:	009b      	lsls	r3, r3, #2
 8002336:	18c3      	adds	r3, r0, r3
 8002338:	3304      	adds	r3, #4
 800233a:	601a      	str	r2, [r3, #0]
}
 800233c:	46c0      	nop			@ (mov r8, r8)
 800233e:	46bd      	mov	sp, r7
 8002340:	b003      	add	sp, #12
 8002342:	bd90      	pop	{r4, r7, pc}
 8002344:	e000e100 	.word	0xe000e100
 8002348:	e000ed00 	.word	0xe000ed00

0800234c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b082      	sub	sp, #8
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	1e5a      	subs	r2, r3, #1
 8002358:	2380      	movs	r3, #128	@ 0x80
 800235a:	045b      	lsls	r3, r3, #17
 800235c:	429a      	cmp	r2, r3
 800235e:	d301      	bcc.n	8002364 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002360:	2301      	movs	r3, #1
 8002362:	e010      	b.n	8002386 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002364:	4b0a      	ldr	r3, [pc, #40]	@ (8002390 <SysTick_Config+0x44>)
 8002366:	687a      	ldr	r2, [r7, #4]
 8002368:	3a01      	subs	r2, #1
 800236a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800236c:	2301      	movs	r3, #1
 800236e:	425b      	negs	r3, r3
 8002370:	2103      	movs	r1, #3
 8002372:	0018      	movs	r0, r3
 8002374:	f7ff ff7c 	bl	8002270 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002378:	4b05      	ldr	r3, [pc, #20]	@ (8002390 <SysTick_Config+0x44>)
 800237a:	2200      	movs	r2, #0
 800237c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800237e:	4b04      	ldr	r3, [pc, #16]	@ (8002390 <SysTick_Config+0x44>)
 8002380:	2207      	movs	r2, #7
 8002382:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002384:	2300      	movs	r3, #0
}
 8002386:	0018      	movs	r0, r3
 8002388:	46bd      	mov	sp, r7
 800238a:	b002      	add	sp, #8
 800238c:	bd80      	pop	{r7, pc}
 800238e:	46c0      	nop			@ (mov r8, r8)
 8002390:	e000e010 	.word	0xe000e010

08002394 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b084      	sub	sp, #16
 8002398:	af00      	add	r7, sp, #0
 800239a:	60b9      	str	r1, [r7, #8]
 800239c:	607a      	str	r2, [r7, #4]
 800239e:	210f      	movs	r1, #15
 80023a0:	187b      	adds	r3, r7, r1
 80023a2:	1c02      	adds	r2, r0, #0
 80023a4:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80023a6:	68ba      	ldr	r2, [r7, #8]
 80023a8:	187b      	adds	r3, r7, r1
 80023aa:	781b      	ldrb	r3, [r3, #0]
 80023ac:	b25b      	sxtb	r3, r3
 80023ae:	0011      	movs	r1, r2
 80023b0:	0018      	movs	r0, r3
 80023b2:	f7ff ff5d 	bl	8002270 <__NVIC_SetPriority>
}
 80023b6:	46c0      	nop			@ (mov r8, r8)
 80023b8:	46bd      	mov	sp, r7
 80023ba:	b004      	add	sp, #16
 80023bc:	bd80      	pop	{r7, pc}

080023be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023be:	b580      	push	{r7, lr}
 80023c0:	b082      	sub	sp, #8
 80023c2:	af00      	add	r7, sp, #0
 80023c4:	0002      	movs	r2, r0
 80023c6:	1dfb      	adds	r3, r7, #7
 80023c8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80023ca:	1dfb      	adds	r3, r7, #7
 80023cc:	781b      	ldrb	r3, [r3, #0]
 80023ce:	b25b      	sxtb	r3, r3
 80023d0:	0018      	movs	r0, r3
 80023d2:	f7ff ff33 	bl	800223c <__NVIC_EnableIRQ>
}
 80023d6:	46c0      	nop			@ (mov r8, r8)
 80023d8:	46bd      	mov	sp, r7
 80023da:	b002      	add	sp, #8
 80023dc:	bd80      	pop	{r7, pc}

080023de <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80023de:	b580      	push	{r7, lr}
 80023e0:	b082      	sub	sp, #8
 80023e2:	af00      	add	r7, sp, #0
 80023e4:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	0018      	movs	r0, r3
 80023ea:	f7ff ffaf 	bl	800234c <SysTick_Config>
 80023ee:	0003      	movs	r3, r0
}
 80023f0:	0018      	movs	r0, r3
 80023f2:	46bd      	mov	sp, r7
 80023f4:	b002      	add	sp, #8
 80023f6:	bd80      	pop	{r7, pc}

080023f8 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b082      	sub	sp, #8
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2b00      	cmp	r3, #0
 8002404:	d101      	bne.n	800240a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002406:	2301      	movs	r3, #1
 8002408:	e077      	b.n	80024fa <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	4a3d      	ldr	r2, [pc, #244]	@ (8002504 <HAL_DMA_Init+0x10c>)
 8002410:	4694      	mov	ip, r2
 8002412:	4463      	add	r3, ip
 8002414:	2114      	movs	r1, #20
 8002416:	0018      	movs	r0, r3
 8002418:	f7fd fe74 	bl	8000104 <__udivsi3>
 800241c:	0003      	movs	r3, r0
 800241e:	009a      	lsls	r2, r3, #2
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	641a      	str	r2, [r3, #64]	@ 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2225      	movs	r2, #37	@ 0x25
 8002428:	2102      	movs	r1, #2
 800242a:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	681a      	ldr	r2, [r3, #0]
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	4934      	ldr	r1, [pc, #208]	@ (8002508 <HAL_DMA_Init+0x110>)
 8002438:	400a      	ands	r2, r1
 800243a:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	6819      	ldr	r1, [r3, #0]
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	689a      	ldr	r2, [r3, #8]
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	68db      	ldr	r3, [r3, #12]
 800244a:	431a      	orrs	r2, r3
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	691b      	ldr	r3, [r3, #16]
 8002450:	431a      	orrs	r2, r3
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	695b      	ldr	r3, [r3, #20]
 8002456:	431a      	orrs	r2, r3
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	699b      	ldr	r3, [r3, #24]
 800245c:	431a      	orrs	r2, r3
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	69db      	ldr	r3, [r3, #28]
 8002462:	431a      	orrs	r2, r3
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6a1b      	ldr	r3, [r3, #32]
 8002468:	431a      	orrs	r2, r3
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	430a      	orrs	r2, r1
 8002470:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	0018      	movs	r0, r3
 8002476:	f000 faaf 	bl	80029d8 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	689a      	ldr	r2, [r3, #8]
 800247e:	2380      	movs	r3, #128	@ 0x80
 8002480:	01db      	lsls	r3, r3, #7
 8002482:	429a      	cmp	r2, r3
 8002484:	d102      	bne.n	800248c <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	2200      	movs	r2, #0
 800248a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	685a      	ldr	r2, [r3, #4]
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002494:	213f      	movs	r1, #63	@ 0x3f
 8002496:	400a      	ands	r2, r1
 8002498:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800249e:	687a      	ldr	r2, [r7, #4]
 80024a0:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80024a2:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	685b      	ldr	r3, [r3, #4]
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d011      	beq.n	80024d0 <HAL_DMA_Init+0xd8>
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	685b      	ldr	r3, [r3, #4]
 80024b0:	2b04      	cmp	r3, #4
 80024b2:	d80d      	bhi.n	80024d0 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	0018      	movs	r0, r3
 80024b8:	f000 faba 	bl	8002a30 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80024c0:	2200      	movs	r2, #0
 80024c2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024c8:	687a      	ldr	r2, [r7, #4]
 80024ca:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 80024cc:	605a      	str	r2, [r3, #4]
 80024ce:	e008      	b.n	80024e2 <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2200      	movs	r2, #0
 80024d4:	651a      	str	r2, [r3, #80]	@ 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	2200      	movs	r2, #0
 80024da:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2200      	movs	r2, #0
 80024e0:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	2200      	movs	r2, #0
 80024e6:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2225      	movs	r2, #37	@ 0x25
 80024ec:	2101      	movs	r1, #1
 80024ee:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2224      	movs	r2, #36	@ 0x24
 80024f4:	2100      	movs	r1, #0
 80024f6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80024f8:	2300      	movs	r3, #0
}
 80024fa:	0018      	movs	r0, r3
 80024fc:	46bd      	mov	sp, r7
 80024fe:	b002      	add	sp, #8
 8002500:	bd80      	pop	{r7, pc}
 8002502:	46c0      	nop			@ (mov r8, r8)
 8002504:	bffdfff8 	.word	0xbffdfff8
 8002508:	ffff800f 	.word	0xffff800f

0800250c <HAL_DMA_DeInit>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b082      	sub	sp, #8
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2b00      	cmp	r3, #0
 8002518:	d101      	bne.n	800251e <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800251a:	2301      	movs	r3, #1
 800251c:	e066      	b.n	80025ec <HAL_DMA_DeInit+0xe0>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	681a      	ldr	r2, [r3, #0]
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	2101      	movs	r1, #1
 800252a:	438a      	bics	r2, r1
 800252c:	601a      	str	r2, [r3, #0]
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	4a30      	ldr	r2, [pc, #192]	@ (80025f4 <HAL_DMA_DeInit+0xe8>)
 8002534:	4694      	mov	ip, r2
 8002536:	4463      	add	r3, ip
 8002538:	2114      	movs	r1, #20
 800253a:	0018      	movs	r0, r3
 800253c:	f7fd fde2 	bl	8000104 <__udivsi3>
 8002540:	0003      	movs	r3, r0
 8002542:	009a      	lsls	r2, r3, #2
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	641a      	str	r2, [r3, #64]	@ 0x40
#endif /* DMA2 */

  /* Reset DMA Channel control register */
  hdma->Instance->CCR = 0U;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	2200      	movs	r2, #0
 800254e:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8002550:	4b29      	ldr	r3, [pc, #164]	@ (80025f8 <HAL_DMA_DeInit+0xec>)
 8002552:	6859      	ldr	r1, [r3, #4]
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002558:	221c      	movs	r2, #28
 800255a:	4013      	ands	r3, r2
 800255c:	2201      	movs	r2, #1
 800255e:	409a      	lsls	r2, r3
 8002560:	4b25      	ldr	r3, [pc, #148]	@ (80025f8 <HAL_DMA_DeInit+0xec>)
 8002562:	430a      	orrs	r2, r1
 8002564:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */

  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	0018      	movs	r0, r3
 800256a:	f000 fa35 	bl	80029d8 <DMA_CalcDMAMUXChannelBaseAndMask>

  /* Reset the DMAMUX channel that corresponds to the DMA channel */
  hdma->DMAmuxChannel->CCR = 0U;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002572:	2200      	movs	r2, #0
 8002574:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800257a:	687a      	ldr	r2, [r7, #4]
 800257c:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800257e:	605a      	str	r2, [r3, #4]

  /* Reset Request generator parameters if any */
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	2b00      	cmp	r3, #0
 8002586:	d010      	beq.n	80025aa <HAL_DMA_DeInit+0x9e>
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	2b04      	cmp	r3, #4
 800258e:	d80c      	bhi.n	80025aa <HAL_DMA_DeInit+0x9e>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	0018      	movs	r0, r3
 8002594:	f000 fa4c 	bl	8002a30 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800259c:	2200      	movs	r2, #0
 800259e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025a4:	687a      	ldr	r2, [r7, #4]
 80025a6:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 80025a8:	605a      	str	r2, [r3, #4]
  }

  hdma->DMAmuxRequestGen = 0U;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	2200      	movs	r2, #0
 80025ae:	651a      	str	r2, [r3, #80]	@ 0x50
  hdma->DMAmuxRequestGenStatus = 0U;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2200      	movs	r2, #0
 80025b4:	655a      	str	r2, [r3, #84]	@ 0x54
  hdma->DMAmuxRequestGenStatusMask = 0U;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	2200      	movs	r2, #0
 80025ba:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2200      	movs	r2, #0
 80025c0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma->XferHalfCpltCallback = NULL;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	2200      	movs	r2, #0
 80025c6:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma->XferErrorCallback = NULL;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2200      	movs	r2, #0
 80025cc:	635a      	str	r2, [r3, #52]	@ 0x34
  hdma->XferAbortCallback = NULL;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	2200      	movs	r2, #0
 80025d2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2200      	movs	r2, #0
 80025d8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	2225      	movs	r2, #37	@ 0x25
 80025de:	2100      	movs	r1, #0
 80025e0:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	2224      	movs	r2, #36	@ 0x24
 80025e6:	2100      	movs	r1, #0
 80025e8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80025ea:	2300      	movs	r3, #0
}
 80025ec:	0018      	movs	r0, r3
 80025ee:	46bd      	mov	sp, r7
 80025f0:	b002      	add	sp, #8
 80025f2:	bd80      	pop	{r7, pc}
 80025f4:	bffdfff8 	.word	0xbffdfff8
 80025f8:	40020000 	.word	0x40020000

080025fc <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b086      	sub	sp, #24
 8002600:	af00      	add	r7, sp, #0
 8002602:	60f8      	str	r0, [r7, #12]
 8002604:	60b9      	str	r1, [r7, #8]
 8002606:	607a      	str	r2, [r7, #4]
 8002608:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800260a:	2317      	movs	r3, #23
 800260c:	18fb      	adds	r3, r7, r3
 800260e:	2200      	movs	r2, #0
 8002610:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	2224      	movs	r2, #36	@ 0x24
 8002616:	5c9b      	ldrb	r3, [r3, r2]
 8002618:	2b01      	cmp	r3, #1
 800261a:	d101      	bne.n	8002620 <HAL_DMA_Start_IT+0x24>
 800261c:	2302      	movs	r3, #2
 800261e:	e06f      	b.n	8002700 <HAL_DMA_Start_IT+0x104>
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	2224      	movs	r2, #36	@ 0x24
 8002624:	2101      	movs	r1, #1
 8002626:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	2225      	movs	r2, #37	@ 0x25
 800262c:	5c9b      	ldrb	r3, [r3, r2]
 800262e:	b2db      	uxtb	r3, r3
 8002630:	2b01      	cmp	r3, #1
 8002632:	d157      	bne.n	80026e4 <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	2225      	movs	r2, #37	@ 0x25
 8002638:	2102      	movs	r1, #2
 800263a:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	2200      	movs	r2, #0
 8002640:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	681a      	ldr	r2, [r3, #0]
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	2101      	movs	r1, #1
 800264e:	438a      	bics	r2, r1
 8002650:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	687a      	ldr	r2, [r7, #4]
 8002656:	68b9      	ldr	r1, [r7, #8]
 8002658:	68f8      	ldr	r0, [r7, #12]
 800265a:	f000 f97d 	bl	8002958 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002662:	2b00      	cmp	r3, #0
 8002664:	d008      	beq.n	8002678 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	681a      	ldr	r2, [r3, #0]
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	210e      	movs	r1, #14
 8002672:	430a      	orrs	r2, r1
 8002674:	601a      	str	r2, [r3, #0]
 8002676:	e00f      	b.n	8002698 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	681a      	ldr	r2, [r3, #0]
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	2104      	movs	r1, #4
 8002684:	438a      	bics	r2, r1
 8002686:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	681a      	ldr	r2, [r3, #0]
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	210a      	movs	r1, #10
 8002694:	430a      	orrs	r2, r1
 8002696:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800269c:	681a      	ldr	r2, [r3, #0]
 800269e:	2380      	movs	r3, #128	@ 0x80
 80026a0:	025b      	lsls	r3, r3, #9
 80026a2:	4013      	ands	r3, r2
 80026a4:	d008      	beq.n	80026b8 <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026aa:	681a      	ldr	r2, [r3, #0]
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026b0:	2180      	movs	r1, #128	@ 0x80
 80026b2:	0049      	lsls	r1, r1, #1
 80026b4:	430a      	orrs	r2, r1
 80026b6:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d008      	beq.n	80026d2 <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80026c4:	681a      	ldr	r2, [r3, #0]
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80026ca:	2180      	movs	r1, #128	@ 0x80
 80026cc:	0049      	lsls	r1, r1, #1
 80026ce:	430a      	orrs	r2, r1
 80026d0:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	681a      	ldr	r2, [r3, #0]
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	2101      	movs	r1, #1
 80026de:	430a      	orrs	r2, r1
 80026e0:	601a      	str	r2, [r3, #0]
 80026e2:	e00a      	b.n	80026fa <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	2280      	movs	r2, #128	@ 0x80
 80026e8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	2224      	movs	r2, #36	@ 0x24
 80026ee:	2100      	movs	r1, #0
 80026f0:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 80026f2:	2317      	movs	r3, #23
 80026f4:	18fb      	adds	r3, r7, r3
 80026f6:	2201      	movs	r2, #1
 80026f8:	701a      	strb	r2, [r3, #0]
  }

  return status;
 80026fa:	2317      	movs	r3, #23
 80026fc:	18fb      	adds	r3, r7, r3
 80026fe:	781b      	ldrb	r3, [r3, #0]
}
 8002700:	0018      	movs	r0, r3
 8002702:	46bd      	mov	sp, r7
 8002704:	b006      	add	sp, #24
 8002706:	bd80      	pop	{r7, pc}

08002708 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b084      	sub	sp, #16
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002710:	210f      	movs	r1, #15
 8002712:	187b      	adds	r3, r7, r1
 8002714:	2200      	movs	r2, #0
 8002716:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2225      	movs	r2, #37	@ 0x25
 800271c:	5c9b      	ldrb	r3, [r3, r2]
 800271e:	b2db      	uxtb	r3, r3
 8002720:	2b02      	cmp	r3, #2
 8002722:	d006      	beq.n	8002732 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2204      	movs	r2, #4
 8002728:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800272a:	187b      	adds	r3, r7, r1
 800272c:	2201      	movs	r2, #1
 800272e:	701a      	strb	r2, [r3, #0]
 8002730:	e049      	b.n	80027c6 <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	681a      	ldr	r2, [r3, #0]
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	210e      	movs	r1, #14
 800273e:	438a      	bics	r2, r1
 8002740:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	681a      	ldr	r2, [r3, #0]
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	2101      	movs	r1, #1
 800274e:	438a      	bics	r2, r1
 8002750:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002756:	681a      	ldr	r2, [r3, #0]
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800275c:	491d      	ldr	r1, [pc, #116]	@ (80027d4 <HAL_DMA_Abort_IT+0xcc>)
 800275e:	400a      	ands	r2, r1
 8002760:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 8002762:	4b1d      	ldr	r3, [pc, #116]	@ (80027d8 <HAL_DMA_Abort_IT+0xd0>)
 8002764:	6859      	ldr	r1, [r3, #4]
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800276a:	221c      	movs	r2, #28
 800276c:	4013      	ands	r3, r2
 800276e:	2201      	movs	r2, #1
 8002770:	409a      	lsls	r2, r3
 8002772:	4b19      	ldr	r3, [pc, #100]	@ (80027d8 <HAL_DMA_Abort_IT+0xd0>)
 8002774:	430a      	orrs	r2, r1
 8002776:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800277c:	687a      	ldr	r2, [r7, #4]
 800277e:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8002780:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002786:	2b00      	cmp	r3, #0
 8002788:	d00c      	beq.n	80027a4 <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800278e:	681a      	ldr	r2, [r3, #0]
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002794:	490f      	ldr	r1, [pc, #60]	@ (80027d4 <HAL_DMA_Abort_IT+0xcc>)
 8002796:	400a      	ands	r2, r1
 8002798:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800279e:	687a      	ldr	r2, [r7, #4]
 80027a0:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 80027a2:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2225      	movs	r2, #37	@ 0x25
 80027a8:	2101      	movs	r1, #1
 80027aa:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2224      	movs	r2, #36	@ 0x24
 80027b0:	2100      	movs	r1, #0
 80027b2:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d004      	beq.n	80027c6 <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027c0:	687a      	ldr	r2, [r7, #4]
 80027c2:	0010      	movs	r0, r2
 80027c4:	4798      	blx	r3
    }
  }
  return status;
 80027c6:	230f      	movs	r3, #15
 80027c8:	18fb      	adds	r3, r7, r3
 80027ca:	781b      	ldrb	r3, [r3, #0]
}
 80027cc:	0018      	movs	r0, r3
 80027ce:	46bd      	mov	sp, r7
 80027d0:	b004      	add	sp, #16
 80027d2:	bd80      	pop	{r7, pc}
 80027d4:	fffffeff 	.word	0xfffffeff
 80027d8:	40020000 	.word	0x40020000

080027dc <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b084      	sub	sp, #16
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 80027e4:	4b55      	ldr	r3, [pc, #340]	@ (800293c <HAL_DMA_IRQHandler+0x160>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027f6:	221c      	movs	r2, #28
 80027f8:	4013      	ands	r3, r2
 80027fa:	2204      	movs	r2, #4
 80027fc:	409a      	lsls	r2, r3
 80027fe:	0013      	movs	r3, r2
 8002800:	68fa      	ldr	r2, [r7, #12]
 8002802:	4013      	ands	r3, r2
 8002804:	d027      	beq.n	8002856 <HAL_DMA_IRQHandler+0x7a>
 8002806:	68bb      	ldr	r3, [r7, #8]
 8002808:	2204      	movs	r2, #4
 800280a:	4013      	ands	r3, r2
 800280c:	d023      	beq.n	8002856 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	2220      	movs	r2, #32
 8002816:	4013      	ands	r3, r2
 8002818:	d107      	bne.n	800282a <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	681a      	ldr	r2, [r3, #0]
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	2104      	movs	r1, #4
 8002826:	438a      	bics	r2, r1
 8002828:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 800282a:	4b44      	ldr	r3, [pc, #272]	@ (800293c <HAL_DMA_IRQHandler+0x160>)
 800282c:	6859      	ldr	r1, [r3, #4]
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002832:	221c      	movs	r2, #28
 8002834:	4013      	ands	r3, r2
 8002836:	2204      	movs	r2, #4
 8002838:	409a      	lsls	r2, r3
 800283a:	4b40      	ldr	r3, [pc, #256]	@ (800293c <HAL_DMA_IRQHandler+0x160>)
 800283c:	430a      	orrs	r2, r1
 800283e:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002844:	2b00      	cmp	r3, #0
 8002846:	d100      	bne.n	800284a <HAL_DMA_IRQHandler+0x6e>
 8002848:	e073      	b.n	8002932 <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800284e:	687a      	ldr	r2, [r7, #4]
 8002850:	0010      	movs	r0, r2
 8002852:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8002854:	e06d      	b.n	8002932 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800285a:	221c      	movs	r2, #28
 800285c:	4013      	ands	r3, r2
 800285e:	2202      	movs	r2, #2
 8002860:	409a      	lsls	r2, r3
 8002862:	0013      	movs	r3, r2
 8002864:	68fa      	ldr	r2, [r7, #12]
 8002866:	4013      	ands	r3, r2
 8002868:	d02e      	beq.n	80028c8 <HAL_DMA_IRQHandler+0xec>
 800286a:	68bb      	ldr	r3, [r7, #8]
 800286c:	2202      	movs	r2, #2
 800286e:	4013      	ands	r3, r2
 8002870:	d02a      	beq.n	80028c8 <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	2220      	movs	r2, #32
 800287a:	4013      	ands	r3, r2
 800287c:	d10b      	bne.n	8002896 <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	681a      	ldr	r2, [r3, #0]
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	210a      	movs	r1, #10
 800288a:	438a      	bics	r2, r1
 800288c:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	2225      	movs	r2, #37	@ 0x25
 8002892:	2101      	movs	r1, #1
 8002894:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8002896:	4b29      	ldr	r3, [pc, #164]	@ (800293c <HAL_DMA_IRQHandler+0x160>)
 8002898:	6859      	ldr	r1, [r3, #4]
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800289e:	221c      	movs	r2, #28
 80028a0:	4013      	ands	r3, r2
 80028a2:	2202      	movs	r2, #2
 80028a4:	409a      	lsls	r2, r3
 80028a6:	4b25      	ldr	r3, [pc, #148]	@ (800293c <HAL_DMA_IRQHandler+0x160>)
 80028a8:	430a      	orrs	r2, r1
 80028aa:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2224      	movs	r2, #36	@ 0x24
 80028b0:	2100      	movs	r1, #0
 80028b2:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d03a      	beq.n	8002932 <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028c0:	687a      	ldr	r2, [r7, #4]
 80028c2:	0010      	movs	r0, r2
 80028c4:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 80028c6:	e034      	b.n	8002932 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028cc:	221c      	movs	r2, #28
 80028ce:	4013      	ands	r3, r2
 80028d0:	2208      	movs	r2, #8
 80028d2:	409a      	lsls	r2, r3
 80028d4:	0013      	movs	r3, r2
 80028d6:	68fa      	ldr	r2, [r7, #12]
 80028d8:	4013      	ands	r3, r2
 80028da:	d02b      	beq.n	8002934 <HAL_DMA_IRQHandler+0x158>
 80028dc:	68bb      	ldr	r3, [r7, #8]
 80028de:	2208      	movs	r2, #8
 80028e0:	4013      	ands	r3, r2
 80028e2:	d027      	beq.n	8002934 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	681a      	ldr	r2, [r3, #0]
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	210e      	movs	r1, #14
 80028f0:	438a      	bics	r2, r1
 80028f2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 80028f4:	4b11      	ldr	r3, [pc, #68]	@ (800293c <HAL_DMA_IRQHandler+0x160>)
 80028f6:	6859      	ldr	r1, [r3, #4]
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028fc:	221c      	movs	r2, #28
 80028fe:	4013      	ands	r3, r2
 8002900:	2201      	movs	r2, #1
 8002902:	409a      	lsls	r2, r3
 8002904:	4b0d      	ldr	r3, [pc, #52]	@ (800293c <HAL_DMA_IRQHandler+0x160>)
 8002906:	430a      	orrs	r2, r1
 8002908:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	2201      	movs	r2, #1
 800290e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2225      	movs	r2, #37	@ 0x25
 8002914:	2101      	movs	r1, #1
 8002916:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2224      	movs	r2, #36	@ 0x24
 800291c:	2100      	movs	r1, #0
 800291e:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002924:	2b00      	cmp	r3, #0
 8002926:	d005      	beq.n	8002934 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800292c:	687a      	ldr	r2, [r7, #4]
 800292e:	0010      	movs	r0, r2
 8002930:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002932:	46c0      	nop			@ (mov r8, r8)
 8002934:	46c0      	nop			@ (mov r8, r8)
}
 8002936:	46bd      	mov	sp, r7
 8002938:	b004      	add	sp, #16
 800293a:	bd80      	pop	{r7, pc}
 800293c:	40020000 	.word	0x40020000

08002940 <HAL_DMA_GetState>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b082      	sub	sp, #8
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2225      	movs	r2, #37	@ 0x25
 800294c:	5c9b      	ldrb	r3, [r3, r2]
 800294e:	b2db      	uxtb	r3, r3
}
 8002950:	0018      	movs	r0, r3
 8002952:	46bd      	mov	sp, r7
 8002954:	b002      	add	sp, #8
 8002956:	bd80      	pop	{r7, pc}

08002958 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b084      	sub	sp, #16
 800295c:	af00      	add	r7, sp, #0
 800295e:	60f8      	str	r0, [r7, #12]
 8002960:	60b9      	str	r1, [r7, #8]
 8002962:	607a      	str	r2, [r7, #4]
 8002964:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800296a:	68fa      	ldr	r2, [r7, #12]
 800296c:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800296e:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002974:	2b00      	cmp	r3, #0
 8002976:	d004      	beq.n	8002982 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800297c:	68fa      	ldr	r2, [r7, #12]
 800297e:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8002980:	605a      	str	r2, [r3, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8002982:	4b14      	ldr	r3, [pc, #80]	@ (80029d4 <DMA_SetConfig+0x7c>)
 8002984:	6859      	ldr	r1, [r3, #4]
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800298a:	221c      	movs	r2, #28
 800298c:	4013      	ands	r3, r2
 800298e:	2201      	movs	r2, #1
 8002990:	409a      	lsls	r2, r3
 8002992:	4b10      	ldr	r3, [pc, #64]	@ (80029d4 <DMA_SetConfig+0x7c>)
 8002994:	430a      	orrs	r2, r1
 8002996:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	683a      	ldr	r2, [r7, #0]
 800299e:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	689b      	ldr	r3, [r3, #8]
 80029a4:	2b10      	cmp	r3, #16
 80029a6:	d108      	bne.n	80029ba <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	687a      	ldr	r2, [r7, #4]
 80029ae:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	68ba      	ldr	r2, [r7, #8]
 80029b6:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80029b8:	e007      	b.n	80029ca <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	68ba      	ldr	r2, [r7, #8]
 80029c0:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	687a      	ldr	r2, [r7, #4]
 80029c8:	60da      	str	r2, [r3, #12]
}
 80029ca:	46c0      	nop			@ (mov r8, r8)
 80029cc:	46bd      	mov	sp, r7
 80029ce:	b004      	add	sp, #16
 80029d0:	bd80      	pop	{r7, pc}
 80029d2:	46c0      	nop			@ (mov r8, r8)
 80029d4:	40020000 	.word	0x40020000

080029d8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b084      	sub	sp, #16
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029e4:	089b      	lsrs	r3, r3, #2
 80029e6:	4a10      	ldr	r2, [pc, #64]	@ (8002a28 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 80029e8:	4694      	mov	ip, r2
 80029ea:	4463      	add	r3, ip
 80029ec:	009b      	lsls	r3, r3, #2
 80029ee:	001a      	movs	r2, r3
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	001a      	movs	r2, r3
 80029fa:	23ff      	movs	r3, #255	@ 0xff
 80029fc:	4013      	ands	r3, r2
 80029fe:	3b08      	subs	r3, #8
 8002a00:	2114      	movs	r1, #20
 8002a02:	0018      	movs	r0, r3
 8002a04:	f7fd fb7e 	bl	8000104 <__udivsi3>
 8002a08:	0003      	movs	r3, r0
 8002a0a:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	4a07      	ldr	r2, [pc, #28]	@ (8002a2c <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8002a10:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	221f      	movs	r2, #31
 8002a16:	4013      	ands	r3, r2
 8002a18:	2201      	movs	r2, #1
 8002a1a:	409a      	lsls	r2, r3
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	64da      	str	r2, [r3, #76]	@ 0x4c
}
 8002a20:	46c0      	nop			@ (mov r8, r8)
 8002a22:	46bd      	mov	sp, r7
 8002a24:	b004      	add	sp, #16
 8002a26:	bd80      	pop	{r7, pc}
 8002a28:	10008200 	.word	0x10008200
 8002a2c:	40020880 	.word	0x40020880

08002a30 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b084      	sub	sp, #16
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	685b      	ldr	r3, [r3, #4]
 8002a3c:	223f      	movs	r2, #63	@ 0x3f
 8002a3e:	4013      	ands	r3, r2
 8002a40:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	4a0a      	ldr	r2, [pc, #40]	@ (8002a70 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8002a46:	4694      	mov	ip, r2
 8002a48:	4463      	add	r3, ip
 8002a4a:	009b      	lsls	r3, r3, #2
 8002a4c:	001a      	movs	r2, r3
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	651a      	str	r2, [r3, #80]	@ 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	4a07      	ldr	r2, [pc, #28]	@ (8002a74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8002a56:	655a      	str	r2, [r3, #84]	@ 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	3b01      	subs	r3, #1
 8002a5c:	2203      	movs	r2, #3
 8002a5e:	4013      	ands	r3, r2
 8002a60:	2201      	movs	r2, #1
 8002a62:	409a      	lsls	r2, r3
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	659a      	str	r2, [r3, #88]	@ 0x58
}
 8002a68:	46c0      	nop			@ (mov r8, r8)
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	b004      	add	sp, #16
 8002a6e:	bd80      	pop	{r7, pc}
 8002a70:	1000823f 	.word	0x1000823f
 8002a74:	40020940 	.word	0x40020940

08002a78 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b086      	sub	sp, #24
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
 8002a80:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002a82:	2300      	movs	r3, #0
 8002a84:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a86:	e147      	b.n	8002d18 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	2101      	movs	r1, #1
 8002a8e:	697a      	ldr	r2, [r7, #20]
 8002a90:	4091      	lsls	r1, r2
 8002a92:	000a      	movs	r2, r1
 8002a94:	4013      	ands	r3, r2
 8002a96:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d100      	bne.n	8002aa0 <HAL_GPIO_Init+0x28>
 8002a9e:	e138      	b.n	8002d12 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	2203      	movs	r2, #3
 8002aa6:	4013      	ands	r3, r2
 8002aa8:	2b01      	cmp	r3, #1
 8002aaa:	d005      	beq.n	8002ab8 <HAL_GPIO_Init+0x40>
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	685b      	ldr	r3, [r3, #4]
 8002ab0:	2203      	movs	r2, #3
 8002ab2:	4013      	ands	r3, r2
 8002ab4:	2b02      	cmp	r3, #2
 8002ab6:	d130      	bne.n	8002b1a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	689b      	ldr	r3, [r3, #8]
 8002abc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002abe:	697b      	ldr	r3, [r7, #20]
 8002ac0:	005b      	lsls	r3, r3, #1
 8002ac2:	2203      	movs	r2, #3
 8002ac4:	409a      	lsls	r2, r3
 8002ac6:	0013      	movs	r3, r2
 8002ac8:	43da      	mvns	r2, r3
 8002aca:	693b      	ldr	r3, [r7, #16]
 8002acc:	4013      	ands	r3, r2
 8002ace:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	68da      	ldr	r2, [r3, #12]
 8002ad4:	697b      	ldr	r3, [r7, #20]
 8002ad6:	005b      	lsls	r3, r3, #1
 8002ad8:	409a      	lsls	r2, r3
 8002ada:	0013      	movs	r3, r2
 8002adc:	693a      	ldr	r2, [r7, #16]
 8002ade:	4313      	orrs	r3, r2
 8002ae0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	693a      	ldr	r2, [r7, #16]
 8002ae6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002aee:	2201      	movs	r2, #1
 8002af0:	697b      	ldr	r3, [r7, #20]
 8002af2:	409a      	lsls	r2, r3
 8002af4:	0013      	movs	r3, r2
 8002af6:	43da      	mvns	r2, r3
 8002af8:	693b      	ldr	r3, [r7, #16]
 8002afa:	4013      	ands	r3, r2
 8002afc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	685b      	ldr	r3, [r3, #4]
 8002b02:	091b      	lsrs	r3, r3, #4
 8002b04:	2201      	movs	r2, #1
 8002b06:	401a      	ands	r2, r3
 8002b08:	697b      	ldr	r3, [r7, #20]
 8002b0a:	409a      	lsls	r2, r3
 8002b0c:	0013      	movs	r3, r2
 8002b0e:	693a      	ldr	r2, [r7, #16]
 8002b10:	4313      	orrs	r3, r2
 8002b12:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	693a      	ldr	r2, [r7, #16]
 8002b18:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	685b      	ldr	r3, [r3, #4]
 8002b1e:	2203      	movs	r2, #3
 8002b20:	4013      	ands	r3, r2
 8002b22:	2b03      	cmp	r3, #3
 8002b24:	d017      	beq.n	8002b56 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	68db      	ldr	r3, [r3, #12]
 8002b2a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002b2c:	697b      	ldr	r3, [r7, #20]
 8002b2e:	005b      	lsls	r3, r3, #1
 8002b30:	2203      	movs	r2, #3
 8002b32:	409a      	lsls	r2, r3
 8002b34:	0013      	movs	r3, r2
 8002b36:	43da      	mvns	r2, r3
 8002b38:	693b      	ldr	r3, [r7, #16]
 8002b3a:	4013      	ands	r3, r2
 8002b3c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	689a      	ldr	r2, [r3, #8]
 8002b42:	697b      	ldr	r3, [r7, #20]
 8002b44:	005b      	lsls	r3, r3, #1
 8002b46:	409a      	lsls	r2, r3
 8002b48:	0013      	movs	r3, r2
 8002b4a:	693a      	ldr	r2, [r7, #16]
 8002b4c:	4313      	orrs	r3, r2
 8002b4e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	693a      	ldr	r2, [r7, #16]
 8002b54:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	685b      	ldr	r3, [r3, #4]
 8002b5a:	2203      	movs	r2, #3
 8002b5c:	4013      	ands	r3, r2
 8002b5e:	2b02      	cmp	r3, #2
 8002b60:	d123      	bne.n	8002baa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002b62:	697b      	ldr	r3, [r7, #20]
 8002b64:	08da      	lsrs	r2, r3, #3
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	3208      	adds	r2, #8
 8002b6a:	0092      	lsls	r2, r2, #2
 8002b6c:	58d3      	ldr	r3, [r2, r3]
 8002b6e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002b70:	697b      	ldr	r3, [r7, #20]
 8002b72:	2207      	movs	r2, #7
 8002b74:	4013      	ands	r3, r2
 8002b76:	009b      	lsls	r3, r3, #2
 8002b78:	220f      	movs	r2, #15
 8002b7a:	409a      	lsls	r2, r3
 8002b7c:	0013      	movs	r3, r2
 8002b7e:	43da      	mvns	r2, r3
 8002b80:	693b      	ldr	r3, [r7, #16]
 8002b82:	4013      	ands	r3, r2
 8002b84:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	691a      	ldr	r2, [r3, #16]
 8002b8a:	697b      	ldr	r3, [r7, #20]
 8002b8c:	2107      	movs	r1, #7
 8002b8e:	400b      	ands	r3, r1
 8002b90:	009b      	lsls	r3, r3, #2
 8002b92:	409a      	lsls	r2, r3
 8002b94:	0013      	movs	r3, r2
 8002b96:	693a      	ldr	r2, [r7, #16]
 8002b98:	4313      	orrs	r3, r2
 8002b9a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002b9c:	697b      	ldr	r3, [r7, #20]
 8002b9e:	08da      	lsrs	r2, r3, #3
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	3208      	adds	r2, #8
 8002ba4:	0092      	lsls	r2, r2, #2
 8002ba6:	6939      	ldr	r1, [r7, #16]
 8002ba8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002bb0:	697b      	ldr	r3, [r7, #20]
 8002bb2:	005b      	lsls	r3, r3, #1
 8002bb4:	2203      	movs	r2, #3
 8002bb6:	409a      	lsls	r2, r3
 8002bb8:	0013      	movs	r3, r2
 8002bba:	43da      	mvns	r2, r3
 8002bbc:	693b      	ldr	r3, [r7, #16]
 8002bbe:	4013      	ands	r3, r2
 8002bc0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	685b      	ldr	r3, [r3, #4]
 8002bc6:	2203      	movs	r2, #3
 8002bc8:	401a      	ands	r2, r3
 8002bca:	697b      	ldr	r3, [r7, #20]
 8002bcc:	005b      	lsls	r3, r3, #1
 8002bce:	409a      	lsls	r2, r3
 8002bd0:	0013      	movs	r3, r2
 8002bd2:	693a      	ldr	r2, [r7, #16]
 8002bd4:	4313      	orrs	r3, r2
 8002bd6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	693a      	ldr	r2, [r7, #16]
 8002bdc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	685a      	ldr	r2, [r3, #4]
 8002be2:	23c0      	movs	r3, #192	@ 0xc0
 8002be4:	029b      	lsls	r3, r3, #10
 8002be6:	4013      	ands	r3, r2
 8002be8:	d100      	bne.n	8002bec <HAL_GPIO_Init+0x174>
 8002bea:	e092      	b.n	8002d12 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8002bec:	4a50      	ldr	r2, [pc, #320]	@ (8002d30 <HAL_GPIO_Init+0x2b8>)
 8002bee:	697b      	ldr	r3, [r7, #20]
 8002bf0:	089b      	lsrs	r3, r3, #2
 8002bf2:	3318      	adds	r3, #24
 8002bf4:	009b      	lsls	r3, r3, #2
 8002bf6:	589b      	ldr	r3, [r3, r2]
 8002bf8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8002bfa:	697b      	ldr	r3, [r7, #20]
 8002bfc:	2203      	movs	r2, #3
 8002bfe:	4013      	ands	r3, r2
 8002c00:	00db      	lsls	r3, r3, #3
 8002c02:	220f      	movs	r2, #15
 8002c04:	409a      	lsls	r2, r3
 8002c06:	0013      	movs	r3, r2
 8002c08:	43da      	mvns	r2, r3
 8002c0a:	693b      	ldr	r3, [r7, #16]
 8002c0c:	4013      	ands	r3, r2
 8002c0e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8002c10:	687a      	ldr	r2, [r7, #4]
 8002c12:	23a0      	movs	r3, #160	@ 0xa0
 8002c14:	05db      	lsls	r3, r3, #23
 8002c16:	429a      	cmp	r2, r3
 8002c18:	d013      	beq.n	8002c42 <HAL_GPIO_Init+0x1ca>
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	4a45      	ldr	r2, [pc, #276]	@ (8002d34 <HAL_GPIO_Init+0x2bc>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d00d      	beq.n	8002c3e <HAL_GPIO_Init+0x1c6>
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	4a44      	ldr	r2, [pc, #272]	@ (8002d38 <HAL_GPIO_Init+0x2c0>)
 8002c26:	4293      	cmp	r3, r2
 8002c28:	d007      	beq.n	8002c3a <HAL_GPIO_Init+0x1c2>
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	4a43      	ldr	r2, [pc, #268]	@ (8002d3c <HAL_GPIO_Init+0x2c4>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d101      	bne.n	8002c36 <HAL_GPIO_Init+0x1be>
 8002c32:	2303      	movs	r3, #3
 8002c34:	e006      	b.n	8002c44 <HAL_GPIO_Init+0x1cc>
 8002c36:	2305      	movs	r3, #5
 8002c38:	e004      	b.n	8002c44 <HAL_GPIO_Init+0x1cc>
 8002c3a:	2302      	movs	r3, #2
 8002c3c:	e002      	b.n	8002c44 <HAL_GPIO_Init+0x1cc>
 8002c3e:	2301      	movs	r3, #1
 8002c40:	e000      	b.n	8002c44 <HAL_GPIO_Init+0x1cc>
 8002c42:	2300      	movs	r3, #0
 8002c44:	697a      	ldr	r2, [r7, #20]
 8002c46:	2103      	movs	r1, #3
 8002c48:	400a      	ands	r2, r1
 8002c4a:	00d2      	lsls	r2, r2, #3
 8002c4c:	4093      	lsls	r3, r2
 8002c4e:	693a      	ldr	r2, [r7, #16]
 8002c50:	4313      	orrs	r3, r2
 8002c52:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8002c54:	4936      	ldr	r1, [pc, #216]	@ (8002d30 <HAL_GPIO_Init+0x2b8>)
 8002c56:	697b      	ldr	r3, [r7, #20]
 8002c58:	089b      	lsrs	r3, r3, #2
 8002c5a:	3318      	adds	r3, #24
 8002c5c:	009b      	lsls	r3, r3, #2
 8002c5e:	693a      	ldr	r2, [r7, #16]
 8002c60:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002c62:	4b33      	ldr	r3, [pc, #204]	@ (8002d30 <HAL_GPIO_Init+0x2b8>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	43da      	mvns	r2, r3
 8002c6c:	693b      	ldr	r3, [r7, #16]
 8002c6e:	4013      	ands	r3, r2
 8002c70:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	685a      	ldr	r2, [r3, #4]
 8002c76:	2380      	movs	r3, #128	@ 0x80
 8002c78:	035b      	lsls	r3, r3, #13
 8002c7a:	4013      	ands	r3, r2
 8002c7c:	d003      	beq.n	8002c86 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8002c7e:	693a      	ldr	r2, [r7, #16]
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	4313      	orrs	r3, r2
 8002c84:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002c86:	4b2a      	ldr	r3, [pc, #168]	@ (8002d30 <HAL_GPIO_Init+0x2b8>)
 8002c88:	693a      	ldr	r2, [r7, #16]
 8002c8a:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8002c8c:	4b28      	ldr	r3, [pc, #160]	@ (8002d30 <HAL_GPIO_Init+0x2b8>)
 8002c8e:	685b      	ldr	r3, [r3, #4]
 8002c90:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	43da      	mvns	r2, r3
 8002c96:	693b      	ldr	r3, [r7, #16]
 8002c98:	4013      	ands	r3, r2
 8002c9a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	685a      	ldr	r2, [r3, #4]
 8002ca0:	2380      	movs	r3, #128	@ 0x80
 8002ca2:	039b      	lsls	r3, r3, #14
 8002ca4:	4013      	ands	r3, r2
 8002ca6:	d003      	beq.n	8002cb0 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8002ca8:	693a      	ldr	r2, [r7, #16]
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	4313      	orrs	r3, r2
 8002cae:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002cb0:	4b1f      	ldr	r3, [pc, #124]	@ (8002d30 <HAL_GPIO_Init+0x2b8>)
 8002cb2:	693a      	ldr	r2, [r7, #16]
 8002cb4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002cb6:	4a1e      	ldr	r2, [pc, #120]	@ (8002d30 <HAL_GPIO_Init+0x2b8>)
 8002cb8:	2384      	movs	r3, #132	@ 0x84
 8002cba:	58d3      	ldr	r3, [r2, r3]
 8002cbc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	43da      	mvns	r2, r3
 8002cc2:	693b      	ldr	r3, [r7, #16]
 8002cc4:	4013      	ands	r3, r2
 8002cc6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	685a      	ldr	r2, [r3, #4]
 8002ccc:	2380      	movs	r3, #128	@ 0x80
 8002cce:	029b      	lsls	r3, r3, #10
 8002cd0:	4013      	ands	r3, r2
 8002cd2:	d003      	beq.n	8002cdc <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8002cd4:	693a      	ldr	r2, [r7, #16]
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	4313      	orrs	r3, r2
 8002cda:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002cdc:	4914      	ldr	r1, [pc, #80]	@ (8002d30 <HAL_GPIO_Init+0x2b8>)
 8002cde:	2284      	movs	r2, #132	@ 0x84
 8002ce0:	693b      	ldr	r3, [r7, #16]
 8002ce2:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8002ce4:	4a12      	ldr	r2, [pc, #72]	@ (8002d30 <HAL_GPIO_Init+0x2b8>)
 8002ce6:	2380      	movs	r3, #128	@ 0x80
 8002ce8:	58d3      	ldr	r3, [r2, r3]
 8002cea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	43da      	mvns	r2, r3
 8002cf0:	693b      	ldr	r3, [r7, #16]
 8002cf2:	4013      	ands	r3, r2
 8002cf4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	685a      	ldr	r2, [r3, #4]
 8002cfa:	2380      	movs	r3, #128	@ 0x80
 8002cfc:	025b      	lsls	r3, r3, #9
 8002cfe:	4013      	ands	r3, r2
 8002d00:	d003      	beq.n	8002d0a <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8002d02:	693a      	ldr	r2, [r7, #16]
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	4313      	orrs	r3, r2
 8002d08:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002d0a:	4909      	ldr	r1, [pc, #36]	@ (8002d30 <HAL_GPIO_Init+0x2b8>)
 8002d0c:	2280      	movs	r2, #128	@ 0x80
 8002d0e:	693b      	ldr	r3, [r7, #16]
 8002d10:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8002d12:	697b      	ldr	r3, [r7, #20]
 8002d14:	3301      	adds	r3, #1
 8002d16:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	681a      	ldr	r2, [r3, #0]
 8002d1c:	697b      	ldr	r3, [r7, #20]
 8002d1e:	40da      	lsrs	r2, r3
 8002d20:	1e13      	subs	r3, r2, #0
 8002d22:	d000      	beq.n	8002d26 <HAL_GPIO_Init+0x2ae>
 8002d24:	e6b0      	b.n	8002a88 <HAL_GPIO_Init+0x10>
  }
}
 8002d26:	46c0      	nop			@ (mov r8, r8)
 8002d28:	46c0      	nop			@ (mov r8, r8)
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	b006      	add	sp, #24
 8002d2e:	bd80      	pop	{r7, pc}
 8002d30:	40021800 	.word	0x40021800
 8002d34:	50000400 	.word	0x50000400
 8002d38:	50000800 	.word	0x50000800
 8002d3c:	50000c00 	.word	0x50000c00

08002d40 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b082      	sub	sp, #8
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
 8002d48:	0008      	movs	r0, r1
 8002d4a:	0011      	movs	r1, r2
 8002d4c:	1cbb      	adds	r3, r7, #2
 8002d4e:	1c02      	adds	r2, r0, #0
 8002d50:	801a      	strh	r2, [r3, #0]
 8002d52:	1c7b      	adds	r3, r7, #1
 8002d54:	1c0a      	adds	r2, r1, #0
 8002d56:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002d58:	1c7b      	adds	r3, r7, #1
 8002d5a:	781b      	ldrb	r3, [r3, #0]
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d004      	beq.n	8002d6a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002d60:	1cbb      	adds	r3, r7, #2
 8002d62:	881a      	ldrh	r2, [r3, #0]
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002d68:	e003      	b.n	8002d72 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002d6a:	1cbb      	adds	r3, r7, #2
 8002d6c:	881a      	ldrh	r2, [r3, #0]
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002d72:	46c0      	nop			@ (mov r8, r8)
 8002d74:	46bd      	mov	sp, r7
 8002d76:	b002      	add	sp, #8
 8002d78:	bd80      	pop	{r7, pc}

08002d7a <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002d7a:	b580      	push	{r7, lr}
 8002d7c:	b084      	sub	sp, #16
 8002d7e:	af00      	add	r7, sp, #0
 8002d80:	6078      	str	r0, [r7, #4]
 8002d82:	000a      	movs	r2, r1
 8002d84:	1cbb      	adds	r3, r7, #2
 8002d86:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	695b      	ldr	r3, [r3, #20]
 8002d8c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002d8e:	1cbb      	adds	r3, r7, #2
 8002d90:	881b      	ldrh	r3, [r3, #0]
 8002d92:	68fa      	ldr	r2, [r7, #12]
 8002d94:	4013      	ands	r3, r2
 8002d96:	041a      	lsls	r2, r3, #16
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	43db      	mvns	r3, r3
 8002d9c:	1cb9      	adds	r1, r7, #2
 8002d9e:	8809      	ldrh	r1, [r1, #0]
 8002da0:	400b      	ands	r3, r1
 8002da2:	431a      	orrs	r2, r3
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	619a      	str	r2, [r3, #24]
}
 8002da8:	46c0      	nop			@ (mov r8, r8)
 8002daa:	46bd      	mov	sp, r7
 8002dac:	b004      	add	sp, #16
 8002dae:	bd80      	pop	{r7, pc}

08002db0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b084      	sub	sp, #16
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8002db8:	4b19      	ldr	r3, [pc, #100]	@ (8002e20 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4a19      	ldr	r2, [pc, #100]	@ (8002e24 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8002dbe:	4013      	ands	r3, r2
 8002dc0:	0019      	movs	r1, r3
 8002dc2:	4b17      	ldr	r3, [pc, #92]	@ (8002e20 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002dc4:	687a      	ldr	r2, [r7, #4]
 8002dc6:	430a      	orrs	r2, r1
 8002dc8:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002dca:	687a      	ldr	r2, [r7, #4]
 8002dcc:	2380      	movs	r3, #128	@ 0x80
 8002dce:	009b      	lsls	r3, r3, #2
 8002dd0:	429a      	cmp	r2, r3
 8002dd2:	d11f      	bne.n	8002e14 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8002dd4:	4b14      	ldr	r3, [pc, #80]	@ (8002e28 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8002dd6:	681a      	ldr	r2, [r3, #0]
 8002dd8:	0013      	movs	r3, r2
 8002dda:	005b      	lsls	r3, r3, #1
 8002ddc:	189b      	adds	r3, r3, r2
 8002dde:	005b      	lsls	r3, r3, #1
 8002de0:	4912      	ldr	r1, [pc, #72]	@ (8002e2c <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8002de2:	0018      	movs	r0, r3
 8002de4:	f7fd f98e 	bl	8000104 <__udivsi3>
 8002de8:	0003      	movs	r3, r0
 8002dea:	3301      	adds	r3, #1
 8002dec:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002dee:	e008      	b.n	8002e02 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d003      	beq.n	8002dfe <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	3b01      	subs	r3, #1
 8002dfa:	60fb      	str	r3, [r7, #12]
 8002dfc:	e001      	b.n	8002e02 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8002dfe:	2303      	movs	r3, #3
 8002e00:	e009      	b.n	8002e16 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002e02:	4b07      	ldr	r3, [pc, #28]	@ (8002e20 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002e04:	695a      	ldr	r2, [r3, #20]
 8002e06:	2380      	movs	r3, #128	@ 0x80
 8002e08:	00db      	lsls	r3, r3, #3
 8002e0a:	401a      	ands	r2, r3
 8002e0c:	2380      	movs	r3, #128	@ 0x80
 8002e0e:	00db      	lsls	r3, r3, #3
 8002e10:	429a      	cmp	r2, r3
 8002e12:	d0ed      	beq.n	8002df0 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8002e14:	2300      	movs	r3, #0
}
 8002e16:	0018      	movs	r0, r3
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	b004      	add	sp, #16
 8002e1c:	bd80      	pop	{r7, pc}
 8002e1e:	46c0      	nop			@ (mov r8, r8)
 8002e20:	40007000 	.word	0x40007000
 8002e24:	fffff9ff 	.word	0xfffff9ff
 8002e28:	20000008 	.word	0x20000008
 8002e2c:	000f4240 	.word	0x000f4240

08002e30 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b088      	sub	sp, #32
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d101      	bne.n	8002e42 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002e3e:	2301      	movs	r3, #1
 8002e40:	e2fe      	b.n	8003440 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	2201      	movs	r2, #1
 8002e48:	4013      	ands	r3, r2
 8002e4a:	d100      	bne.n	8002e4e <HAL_RCC_OscConfig+0x1e>
 8002e4c:	e07c      	b.n	8002f48 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002e4e:	4bc3      	ldr	r3, [pc, #780]	@ (800315c <HAL_RCC_OscConfig+0x32c>)
 8002e50:	689b      	ldr	r3, [r3, #8]
 8002e52:	2238      	movs	r2, #56	@ 0x38
 8002e54:	4013      	ands	r3, r2
 8002e56:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002e58:	4bc0      	ldr	r3, [pc, #768]	@ (800315c <HAL_RCC_OscConfig+0x32c>)
 8002e5a:	68db      	ldr	r3, [r3, #12]
 8002e5c:	2203      	movs	r2, #3
 8002e5e:	4013      	ands	r3, r2
 8002e60:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8002e62:	69bb      	ldr	r3, [r7, #24]
 8002e64:	2b10      	cmp	r3, #16
 8002e66:	d102      	bne.n	8002e6e <HAL_RCC_OscConfig+0x3e>
 8002e68:	697b      	ldr	r3, [r7, #20]
 8002e6a:	2b03      	cmp	r3, #3
 8002e6c:	d002      	beq.n	8002e74 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8002e6e:	69bb      	ldr	r3, [r7, #24]
 8002e70:	2b08      	cmp	r3, #8
 8002e72:	d10b      	bne.n	8002e8c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e74:	4bb9      	ldr	r3, [pc, #740]	@ (800315c <HAL_RCC_OscConfig+0x32c>)
 8002e76:	681a      	ldr	r2, [r3, #0]
 8002e78:	2380      	movs	r3, #128	@ 0x80
 8002e7a:	029b      	lsls	r3, r3, #10
 8002e7c:	4013      	ands	r3, r2
 8002e7e:	d062      	beq.n	8002f46 <HAL_RCC_OscConfig+0x116>
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	685b      	ldr	r3, [r3, #4]
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d15e      	bne.n	8002f46 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8002e88:	2301      	movs	r3, #1
 8002e8a:	e2d9      	b.n	8003440 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	685a      	ldr	r2, [r3, #4]
 8002e90:	2380      	movs	r3, #128	@ 0x80
 8002e92:	025b      	lsls	r3, r3, #9
 8002e94:	429a      	cmp	r2, r3
 8002e96:	d107      	bne.n	8002ea8 <HAL_RCC_OscConfig+0x78>
 8002e98:	4bb0      	ldr	r3, [pc, #704]	@ (800315c <HAL_RCC_OscConfig+0x32c>)
 8002e9a:	681a      	ldr	r2, [r3, #0]
 8002e9c:	4baf      	ldr	r3, [pc, #700]	@ (800315c <HAL_RCC_OscConfig+0x32c>)
 8002e9e:	2180      	movs	r1, #128	@ 0x80
 8002ea0:	0249      	lsls	r1, r1, #9
 8002ea2:	430a      	orrs	r2, r1
 8002ea4:	601a      	str	r2, [r3, #0]
 8002ea6:	e020      	b.n	8002eea <HAL_RCC_OscConfig+0xba>
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	685a      	ldr	r2, [r3, #4]
 8002eac:	23a0      	movs	r3, #160	@ 0xa0
 8002eae:	02db      	lsls	r3, r3, #11
 8002eb0:	429a      	cmp	r2, r3
 8002eb2:	d10e      	bne.n	8002ed2 <HAL_RCC_OscConfig+0xa2>
 8002eb4:	4ba9      	ldr	r3, [pc, #676]	@ (800315c <HAL_RCC_OscConfig+0x32c>)
 8002eb6:	681a      	ldr	r2, [r3, #0]
 8002eb8:	4ba8      	ldr	r3, [pc, #672]	@ (800315c <HAL_RCC_OscConfig+0x32c>)
 8002eba:	2180      	movs	r1, #128	@ 0x80
 8002ebc:	02c9      	lsls	r1, r1, #11
 8002ebe:	430a      	orrs	r2, r1
 8002ec0:	601a      	str	r2, [r3, #0]
 8002ec2:	4ba6      	ldr	r3, [pc, #664]	@ (800315c <HAL_RCC_OscConfig+0x32c>)
 8002ec4:	681a      	ldr	r2, [r3, #0]
 8002ec6:	4ba5      	ldr	r3, [pc, #660]	@ (800315c <HAL_RCC_OscConfig+0x32c>)
 8002ec8:	2180      	movs	r1, #128	@ 0x80
 8002eca:	0249      	lsls	r1, r1, #9
 8002ecc:	430a      	orrs	r2, r1
 8002ece:	601a      	str	r2, [r3, #0]
 8002ed0:	e00b      	b.n	8002eea <HAL_RCC_OscConfig+0xba>
 8002ed2:	4ba2      	ldr	r3, [pc, #648]	@ (800315c <HAL_RCC_OscConfig+0x32c>)
 8002ed4:	681a      	ldr	r2, [r3, #0]
 8002ed6:	4ba1      	ldr	r3, [pc, #644]	@ (800315c <HAL_RCC_OscConfig+0x32c>)
 8002ed8:	49a1      	ldr	r1, [pc, #644]	@ (8003160 <HAL_RCC_OscConfig+0x330>)
 8002eda:	400a      	ands	r2, r1
 8002edc:	601a      	str	r2, [r3, #0]
 8002ede:	4b9f      	ldr	r3, [pc, #636]	@ (800315c <HAL_RCC_OscConfig+0x32c>)
 8002ee0:	681a      	ldr	r2, [r3, #0]
 8002ee2:	4b9e      	ldr	r3, [pc, #632]	@ (800315c <HAL_RCC_OscConfig+0x32c>)
 8002ee4:	499f      	ldr	r1, [pc, #636]	@ (8003164 <HAL_RCC_OscConfig+0x334>)
 8002ee6:	400a      	ands	r2, r1
 8002ee8:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	685b      	ldr	r3, [r3, #4]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d014      	beq.n	8002f1c <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ef2:	f7ff f975 	bl	80021e0 <HAL_GetTick>
 8002ef6:	0003      	movs	r3, r0
 8002ef8:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002efa:	e008      	b.n	8002f0e <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002efc:	f7ff f970 	bl	80021e0 <HAL_GetTick>
 8002f00:	0002      	movs	r2, r0
 8002f02:	693b      	ldr	r3, [r7, #16]
 8002f04:	1ad3      	subs	r3, r2, r3
 8002f06:	2b64      	cmp	r3, #100	@ 0x64
 8002f08:	d901      	bls.n	8002f0e <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8002f0a:	2303      	movs	r3, #3
 8002f0c:	e298      	b.n	8003440 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002f0e:	4b93      	ldr	r3, [pc, #588]	@ (800315c <HAL_RCC_OscConfig+0x32c>)
 8002f10:	681a      	ldr	r2, [r3, #0]
 8002f12:	2380      	movs	r3, #128	@ 0x80
 8002f14:	029b      	lsls	r3, r3, #10
 8002f16:	4013      	ands	r3, r2
 8002f18:	d0f0      	beq.n	8002efc <HAL_RCC_OscConfig+0xcc>
 8002f1a:	e015      	b.n	8002f48 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f1c:	f7ff f960 	bl	80021e0 <HAL_GetTick>
 8002f20:	0003      	movs	r3, r0
 8002f22:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002f24:	e008      	b.n	8002f38 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f26:	f7ff f95b 	bl	80021e0 <HAL_GetTick>
 8002f2a:	0002      	movs	r2, r0
 8002f2c:	693b      	ldr	r3, [r7, #16]
 8002f2e:	1ad3      	subs	r3, r2, r3
 8002f30:	2b64      	cmp	r3, #100	@ 0x64
 8002f32:	d901      	bls.n	8002f38 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002f34:	2303      	movs	r3, #3
 8002f36:	e283      	b.n	8003440 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002f38:	4b88      	ldr	r3, [pc, #544]	@ (800315c <HAL_RCC_OscConfig+0x32c>)
 8002f3a:	681a      	ldr	r2, [r3, #0]
 8002f3c:	2380      	movs	r3, #128	@ 0x80
 8002f3e:	029b      	lsls	r3, r3, #10
 8002f40:	4013      	ands	r3, r2
 8002f42:	d1f0      	bne.n	8002f26 <HAL_RCC_OscConfig+0xf6>
 8002f44:	e000      	b.n	8002f48 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f46:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	2202      	movs	r2, #2
 8002f4e:	4013      	ands	r3, r2
 8002f50:	d100      	bne.n	8002f54 <HAL_RCC_OscConfig+0x124>
 8002f52:	e099      	b.n	8003088 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f54:	4b81      	ldr	r3, [pc, #516]	@ (800315c <HAL_RCC_OscConfig+0x32c>)
 8002f56:	689b      	ldr	r3, [r3, #8]
 8002f58:	2238      	movs	r2, #56	@ 0x38
 8002f5a:	4013      	ands	r3, r2
 8002f5c:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002f5e:	4b7f      	ldr	r3, [pc, #508]	@ (800315c <HAL_RCC_OscConfig+0x32c>)
 8002f60:	68db      	ldr	r3, [r3, #12]
 8002f62:	2203      	movs	r2, #3
 8002f64:	4013      	ands	r3, r2
 8002f66:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8002f68:	69bb      	ldr	r3, [r7, #24]
 8002f6a:	2b10      	cmp	r3, #16
 8002f6c:	d102      	bne.n	8002f74 <HAL_RCC_OscConfig+0x144>
 8002f6e:	697b      	ldr	r3, [r7, #20]
 8002f70:	2b02      	cmp	r3, #2
 8002f72:	d002      	beq.n	8002f7a <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8002f74:	69bb      	ldr	r3, [r7, #24]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d135      	bne.n	8002fe6 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002f7a:	4b78      	ldr	r3, [pc, #480]	@ (800315c <HAL_RCC_OscConfig+0x32c>)
 8002f7c:	681a      	ldr	r2, [r3, #0]
 8002f7e:	2380      	movs	r3, #128	@ 0x80
 8002f80:	00db      	lsls	r3, r3, #3
 8002f82:	4013      	ands	r3, r2
 8002f84:	d005      	beq.n	8002f92 <HAL_RCC_OscConfig+0x162>
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	68db      	ldr	r3, [r3, #12]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d101      	bne.n	8002f92 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8002f8e:	2301      	movs	r3, #1
 8002f90:	e256      	b.n	8003440 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f92:	4b72      	ldr	r3, [pc, #456]	@ (800315c <HAL_RCC_OscConfig+0x32c>)
 8002f94:	685b      	ldr	r3, [r3, #4]
 8002f96:	4a74      	ldr	r2, [pc, #464]	@ (8003168 <HAL_RCC_OscConfig+0x338>)
 8002f98:	4013      	ands	r3, r2
 8002f9a:	0019      	movs	r1, r3
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	695b      	ldr	r3, [r3, #20]
 8002fa0:	021a      	lsls	r2, r3, #8
 8002fa2:	4b6e      	ldr	r3, [pc, #440]	@ (800315c <HAL_RCC_OscConfig+0x32c>)
 8002fa4:	430a      	orrs	r2, r1
 8002fa6:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002fa8:	69bb      	ldr	r3, [r7, #24]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d112      	bne.n	8002fd4 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002fae:	4b6b      	ldr	r3, [pc, #428]	@ (800315c <HAL_RCC_OscConfig+0x32c>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	4a6e      	ldr	r2, [pc, #440]	@ (800316c <HAL_RCC_OscConfig+0x33c>)
 8002fb4:	4013      	ands	r3, r2
 8002fb6:	0019      	movs	r1, r3
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	691a      	ldr	r2, [r3, #16]
 8002fbc:	4b67      	ldr	r3, [pc, #412]	@ (800315c <HAL_RCC_OscConfig+0x32c>)
 8002fbe:	430a      	orrs	r2, r1
 8002fc0:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8002fc2:	4b66      	ldr	r3, [pc, #408]	@ (800315c <HAL_RCC_OscConfig+0x32c>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	0adb      	lsrs	r3, r3, #11
 8002fc8:	2207      	movs	r2, #7
 8002fca:	4013      	ands	r3, r2
 8002fcc:	4a68      	ldr	r2, [pc, #416]	@ (8003170 <HAL_RCC_OscConfig+0x340>)
 8002fce:	40da      	lsrs	r2, r3
 8002fd0:	4b68      	ldr	r3, [pc, #416]	@ (8003174 <HAL_RCC_OscConfig+0x344>)
 8002fd2:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002fd4:	4b68      	ldr	r3, [pc, #416]	@ (8003178 <HAL_RCC_OscConfig+0x348>)
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	0018      	movs	r0, r3
 8002fda:	f7ff f8a5 	bl	8002128 <HAL_InitTick>
 8002fde:	1e03      	subs	r3, r0, #0
 8002fe0:	d051      	beq.n	8003086 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	e22c      	b.n	8003440 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	68db      	ldr	r3, [r3, #12]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d030      	beq.n	8003050 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002fee:	4b5b      	ldr	r3, [pc, #364]	@ (800315c <HAL_RCC_OscConfig+0x32c>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	4a5e      	ldr	r2, [pc, #376]	@ (800316c <HAL_RCC_OscConfig+0x33c>)
 8002ff4:	4013      	ands	r3, r2
 8002ff6:	0019      	movs	r1, r3
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	691a      	ldr	r2, [r3, #16]
 8002ffc:	4b57      	ldr	r3, [pc, #348]	@ (800315c <HAL_RCC_OscConfig+0x32c>)
 8002ffe:	430a      	orrs	r2, r1
 8003000:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8003002:	4b56      	ldr	r3, [pc, #344]	@ (800315c <HAL_RCC_OscConfig+0x32c>)
 8003004:	681a      	ldr	r2, [r3, #0]
 8003006:	4b55      	ldr	r3, [pc, #340]	@ (800315c <HAL_RCC_OscConfig+0x32c>)
 8003008:	2180      	movs	r1, #128	@ 0x80
 800300a:	0049      	lsls	r1, r1, #1
 800300c:	430a      	orrs	r2, r1
 800300e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003010:	f7ff f8e6 	bl	80021e0 <HAL_GetTick>
 8003014:	0003      	movs	r3, r0
 8003016:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003018:	e008      	b.n	800302c <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800301a:	f7ff f8e1 	bl	80021e0 <HAL_GetTick>
 800301e:	0002      	movs	r2, r0
 8003020:	693b      	ldr	r3, [r7, #16]
 8003022:	1ad3      	subs	r3, r2, r3
 8003024:	2b02      	cmp	r3, #2
 8003026:	d901      	bls.n	800302c <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8003028:	2303      	movs	r3, #3
 800302a:	e209      	b.n	8003440 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800302c:	4b4b      	ldr	r3, [pc, #300]	@ (800315c <HAL_RCC_OscConfig+0x32c>)
 800302e:	681a      	ldr	r2, [r3, #0]
 8003030:	2380      	movs	r3, #128	@ 0x80
 8003032:	00db      	lsls	r3, r3, #3
 8003034:	4013      	ands	r3, r2
 8003036:	d0f0      	beq.n	800301a <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003038:	4b48      	ldr	r3, [pc, #288]	@ (800315c <HAL_RCC_OscConfig+0x32c>)
 800303a:	685b      	ldr	r3, [r3, #4]
 800303c:	4a4a      	ldr	r2, [pc, #296]	@ (8003168 <HAL_RCC_OscConfig+0x338>)
 800303e:	4013      	ands	r3, r2
 8003040:	0019      	movs	r1, r3
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	695b      	ldr	r3, [r3, #20]
 8003046:	021a      	lsls	r2, r3, #8
 8003048:	4b44      	ldr	r3, [pc, #272]	@ (800315c <HAL_RCC_OscConfig+0x32c>)
 800304a:	430a      	orrs	r2, r1
 800304c:	605a      	str	r2, [r3, #4]
 800304e:	e01b      	b.n	8003088 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8003050:	4b42      	ldr	r3, [pc, #264]	@ (800315c <HAL_RCC_OscConfig+0x32c>)
 8003052:	681a      	ldr	r2, [r3, #0]
 8003054:	4b41      	ldr	r3, [pc, #260]	@ (800315c <HAL_RCC_OscConfig+0x32c>)
 8003056:	4949      	ldr	r1, [pc, #292]	@ (800317c <HAL_RCC_OscConfig+0x34c>)
 8003058:	400a      	ands	r2, r1
 800305a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800305c:	f7ff f8c0 	bl	80021e0 <HAL_GetTick>
 8003060:	0003      	movs	r3, r0
 8003062:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003064:	e008      	b.n	8003078 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003066:	f7ff f8bb 	bl	80021e0 <HAL_GetTick>
 800306a:	0002      	movs	r2, r0
 800306c:	693b      	ldr	r3, [r7, #16]
 800306e:	1ad3      	subs	r3, r2, r3
 8003070:	2b02      	cmp	r3, #2
 8003072:	d901      	bls.n	8003078 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8003074:	2303      	movs	r3, #3
 8003076:	e1e3      	b.n	8003440 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003078:	4b38      	ldr	r3, [pc, #224]	@ (800315c <HAL_RCC_OscConfig+0x32c>)
 800307a:	681a      	ldr	r2, [r3, #0]
 800307c:	2380      	movs	r3, #128	@ 0x80
 800307e:	00db      	lsls	r3, r3, #3
 8003080:	4013      	ands	r3, r2
 8003082:	d1f0      	bne.n	8003066 <HAL_RCC_OscConfig+0x236>
 8003084:	e000      	b.n	8003088 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003086:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	2208      	movs	r2, #8
 800308e:	4013      	ands	r3, r2
 8003090:	d047      	beq.n	8003122 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8003092:	4b32      	ldr	r3, [pc, #200]	@ (800315c <HAL_RCC_OscConfig+0x32c>)
 8003094:	689b      	ldr	r3, [r3, #8]
 8003096:	2238      	movs	r2, #56	@ 0x38
 8003098:	4013      	ands	r3, r2
 800309a:	2b18      	cmp	r3, #24
 800309c:	d10a      	bne.n	80030b4 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 800309e:	4b2f      	ldr	r3, [pc, #188]	@ (800315c <HAL_RCC_OscConfig+0x32c>)
 80030a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80030a2:	2202      	movs	r2, #2
 80030a4:	4013      	ands	r3, r2
 80030a6:	d03c      	beq.n	8003122 <HAL_RCC_OscConfig+0x2f2>
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	699b      	ldr	r3, [r3, #24]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d138      	bne.n	8003122 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 80030b0:	2301      	movs	r3, #1
 80030b2:	e1c5      	b.n	8003440 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	699b      	ldr	r3, [r3, #24]
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d019      	beq.n	80030f0 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80030bc:	4b27      	ldr	r3, [pc, #156]	@ (800315c <HAL_RCC_OscConfig+0x32c>)
 80030be:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80030c0:	4b26      	ldr	r3, [pc, #152]	@ (800315c <HAL_RCC_OscConfig+0x32c>)
 80030c2:	2101      	movs	r1, #1
 80030c4:	430a      	orrs	r2, r1
 80030c6:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030c8:	f7ff f88a 	bl	80021e0 <HAL_GetTick>
 80030cc:	0003      	movs	r3, r0
 80030ce:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80030d0:	e008      	b.n	80030e4 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80030d2:	f7ff f885 	bl	80021e0 <HAL_GetTick>
 80030d6:	0002      	movs	r2, r0
 80030d8:	693b      	ldr	r3, [r7, #16]
 80030da:	1ad3      	subs	r3, r2, r3
 80030dc:	2b02      	cmp	r3, #2
 80030de:	d901      	bls.n	80030e4 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80030e0:	2303      	movs	r3, #3
 80030e2:	e1ad      	b.n	8003440 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80030e4:	4b1d      	ldr	r3, [pc, #116]	@ (800315c <HAL_RCC_OscConfig+0x32c>)
 80030e6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80030e8:	2202      	movs	r2, #2
 80030ea:	4013      	ands	r3, r2
 80030ec:	d0f1      	beq.n	80030d2 <HAL_RCC_OscConfig+0x2a2>
 80030ee:	e018      	b.n	8003122 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80030f0:	4b1a      	ldr	r3, [pc, #104]	@ (800315c <HAL_RCC_OscConfig+0x32c>)
 80030f2:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80030f4:	4b19      	ldr	r3, [pc, #100]	@ (800315c <HAL_RCC_OscConfig+0x32c>)
 80030f6:	2101      	movs	r1, #1
 80030f8:	438a      	bics	r2, r1
 80030fa:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030fc:	f7ff f870 	bl	80021e0 <HAL_GetTick>
 8003100:	0003      	movs	r3, r0
 8003102:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003104:	e008      	b.n	8003118 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003106:	f7ff f86b 	bl	80021e0 <HAL_GetTick>
 800310a:	0002      	movs	r2, r0
 800310c:	693b      	ldr	r3, [r7, #16]
 800310e:	1ad3      	subs	r3, r2, r3
 8003110:	2b02      	cmp	r3, #2
 8003112:	d901      	bls.n	8003118 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8003114:	2303      	movs	r3, #3
 8003116:	e193      	b.n	8003440 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003118:	4b10      	ldr	r3, [pc, #64]	@ (800315c <HAL_RCC_OscConfig+0x32c>)
 800311a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800311c:	2202      	movs	r2, #2
 800311e:	4013      	ands	r3, r2
 8003120:	d1f1      	bne.n	8003106 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	2204      	movs	r2, #4
 8003128:	4013      	ands	r3, r2
 800312a:	d100      	bne.n	800312e <HAL_RCC_OscConfig+0x2fe>
 800312c:	e0c6      	b.n	80032bc <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800312e:	231f      	movs	r3, #31
 8003130:	18fb      	adds	r3, r7, r3
 8003132:	2200      	movs	r2, #0
 8003134:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8003136:	4b09      	ldr	r3, [pc, #36]	@ (800315c <HAL_RCC_OscConfig+0x32c>)
 8003138:	689b      	ldr	r3, [r3, #8]
 800313a:	2238      	movs	r2, #56	@ 0x38
 800313c:	4013      	ands	r3, r2
 800313e:	2b20      	cmp	r3, #32
 8003140:	d11e      	bne.n	8003180 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8003142:	4b06      	ldr	r3, [pc, #24]	@ (800315c <HAL_RCC_OscConfig+0x32c>)
 8003144:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003146:	2202      	movs	r2, #2
 8003148:	4013      	ands	r3, r2
 800314a:	d100      	bne.n	800314e <HAL_RCC_OscConfig+0x31e>
 800314c:	e0b6      	b.n	80032bc <HAL_RCC_OscConfig+0x48c>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	689b      	ldr	r3, [r3, #8]
 8003152:	2b00      	cmp	r3, #0
 8003154:	d000      	beq.n	8003158 <HAL_RCC_OscConfig+0x328>
 8003156:	e0b1      	b.n	80032bc <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8003158:	2301      	movs	r3, #1
 800315a:	e171      	b.n	8003440 <HAL_RCC_OscConfig+0x610>
 800315c:	40021000 	.word	0x40021000
 8003160:	fffeffff 	.word	0xfffeffff
 8003164:	fffbffff 	.word	0xfffbffff
 8003168:	ffff80ff 	.word	0xffff80ff
 800316c:	ffffc7ff 	.word	0xffffc7ff
 8003170:	00f42400 	.word	0x00f42400
 8003174:	20000008 	.word	0x20000008
 8003178:	2000000c 	.word	0x2000000c
 800317c:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003180:	4bb1      	ldr	r3, [pc, #708]	@ (8003448 <HAL_RCC_OscConfig+0x618>)
 8003182:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003184:	2380      	movs	r3, #128	@ 0x80
 8003186:	055b      	lsls	r3, r3, #21
 8003188:	4013      	ands	r3, r2
 800318a:	d101      	bne.n	8003190 <HAL_RCC_OscConfig+0x360>
 800318c:	2301      	movs	r3, #1
 800318e:	e000      	b.n	8003192 <HAL_RCC_OscConfig+0x362>
 8003190:	2300      	movs	r3, #0
 8003192:	2b00      	cmp	r3, #0
 8003194:	d011      	beq.n	80031ba <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8003196:	4bac      	ldr	r3, [pc, #688]	@ (8003448 <HAL_RCC_OscConfig+0x618>)
 8003198:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800319a:	4bab      	ldr	r3, [pc, #684]	@ (8003448 <HAL_RCC_OscConfig+0x618>)
 800319c:	2180      	movs	r1, #128	@ 0x80
 800319e:	0549      	lsls	r1, r1, #21
 80031a0:	430a      	orrs	r2, r1
 80031a2:	63da      	str	r2, [r3, #60]	@ 0x3c
 80031a4:	4ba8      	ldr	r3, [pc, #672]	@ (8003448 <HAL_RCC_OscConfig+0x618>)
 80031a6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80031a8:	2380      	movs	r3, #128	@ 0x80
 80031aa:	055b      	lsls	r3, r3, #21
 80031ac:	4013      	ands	r3, r2
 80031ae:	60fb      	str	r3, [r7, #12]
 80031b0:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80031b2:	231f      	movs	r3, #31
 80031b4:	18fb      	adds	r3, r7, r3
 80031b6:	2201      	movs	r2, #1
 80031b8:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80031ba:	4ba4      	ldr	r3, [pc, #656]	@ (800344c <HAL_RCC_OscConfig+0x61c>)
 80031bc:	681a      	ldr	r2, [r3, #0]
 80031be:	2380      	movs	r3, #128	@ 0x80
 80031c0:	005b      	lsls	r3, r3, #1
 80031c2:	4013      	ands	r3, r2
 80031c4:	d11a      	bne.n	80031fc <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80031c6:	4ba1      	ldr	r3, [pc, #644]	@ (800344c <HAL_RCC_OscConfig+0x61c>)
 80031c8:	681a      	ldr	r2, [r3, #0]
 80031ca:	4ba0      	ldr	r3, [pc, #640]	@ (800344c <HAL_RCC_OscConfig+0x61c>)
 80031cc:	2180      	movs	r1, #128	@ 0x80
 80031ce:	0049      	lsls	r1, r1, #1
 80031d0:	430a      	orrs	r2, r1
 80031d2:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80031d4:	f7ff f804 	bl	80021e0 <HAL_GetTick>
 80031d8:	0003      	movs	r3, r0
 80031da:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80031dc:	e008      	b.n	80031f0 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031de:	f7fe ffff 	bl	80021e0 <HAL_GetTick>
 80031e2:	0002      	movs	r2, r0
 80031e4:	693b      	ldr	r3, [r7, #16]
 80031e6:	1ad3      	subs	r3, r2, r3
 80031e8:	2b02      	cmp	r3, #2
 80031ea:	d901      	bls.n	80031f0 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 80031ec:	2303      	movs	r3, #3
 80031ee:	e127      	b.n	8003440 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80031f0:	4b96      	ldr	r3, [pc, #600]	@ (800344c <HAL_RCC_OscConfig+0x61c>)
 80031f2:	681a      	ldr	r2, [r3, #0]
 80031f4:	2380      	movs	r3, #128	@ 0x80
 80031f6:	005b      	lsls	r3, r3, #1
 80031f8:	4013      	ands	r3, r2
 80031fa:	d0f0      	beq.n	80031de <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	689b      	ldr	r3, [r3, #8]
 8003200:	2b01      	cmp	r3, #1
 8003202:	d106      	bne.n	8003212 <HAL_RCC_OscConfig+0x3e2>
 8003204:	4b90      	ldr	r3, [pc, #576]	@ (8003448 <HAL_RCC_OscConfig+0x618>)
 8003206:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003208:	4b8f      	ldr	r3, [pc, #572]	@ (8003448 <HAL_RCC_OscConfig+0x618>)
 800320a:	2101      	movs	r1, #1
 800320c:	430a      	orrs	r2, r1
 800320e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003210:	e01c      	b.n	800324c <HAL_RCC_OscConfig+0x41c>
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	689b      	ldr	r3, [r3, #8]
 8003216:	2b05      	cmp	r3, #5
 8003218:	d10c      	bne.n	8003234 <HAL_RCC_OscConfig+0x404>
 800321a:	4b8b      	ldr	r3, [pc, #556]	@ (8003448 <HAL_RCC_OscConfig+0x618>)
 800321c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800321e:	4b8a      	ldr	r3, [pc, #552]	@ (8003448 <HAL_RCC_OscConfig+0x618>)
 8003220:	2104      	movs	r1, #4
 8003222:	430a      	orrs	r2, r1
 8003224:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003226:	4b88      	ldr	r3, [pc, #544]	@ (8003448 <HAL_RCC_OscConfig+0x618>)
 8003228:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800322a:	4b87      	ldr	r3, [pc, #540]	@ (8003448 <HAL_RCC_OscConfig+0x618>)
 800322c:	2101      	movs	r1, #1
 800322e:	430a      	orrs	r2, r1
 8003230:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003232:	e00b      	b.n	800324c <HAL_RCC_OscConfig+0x41c>
 8003234:	4b84      	ldr	r3, [pc, #528]	@ (8003448 <HAL_RCC_OscConfig+0x618>)
 8003236:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003238:	4b83      	ldr	r3, [pc, #524]	@ (8003448 <HAL_RCC_OscConfig+0x618>)
 800323a:	2101      	movs	r1, #1
 800323c:	438a      	bics	r2, r1
 800323e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003240:	4b81      	ldr	r3, [pc, #516]	@ (8003448 <HAL_RCC_OscConfig+0x618>)
 8003242:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003244:	4b80      	ldr	r3, [pc, #512]	@ (8003448 <HAL_RCC_OscConfig+0x618>)
 8003246:	2104      	movs	r1, #4
 8003248:	438a      	bics	r2, r1
 800324a:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	689b      	ldr	r3, [r3, #8]
 8003250:	2b00      	cmp	r3, #0
 8003252:	d014      	beq.n	800327e <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003254:	f7fe ffc4 	bl	80021e0 <HAL_GetTick>
 8003258:	0003      	movs	r3, r0
 800325a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800325c:	e009      	b.n	8003272 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800325e:	f7fe ffbf 	bl	80021e0 <HAL_GetTick>
 8003262:	0002      	movs	r2, r0
 8003264:	693b      	ldr	r3, [r7, #16]
 8003266:	1ad3      	subs	r3, r2, r3
 8003268:	4a79      	ldr	r2, [pc, #484]	@ (8003450 <HAL_RCC_OscConfig+0x620>)
 800326a:	4293      	cmp	r3, r2
 800326c:	d901      	bls.n	8003272 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 800326e:	2303      	movs	r3, #3
 8003270:	e0e6      	b.n	8003440 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003272:	4b75      	ldr	r3, [pc, #468]	@ (8003448 <HAL_RCC_OscConfig+0x618>)
 8003274:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003276:	2202      	movs	r2, #2
 8003278:	4013      	ands	r3, r2
 800327a:	d0f0      	beq.n	800325e <HAL_RCC_OscConfig+0x42e>
 800327c:	e013      	b.n	80032a6 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800327e:	f7fe ffaf 	bl	80021e0 <HAL_GetTick>
 8003282:	0003      	movs	r3, r0
 8003284:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003286:	e009      	b.n	800329c <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003288:	f7fe ffaa 	bl	80021e0 <HAL_GetTick>
 800328c:	0002      	movs	r2, r0
 800328e:	693b      	ldr	r3, [r7, #16]
 8003290:	1ad3      	subs	r3, r2, r3
 8003292:	4a6f      	ldr	r2, [pc, #444]	@ (8003450 <HAL_RCC_OscConfig+0x620>)
 8003294:	4293      	cmp	r3, r2
 8003296:	d901      	bls.n	800329c <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8003298:	2303      	movs	r3, #3
 800329a:	e0d1      	b.n	8003440 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800329c:	4b6a      	ldr	r3, [pc, #424]	@ (8003448 <HAL_RCC_OscConfig+0x618>)
 800329e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032a0:	2202      	movs	r2, #2
 80032a2:	4013      	ands	r3, r2
 80032a4:	d1f0      	bne.n	8003288 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80032a6:	231f      	movs	r3, #31
 80032a8:	18fb      	adds	r3, r7, r3
 80032aa:	781b      	ldrb	r3, [r3, #0]
 80032ac:	2b01      	cmp	r3, #1
 80032ae:	d105      	bne.n	80032bc <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80032b0:	4b65      	ldr	r3, [pc, #404]	@ (8003448 <HAL_RCC_OscConfig+0x618>)
 80032b2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80032b4:	4b64      	ldr	r3, [pc, #400]	@ (8003448 <HAL_RCC_OscConfig+0x618>)
 80032b6:	4967      	ldr	r1, [pc, #412]	@ (8003454 <HAL_RCC_OscConfig+0x624>)
 80032b8:	400a      	ands	r2, r1
 80032ba:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	69db      	ldr	r3, [r3, #28]
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d100      	bne.n	80032c6 <HAL_RCC_OscConfig+0x496>
 80032c4:	e0bb      	b.n	800343e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80032c6:	4b60      	ldr	r3, [pc, #384]	@ (8003448 <HAL_RCC_OscConfig+0x618>)
 80032c8:	689b      	ldr	r3, [r3, #8]
 80032ca:	2238      	movs	r2, #56	@ 0x38
 80032cc:	4013      	ands	r3, r2
 80032ce:	2b10      	cmp	r3, #16
 80032d0:	d100      	bne.n	80032d4 <HAL_RCC_OscConfig+0x4a4>
 80032d2:	e07b      	b.n	80033cc <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	69db      	ldr	r3, [r3, #28]
 80032d8:	2b02      	cmp	r3, #2
 80032da:	d156      	bne.n	800338a <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032dc:	4b5a      	ldr	r3, [pc, #360]	@ (8003448 <HAL_RCC_OscConfig+0x618>)
 80032de:	681a      	ldr	r2, [r3, #0]
 80032e0:	4b59      	ldr	r3, [pc, #356]	@ (8003448 <HAL_RCC_OscConfig+0x618>)
 80032e2:	495d      	ldr	r1, [pc, #372]	@ (8003458 <HAL_RCC_OscConfig+0x628>)
 80032e4:	400a      	ands	r2, r1
 80032e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032e8:	f7fe ff7a 	bl	80021e0 <HAL_GetTick>
 80032ec:	0003      	movs	r3, r0
 80032ee:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80032f0:	e008      	b.n	8003304 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032f2:	f7fe ff75 	bl	80021e0 <HAL_GetTick>
 80032f6:	0002      	movs	r2, r0
 80032f8:	693b      	ldr	r3, [r7, #16]
 80032fa:	1ad3      	subs	r3, r2, r3
 80032fc:	2b02      	cmp	r3, #2
 80032fe:	d901      	bls.n	8003304 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8003300:	2303      	movs	r3, #3
 8003302:	e09d      	b.n	8003440 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003304:	4b50      	ldr	r3, [pc, #320]	@ (8003448 <HAL_RCC_OscConfig+0x618>)
 8003306:	681a      	ldr	r2, [r3, #0]
 8003308:	2380      	movs	r3, #128	@ 0x80
 800330a:	049b      	lsls	r3, r3, #18
 800330c:	4013      	ands	r3, r2
 800330e:	d1f0      	bne.n	80032f2 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003310:	4b4d      	ldr	r3, [pc, #308]	@ (8003448 <HAL_RCC_OscConfig+0x618>)
 8003312:	68db      	ldr	r3, [r3, #12]
 8003314:	4a51      	ldr	r2, [pc, #324]	@ (800345c <HAL_RCC_OscConfig+0x62c>)
 8003316:	4013      	ands	r3, r2
 8003318:	0019      	movs	r1, r3
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6a1a      	ldr	r2, [r3, #32]
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003322:	431a      	orrs	r2, r3
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003328:	021b      	lsls	r3, r3, #8
 800332a:	431a      	orrs	r2, r3
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003330:	431a      	orrs	r2, r3
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003336:	431a      	orrs	r2, r3
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800333c:	431a      	orrs	r2, r3
 800333e:	4b42      	ldr	r3, [pc, #264]	@ (8003448 <HAL_RCC_OscConfig+0x618>)
 8003340:	430a      	orrs	r2, r1
 8003342:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003344:	4b40      	ldr	r3, [pc, #256]	@ (8003448 <HAL_RCC_OscConfig+0x618>)
 8003346:	681a      	ldr	r2, [r3, #0]
 8003348:	4b3f      	ldr	r3, [pc, #252]	@ (8003448 <HAL_RCC_OscConfig+0x618>)
 800334a:	2180      	movs	r1, #128	@ 0x80
 800334c:	0449      	lsls	r1, r1, #17
 800334e:	430a      	orrs	r2, r1
 8003350:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8003352:	4b3d      	ldr	r3, [pc, #244]	@ (8003448 <HAL_RCC_OscConfig+0x618>)
 8003354:	68da      	ldr	r2, [r3, #12]
 8003356:	4b3c      	ldr	r3, [pc, #240]	@ (8003448 <HAL_RCC_OscConfig+0x618>)
 8003358:	2180      	movs	r1, #128	@ 0x80
 800335a:	0549      	lsls	r1, r1, #21
 800335c:	430a      	orrs	r2, r1
 800335e:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003360:	f7fe ff3e 	bl	80021e0 <HAL_GetTick>
 8003364:	0003      	movs	r3, r0
 8003366:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003368:	e008      	b.n	800337c <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800336a:	f7fe ff39 	bl	80021e0 <HAL_GetTick>
 800336e:	0002      	movs	r2, r0
 8003370:	693b      	ldr	r3, [r7, #16]
 8003372:	1ad3      	subs	r3, r2, r3
 8003374:	2b02      	cmp	r3, #2
 8003376:	d901      	bls.n	800337c <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8003378:	2303      	movs	r3, #3
 800337a:	e061      	b.n	8003440 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800337c:	4b32      	ldr	r3, [pc, #200]	@ (8003448 <HAL_RCC_OscConfig+0x618>)
 800337e:	681a      	ldr	r2, [r3, #0]
 8003380:	2380      	movs	r3, #128	@ 0x80
 8003382:	049b      	lsls	r3, r3, #18
 8003384:	4013      	ands	r3, r2
 8003386:	d0f0      	beq.n	800336a <HAL_RCC_OscConfig+0x53a>
 8003388:	e059      	b.n	800343e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800338a:	4b2f      	ldr	r3, [pc, #188]	@ (8003448 <HAL_RCC_OscConfig+0x618>)
 800338c:	681a      	ldr	r2, [r3, #0]
 800338e:	4b2e      	ldr	r3, [pc, #184]	@ (8003448 <HAL_RCC_OscConfig+0x618>)
 8003390:	4931      	ldr	r1, [pc, #196]	@ (8003458 <HAL_RCC_OscConfig+0x628>)
 8003392:	400a      	ands	r2, r1
 8003394:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003396:	f7fe ff23 	bl	80021e0 <HAL_GetTick>
 800339a:	0003      	movs	r3, r0
 800339c:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800339e:	e008      	b.n	80033b2 <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033a0:	f7fe ff1e 	bl	80021e0 <HAL_GetTick>
 80033a4:	0002      	movs	r2, r0
 80033a6:	693b      	ldr	r3, [r7, #16]
 80033a8:	1ad3      	subs	r3, r2, r3
 80033aa:	2b02      	cmp	r3, #2
 80033ac:	d901      	bls.n	80033b2 <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 80033ae:	2303      	movs	r3, #3
 80033b0:	e046      	b.n	8003440 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80033b2:	4b25      	ldr	r3, [pc, #148]	@ (8003448 <HAL_RCC_OscConfig+0x618>)
 80033b4:	681a      	ldr	r2, [r3, #0]
 80033b6:	2380      	movs	r3, #128	@ 0x80
 80033b8:	049b      	lsls	r3, r3, #18
 80033ba:	4013      	ands	r3, r2
 80033bc:	d1f0      	bne.n	80033a0 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 80033be:	4b22      	ldr	r3, [pc, #136]	@ (8003448 <HAL_RCC_OscConfig+0x618>)
 80033c0:	68da      	ldr	r2, [r3, #12]
 80033c2:	4b21      	ldr	r3, [pc, #132]	@ (8003448 <HAL_RCC_OscConfig+0x618>)
 80033c4:	4926      	ldr	r1, [pc, #152]	@ (8003460 <HAL_RCC_OscConfig+0x630>)
 80033c6:	400a      	ands	r2, r1
 80033c8:	60da      	str	r2, [r3, #12]
 80033ca:	e038      	b.n	800343e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	69db      	ldr	r3, [r3, #28]
 80033d0:	2b01      	cmp	r3, #1
 80033d2:	d101      	bne.n	80033d8 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 80033d4:	2301      	movs	r3, #1
 80033d6:	e033      	b.n	8003440 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80033d8:	4b1b      	ldr	r3, [pc, #108]	@ (8003448 <HAL_RCC_OscConfig+0x618>)
 80033da:	68db      	ldr	r3, [r3, #12]
 80033dc:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033de:	697b      	ldr	r3, [r7, #20]
 80033e0:	2203      	movs	r2, #3
 80033e2:	401a      	ands	r2, r3
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6a1b      	ldr	r3, [r3, #32]
 80033e8:	429a      	cmp	r2, r3
 80033ea:	d126      	bne.n	800343a <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80033ec:	697b      	ldr	r3, [r7, #20]
 80033ee:	2270      	movs	r2, #112	@ 0x70
 80033f0:	401a      	ands	r2, r3
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033f6:	429a      	cmp	r2, r3
 80033f8:	d11f      	bne.n	800343a <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80033fa:	697a      	ldr	r2, [r7, #20]
 80033fc:	23fe      	movs	r3, #254	@ 0xfe
 80033fe:	01db      	lsls	r3, r3, #7
 8003400:	401a      	ands	r2, r3
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003406:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003408:	429a      	cmp	r2, r3
 800340a:	d116      	bne.n	800343a <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800340c:	697a      	ldr	r2, [r7, #20]
 800340e:	23f8      	movs	r3, #248	@ 0xf8
 8003410:	039b      	lsls	r3, r3, #14
 8003412:	401a      	ands	r2, r3
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003418:	429a      	cmp	r2, r3
 800341a:	d10e      	bne.n	800343a <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800341c:	697a      	ldr	r2, [r7, #20]
 800341e:	23e0      	movs	r3, #224	@ 0xe0
 8003420:	051b      	lsls	r3, r3, #20
 8003422:	401a      	ands	r2, r3
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003428:	429a      	cmp	r2, r3
 800342a:	d106      	bne.n	800343a <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800342c:	697b      	ldr	r3, [r7, #20]
 800342e:	0f5b      	lsrs	r3, r3, #29
 8003430:	075a      	lsls	r2, r3, #29
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8003436:	429a      	cmp	r2, r3
 8003438:	d001      	beq.n	800343e <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 800343a:	2301      	movs	r3, #1
 800343c:	e000      	b.n	8003440 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 800343e:	2300      	movs	r3, #0
}
 8003440:	0018      	movs	r0, r3
 8003442:	46bd      	mov	sp, r7
 8003444:	b008      	add	sp, #32
 8003446:	bd80      	pop	{r7, pc}
 8003448:	40021000 	.word	0x40021000
 800344c:	40007000 	.word	0x40007000
 8003450:	00001388 	.word	0x00001388
 8003454:	efffffff 	.word	0xefffffff
 8003458:	feffffff 	.word	0xfeffffff
 800345c:	11c1808c 	.word	0x11c1808c
 8003460:	eefefffc 	.word	0xeefefffc

08003464 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	b084      	sub	sp, #16
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
 800346c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	2b00      	cmp	r3, #0
 8003472:	d101      	bne.n	8003478 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003474:	2301      	movs	r3, #1
 8003476:	e0e9      	b.n	800364c <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003478:	4b76      	ldr	r3, [pc, #472]	@ (8003654 <HAL_RCC_ClockConfig+0x1f0>)
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	2207      	movs	r2, #7
 800347e:	4013      	ands	r3, r2
 8003480:	683a      	ldr	r2, [r7, #0]
 8003482:	429a      	cmp	r2, r3
 8003484:	d91e      	bls.n	80034c4 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003486:	4b73      	ldr	r3, [pc, #460]	@ (8003654 <HAL_RCC_ClockConfig+0x1f0>)
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	2207      	movs	r2, #7
 800348c:	4393      	bics	r3, r2
 800348e:	0019      	movs	r1, r3
 8003490:	4b70      	ldr	r3, [pc, #448]	@ (8003654 <HAL_RCC_ClockConfig+0x1f0>)
 8003492:	683a      	ldr	r2, [r7, #0]
 8003494:	430a      	orrs	r2, r1
 8003496:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003498:	f7fe fea2 	bl	80021e0 <HAL_GetTick>
 800349c:	0003      	movs	r3, r0
 800349e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80034a0:	e009      	b.n	80034b6 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034a2:	f7fe fe9d 	bl	80021e0 <HAL_GetTick>
 80034a6:	0002      	movs	r2, r0
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	1ad3      	subs	r3, r2, r3
 80034ac:	4a6a      	ldr	r2, [pc, #424]	@ (8003658 <HAL_RCC_ClockConfig+0x1f4>)
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d901      	bls.n	80034b6 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80034b2:	2303      	movs	r3, #3
 80034b4:	e0ca      	b.n	800364c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80034b6:	4b67      	ldr	r3, [pc, #412]	@ (8003654 <HAL_RCC_ClockConfig+0x1f0>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	2207      	movs	r2, #7
 80034bc:	4013      	ands	r3, r2
 80034be:	683a      	ldr	r2, [r7, #0]
 80034c0:	429a      	cmp	r2, r3
 80034c2:	d1ee      	bne.n	80034a2 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	2202      	movs	r2, #2
 80034ca:	4013      	ands	r3, r2
 80034cc:	d015      	beq.n	80034fa <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	2204      	movs	r2, #4
 80034d4:	4013      	ands	r3, r2
 80034d6:	d006      	beq.n	80034e6 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80034d8:	4b60      	ldr	r3, [pc, #384]	@ (800365c <HAL_RCC_ClockConfig+0x1f8>)
 80034da:	689a      	ldr	r2, [r3, #8]
 80034dc:	4b5f      	ldr	r3, [pc, #380]	@ (800365c <HAL_RCC_ClockConfig+0x1f8>)
 80034de:	21e0      	movs	r1, #224	@ 0xe0
 80034e0:	01c9      	lsls	r1, r1, #7
 80034e2:	430a      	orrs	r2, r1
 80034e4:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80034e6:	4b5d      	ldr	r3, [pc, #372]	@ (800365c <HAL_RCC_ClockConfig+0x1f8>)
 80034e8:	689b      	ldr	r3, [r3, #8]
 80034ea:	4a5d      	ldr	r2, [pc, #372]	@ (8003660 <HAL_RCC_ClockConfig+0x1fc>)
 80034ec:	4013      	ands	r3, r2
 80034ee:	0019      	movs	r1, r3
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	689a      	ldr	r2, [r3, #8]
 80034f4:	4b59      	ldr	r3, [pc, #356]	@ (800365c <HAL_RCC_ClockConfig+0x1f8>)
 80034f6:	430a      	orrs	r2, r1
 80034f8:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	2201      	movs	r2, #1
 8003500:	4013      	ands	r3, r2
 8003502:	d057      	beq.n	80035b4 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	685b      	ldr	r3, [r3, #4]
 8003508:	2b01      	cmp	r3, #1
 800350a:	d107      	bne.n	800351c <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800350c:	4b53      	ldr	r3, [pc, #332]	@ (800365c <HAL_RCC_ClockConfig+0x1f8>)
 800350e:	681a      	ldr	r2, [r3, #0]
 8003510:	2380      	movs	r3, #128	@ 0x80
 8003512:	029b      	lsls	r3, r3, #10
 8003514:	4013      	ands	r3, r2
 8003516:	d12b      	bne.n	8003570 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003518:	2301      	movs	r3, #1
 800351a:	e097      	b.n	800364c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	685b      	ldr	r3, [r3, #4]
 8003520:	2b02      	cmp	r3, #2
 8003522:	d107      	bne.n	8003534 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003524:	4b4d      	ldr	r3, [pc, #308]	@ (800365c <HAL_RCC_ClockConfig+0x1f8>)
 8003526:	681a      	ldr	r2, [r3, #0]
 8003528:	2380      	movs	r3, #128	@ 0x80
 800352a:	049b      	lsls	r3, r3, #18
 800352c:	4013      	ands	r3, r2
 800352e:	d11f      	bne.n	8003570 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003530:	2301      	movs	r3, #1
 8003532:	e08b      	b.n	800364c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	685b      	ldr	r3, [r3, #4]
 8003538:	2b00      	cmp	r3, #0
 800353a:	d107      	bne.n	800354c <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800353c:	4b47      	ldr	r3, [pc, #284]	@ (800365c <HAL_RCC_ClockConfig+0x1f8>)
 800353e:	681a      	ldr	r2, [r3, #0]
 8003540:	2380      	movs	r3, #128	@ 0x80
 8003542:	00db      	lsls	r3, r3, #3
 8003544:	4013      	ands	r3, r2
 8003546:	d113      	bne.n	8003570 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003548:	2301      	movs	r3, #1
 800354a:	e07f      	b.n	800364c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	685b      	ldr	r3, [r3, #4]
 8003550:	2b03      	cmp	r3, #3
 8003552:	d106      	bne.n	8003562 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003554:	4b41      	ldr	r3, [pc, #260]	@ (800365c <HAL_RCC_ClockConfig+0x1f8>)
 8003556:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003558:	2202      	movs	r2, #2
 800355a:	4013      	ands	r3, r2
 800355c:	d108      	bne.n	8003570 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800355e:	2301      	movs	r3, #1
 8003560:	e074      	b.n	800364c <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003562:	4b3e      	ldr	r3, [pc, #248]	@ (800365c <HAL_RCC_ClockConfig+0x1f8>)
 8003564:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003566:	2202      	movs	r2, #2
 8003568:	4013      	ands	r3, r2
 800356a:	d101      	bne.n	8003570 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800356c:	2301      	movs	r3, #1
 800356e:	e06d      	b.n	800364c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003570:	4b3a      	ldr	r3, [pc, #232]	@ (800365c <HAL_RCC_ClockConfig+0x1f8>)
 8003572:	689b      	ldr	r3, [r3, #8]
 8003574:	2207      	movs	r2, #7
 8003576:	4393      	bics	r3, r2
 8003578:	0019      	movs	r1, r3
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	685a      	ldr	r2, [r3, #4]
 800357e:	4b37      	ldr	r3, [pc, #220]	@ (800365c <HAL_RCC_ClockConfig+0x1f8>)
 8003580:	430a      	orrs	r2, r1
 8003582:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003584:	f7fe fe2c 	bl	80021e0 <HAL_GetTick>
 8003588:	0003      	movs	r3, r0
 800358a:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800358c:	e009      	b.n	80035a2 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800358e:	f7fe fe27 	bl	80021e0 <HAL_GetTick>
 8003592:	0002      	movs	r2, r0
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	1ad3      	subs	r3, r2, r3
 8003598:	4a2f      	ldr	r2, [pc, #188]	@ (8003658 <HAL_RCC_ClockConfig+0x1f4>)
 800359a:	4293      	cmp	r3, r2
 800359c:	d901      	bls.n	80035a2 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800359e:	2303      	movs	r3, #3
 80035a0:	e054      	b.n	800364c <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035a2:	4b2e      	ldr	r3, [pc, #184]	@ (800365c <HAL_RCC_ClockConfig+0x1f8>)
 80035a4:	689b      	ldr	r3, [r3, #8]
 80035a6:	2238      	movs	r2, #56	@ 0x38
 80035a8:	401a      	ands	r2, r3
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	685b      	ldr	r3, [r3, #4]
 80035ae:	00db      	lsls	r3, r3, #3
 80035b0:	429a      	cmp	r2, r3
 80035b2:	d1ec      	bne.n	800358e <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80035b4:	4b27      	ldr	r3, [pc, #156]	@ (8003654 <HAL_RCC_ClockConfig+0x1f0>)
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	2207      	movs	r2, #7
 80035ba:	4013      	ands	r3, r2
 80035bc:	683a      	ldr	r2, [r7, #0]
 80035be:	429a      	cmp	r2, r3
 80035c0:	d21e      	bcs.n	8003600 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035c2:	4b24      	ldr	r3, [pc, #144]	@ (8003654 <HAL_RCC_ClockConfig+0x1f0>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	2207      	movs	r2, #7
 80035c8:	4393      	bics	r3, r2
 80035ca:	0019      	movs	r1, r3
 80035cc:	4b21      	ldr	r3, [pc, #132]	@ (8003654 <HAL_RCC_ClockConfig+0x1f0>)
 80035ce:	683a      	ldr	r2, [r7, #0]
 80035d0:	430a      	orrs	r2, r1
 80035d2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80035d4:	f7fe fe04 	bl	80021e0 <HAL_GetTick>
 80035d8:	0003      	movs	r3, r0
 80035da:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80035dc:	e009      	b.n	80035f2 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035de:	f7fe fdff 	bl	80021e0 <HAL_GetTick>
 80035e2:	0002      	movs	r2, r0
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	1ad3      	subs	r3, r2, r3
 80035e8:	4a1b      	ldr	r2, [pc, #108]	@ (8003658 <HAL_RCC_ClockConfig+0x1f4>)
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d901      	bls.n	80035f2 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80035ee:	2303      	movs	r3, #3
 80035f0:	e02c      	b.n	800364c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80035f2:	4b18      	ldr	r3, [pc, #96]	@ (8003654 <HAL_RCC_ClockConfig+0x1f0>)
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	2207      	movs	r2, #7
 80035f8:	4013      	ands	r3, r2
 80035fa:	683a      	ldr	r2, [r7, #0]
 80035fc:	429a      	cmp	r2, r3
 80035fe:	d1ee      	bne.n	80035de <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	2204      	movs	r2, #4
 8003606:	4013      	ands	r3, r2
 8003608:	d009      	beq.n	800361e <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800360a:	4b14      	ldr	r3, [pc, #80]	@ (800365c <HAL_RCC_ClockConfig+0x1f8>)
 800360c:	689b      	ldr	r3, [r3, #8]
 800360e:	4a15      	ldr	r2, [pc, #84]	@ (8003664 <HAL_RCC_ClockConfig+0x200>)
 8003610:	4013      	ands	r3, r2
 8003612:	0019      	movs	r1, r3
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	68da      	ldr	r2, [r3, #12]
 8003618:	4b10      	ldr	r3, [pc, #64]	@ (800365c <HAL_RCC_ClockConfig+0x1f8>)
 800361a:	430a      	orrs	r2, r1
 800361c:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800361e:	f000 f829 	bl	8003674 <HAL_RCC_GetSysClockFreq>
 8003622:	0001      	movs	r1, r0
 8003624:	4b0d      	ldr	r3, [pc, #52]	@ (800365c <HAL_RCC_ClockConfig+0x1f8>)
 8003626:	689b      	ldr	r3, [r3, #8]
 8003628:	0a1b      	lsrs	r3, r3, #8
 800362a:	220f      	movs	r2, #15
 800362c:	401a      	ands	r2, r3
 800362e:	4b0e      	ldr	r3, [pc, #56]	@ (8003668 <HAL_RCC_ClockConfig+0x204>)
 8003630:	0092      	lsls	r2, r2, #2
 8003632:	58d3      	ldr	r3, [r2, r3]
 8003634:	221f      	movs	r2, #31
 8003636:	4013      	ands	r3, r2
 8003638:	000a      	movs	r2, r1
 800363a:	40da      	lsrs	r2, r3
 800363c:	4b0b      	ldr	r3, [pc, #44]	@ (800366c <HAL_RCC_ClockConfig+0x208>)
 800363e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003640:	4b0b      	ldr	r3, [pc, #44]	@ (8003670 <HAL_RCC_ClockConfig+0x20c>)
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	0018      	movs	r0, r3
 8003646:	f7fe fd6f 	bl	8002128 <HAL_InitTick>
 800364a:	0003      	movs	r3, r0
}
 800364c:	0018      	movs	r0, r3
 800364e:	46bd      	mov	sp, r7
 8003650:	b004      	add	sp, #16
 8003652:	bd80      	pop	{r7, pc}
 8003654:	40022000 	.word	0x40022000
 8003658:	00001388 	.word	0x00001388
 800365c:	40021000 	.word	0x40021000
 8003660:	fffff0ff 	.word	0xfffff0ff
 8003664:	ffff8fff 	.word	0xffff8fff
 8003668:	0800492c 	.word	0x0800492c
 800366c:	20000008 	.word	0x20000008
 8003670:	2000000c 	.word	0x2000000c

08003674 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	b086      	sub	sp, #24
 8003678:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800367a:	4b3c      	ldr	r3, [pc, #240]	@ (800376c <HAL_RCC_GetSysClockFreq+0xf8>)
 800367c:	689b      	ldr	r3, [r3, #8]
 800367e:	2238      	movs	r2, #56	@ 0x38
 8003680:	4013      	ands	r3, r2
 8003682:	d10f      	bne.n	80036a4 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8003684:	4b39      	ldr	r3, [pc, #228]	@ (800376c <HAL_RCC_GetSysClockFreq+0xf8>)
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	0adb      	lsrs	r3, r3, #11
 800368a:	2207      	movs	r2, #7
 800368c:	4013      	ands	r3, r2
 800368e:	2201      	movs	r2, #1
 8003690:	409a      	lsls	r2, r3
 8003692:	0013      	movs	r3, r2
 8003694:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8003696:	6839      	ldr	r1, [r7, #0]
 8003698:	4835      	ldr	r0, [pc, #212]	@ (8003770 <HAL_RCC_GetSysClockFreq+0xfc>)
 800369a:	f7fc fd33 	bl	8000104 <__udivsi3>
 800369e:	0003      	movs	r3, r0
 80036a0:	613b      	str	r3, [r7, #16]
 80036a2:	e05d      	b.n	8003760 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80036a4:	4b31      	ldr	r3, [pc, #196]	@ (800376c <HAL_RCC_GetSysClockFreq+0xf8>)
 80036a6:	689b      	ldr	r3, [r3, #8]
 80036a8:	2238      	movs	r2, #56	@ 0x38
 80036aa:	4013      	ands	r3, r2
 80036ac:	2b08      	cmp	r3, #8
 80036ae:	d102      	bne.n	80036b6 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80036b0:	4b30      	ldr	r3, [pc, #192]	@ (8003774 <HAL_RCC_GetSysClockFreq+0x100>)
 80036b2:	613b      	str	r3, [r7, #16]
 80036b4:	e054      	b.n	8003760 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80036b6:	4b2d      	ldr	r3, [pc, #180]	@ (800376c <HAL_RCC_GetSysClockFreq+0xf8>)
 80036b8:	689b      	ldr	r3, [r3, #8]
 80036ba:	2238      	movs	r2, #56	@ 0x38
 80036bc:	4013      	ands	r3, r2
 80036be:	2b10      	cmp	r3, #16
 80036c0:	d138      	bne.n	8003734 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80036c2:	4b2a      	ldr	r3, [pc, #168]	@ (800376c <HAL_RCC_GetSysClockFreq+0xf8>)
 80036c4:	68db      	ldr	r3, [r3, #12]
 80036c6:	2203      	movs	r2, #3
 80036c8:	4013      	ands	r3, r2
 80036ca:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80036cc:	4b27      	ldr	r3, [pc, #156]	@ (800376c <HAL_RCC_GetSysClockFreq+0xf8>)
 80036ce:	68db      	ldr	r3, [r3, #12]
 80036d0:	091b      	lsrs	r3, r3, #4
 80036d2:	2207      	movs	r2, #7
 80036d4:	4013      	ands	r3, r2
 80036d6:	3301      	adds	r3, #1
 80036d8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	2b03      	cmp	r3, #3
 80036de:	d10d      	bne.n	80036fc <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80036e0:	68b9      	ldr	r1, [r7, #8]
 80036e2:	4824      	ldr	r0, [pc, #144]	@ (8003774 <HAL_RCC_GetSysClockFreq+0x100>)
 80036e4:	f7fc fd0e 	bl	8000104 <__udivsi3>
 80036e8:	0003      	movs	r3, r0
 80036ea:	0019      	movs	r1, r3
 80036ec:	4b1f      	ldr	r3, [pc, #124]	@ (800376c <HAL_RCC_GetSysClockFreq+0xf8>)
 80036ee:	68db      	ldr	r3, [r3, #12]
 80036f0:	0a1b      	lsrs	r3, r3, #8
 80036f2:	227f      	movs	r2, #127	@ 0x7f
 80036f4:	4013      	ands	r3, r2
 80036f6:	434b      	muls	r3, r1
 80036f8:	617b      	str	r3, [r7, #20]
        break;
 80036fa:	e00d      	b.n	8003718 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80036fc:	68b9      	ldr	r1, [r7, #8]
 80036fe:	481c      	ldr	r0, [pc, #112]	@ (8003770 <HAL_RCC_GetSysClockFreq+0xfc>)
 8003700:	f7fc fd00 	bl	8000104 <__udivsi3>
 8003704:	0003      	movs	r3, r0
 8003706:	0019      	movs	r1, r3
 8003708:	4b18      	ldr	r3, [pc, #96]	@ (800376c <HAL_RCC_GetSysClockFreq+0xf8>)
 800370a:	68db      	ldr	r3, [r3, #12]
 800370c:	0a1b      	lsrs	r3, r3, #8
 800370e:	227f      	movs	r2, #127	@ 0x7f
 8003710:	4013      	ands	r3, r2
 8003712:	434b      	muls	r3, r1
 8003714:	617b      	str	r3, [r7, #20]
        break;
 8003716:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8003718:	4b14      	ldr	r3, [pc, #80]	@ (800376c <HAL_RCC_GetSysClockFreq+0xf8>)
 800371a:	68db      	ldr	r3, [r3, #12]
 800371c:	0f5b      	lsrs	r3, r3, #29
 800371e:	2207      	movs	r2, #7
 8003720:	4013      	ands	r3, r2
 8003722:	3301      	adds	r3, #1
 8003724:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8003726:	6879      	ldr	r1, [r7, #4]
 8003728:	6978      	ldr	r0, [r7, #20]
 800372a:	f7fc fceb 	bl	8000104 <__udivsi3>
 800372e:	0003      	movs	r3, r0
 8003730:	613b      	str	r3, [r7, #16]
 8003732:	e015      	b.n	8003760 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8003734:	4b0d      	ldr	r3, [pc, #52]	@ (800376c <HAL_RCC_GetSysClockFreq+0xf8>)
 8003736:	689b      	ldr	r3, [r3, #8]
 8003738:	2238      	movs	r2, #56	@ 0x38
 800373a:	4013      	ands	r3, r2
 800373c:	2b20      	cmp	r3, #32
 800373e:	d103      	bne.n	8003748 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8003740:	2380      	movs	r3, #128	@ 0x80
 8003742:	021b      	lsls	r3, r3, #8
 8003744:	613b      	str	r3, [r7, #16]
 8003746:	e00b      	b.n	8003760 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8003748:	4b08      	ldr	r3, [pc, #32]	@ (800376c <HAL_RCC_GetSysClockFreq+0xf8>)
 800374a:	689b      	ldr	r3, [r3, #8]
 800374c:	2238      	movs	r2, #56	@ 0x38
 800374e:	4013      	ands	r3, r2
 8003750:	2b18      	cmp	r3, #24
 8003752:	d103      	bne.n	800375c <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8003754:	23fa      	movs	r3, #250	@ 0xfa
 8003756:	01db      	lsls	r3, r3, #7
 8003758:	613b      	str	r3, [r7, #16]
 800375a:	e001      	b.n	8003760 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 800375c:	2300      	movs	r3, #0
 800375e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003760:	693b      	ldr	r3, [r7, #16]
}
 8003762:	0018      	movs	r0, r3
 8003764:	46bd      	mov	sp, r7
 8003766:	b006      	add	sp, #24
 8003768:	bd80      	pop	{r7, pc}
 800376a:	46c0      	nop			@ (mov r8, r8)
 800376c:	40021000 	.word	0x40021000
 8003770:	00f42400 	.word	0x00f42400
 8003774:	007a1200 	.word	0x007a1200

08003778 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800377c:	4b02      	ldr	r3, [pc, #8]	@ (8003788 <HAL_RCC_GetHCLKFreq+0x10>)
 800377e:	681b      	ldr	r3, [r3, #0]
}
 8003780:	0018      	movs	r0, r3
 8003782:	46bd      	mov	sp, r7
 8003784:	bd80      	pop	{r7, pc}
 8003786:	46c0      	nop			@ (mov r8, r8)
 8003788:	20000008 	.word	0x20000008

0800378c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	b082      	sub	sp, #8
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2b00      	cmp	r3, #0
 8003798:	d101      	bne.n	800379e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800379a:	2301      	movs	r3, #1
 800379c:	e04a      	b.n	8003834 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	223d      	movs	r2, #61	@ 0x3d
 80037a2:	5c9b      	ldrb	r3, [r3, r2]
 80037a4:	b2db      	uxtb	r3, r3
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d107      	bne.n	80037ba <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	223c      	movs	r2, #60	@ 0x3c
 80037ae:	2100      	movs	r1, #0
 80037b0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	0018      	movs	r0, r3
 80037b6:	f7fe fbd3 	bl	8001f60 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	223d      	movs	r2, #61	@ 0x3d
 80037be:	2102      	movs	r1, #2
 80037c0:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681a      	ldr	r2, [r3, #0]
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	3304      	adds	r3, #4
 80037ca:	0019      	movs	r1, r3
 80037cc:	0010      	movs	r0, r2
 80037ce:	f000 fc8b 	bl	80040e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2248      	movs	r2, #72	@ 0x48
 80037d6:	2101      	movs	r1, #1
 80037d8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	223e      	movs	r2, #62	@ 0x3e
 80037de:	2101      	movs	r1, #1
 80037e0:	5499      	strb	r1, [r3, r2]
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	223f      	movs	r2, #63	@ 0x3f
 80037e6:	2101      	movs	r1, #1
 80037e8:	5499      	strb	r1, [r3, r2]
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2240      	movs	r2, #64	@ 0x40
 80037ee:	2101      	movs	r1, #1
 80037f0:	5499      	strb	r1, [r3, r2]
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	2241      	movs	r2, #65	@ 0x41
 80037f6:	2101      	movs	r1, #1
 80037f8:	5499      	strb	r1, [r3, r2]
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	2242      	movs	r2, #66	@ 0x42
 80037fe:	2101      	movs	r1, #1
 8003800:	5499      	strb	r1, [r3, r2]
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2243      	movs	r2, #67	@ 0x43
 8003806:	2101      	movs	r1, #1
 8003808:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2244      	movs	r2, #68	@ 0x44
 800380e:	2101      	movs	r1, #1
 8003810:	5499      	strb	r1, [r3, r2]
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2245      	movs	r2, #69	@ 0x45
 8003816:	2101      	movs	r1, #1
 8003818:	5499      	strb	r1, [r3, r2]
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2246      	movs	r2, #70	@ 0x46
 800381e:	2101      	movs	r1, #1
 8003820:	5499      	strb	r1, [r3, r2]
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2247      	movs	r2, #71	@ 0x47
 8003826:	2101      	movs	r1, #1
 8003828:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	223d      	movs	r2, #61	@ 0x3d
 800382e:	2101      	movs	r1, #1
 8003830:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003832:	2300      	movs	r3, #0
}
 8003834:	0018      	movs	r0, r3
 8003836:	46bd      	mov	sp, r7
 8003838:	b002      	add	sp, #8
 800383a:	bd80      	pop	{r7, pc}

0800383c <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b082      	sub	sp, #8
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
 8003844:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	6839      	ldr	r1, [r7, #0]
 800384c:	2200      	movs	r2, #0
 800384e:	0018      	movs	r0, r3
 8003850:	f000 ff6a 	bl	8004728 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	4a35      	ldr	r2, [pc, #212]	@ (8003930 <HAL_TIM_PWM_Stop+0xf4>)
 800385a:	4293      	cmp	r3, r2
 800385c:	d009      	beq.n	8003872 <HAL_TIM_PWM_Stop+0x36>
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	4a34      	ldr	r2, [pc, #208]	@ (8003934 <HAL_TIM_PWM_Stop+0xf8>)
 8003864:	4293      	cmp	r3, r2
 8003866:	d004      	beq.n	8003872 <HAL_TIM_PWM_Stop+0x36>
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	4a32      	ldr	r2, [pc, #200]	@ (8003938 <HAL_TIM_PWM_Stop+0xfc>)
 800386e:	4293      	cmp	r3, r2
 8003870:	d101      	bne.n	8003876 <HAL_TIM_PWM_Stop+0x3a>
 8003872:	2301      	movs	r3, #1
 8003874:	e000      	b.n	8003878 <HAL_TIM_PWM_Stop+0x3c>
 8003876:	2300      	movs	r3, #0
 8003878:	2b00      	cmp	r3, #0
 800387a:	d013      	beq.n	80038a4 <HAL_TIM_PWM_Stop+0x68>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	6a1b      	ldr	r3, [r3, #32]
 8003882:	4a2e      	ldr	r2, [pc, #184]	@ (800393c <HAL_TIM_PWM_Stop+0x100>)
 8003884:	4013      	ands	r3, r2
 8003886:	d10d      	bne.n	80038a4 <HAL_TIM_PWM_Stop+0x68>
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	6a1b      	ldr	r3, [r3, #32]
 800388e:	4a2c      	ldr	r2, [pc, #176]	@ (8003940 <HAL_TIM_PWM_Stop+0x104>)
 8003890:	4013      	ands	r3, r2
 8003892:	d107      	bne.n	80038a4 <HAL_TIM_PWM_Stop+0x68>
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	4929      	ldr	r1, [pc, #164]	@ (8003944 <HAL_TIM_PWM_Stop+0x108>)
 80038a0:	400a      	ands	r2, r1
 80038a2:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	6a1b      	ldr	r3, [r3, #32]
 80038aa:	4a24      	ldr	r2, [pc, #144]	@ (800393c <HAL_TIM_PWM_Stop+0x100>)
 80038ac:	4013      	ands	r3, r2
 80038ae:	d10d      	bne.n	80038cc <HAL_TIM_PWM_Stop+0x90>
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	6a1b      	ldr	r3, [r3, #32]
 80038b6:	4a22      	ldr	r2, [pc, #136]	@ (8003940 <HAL_TIM_PWM_Stop+0x104>)
 80038b8:	4013      	ands	r3, r2
 80038ba:	d107      	bne.n	80038cc <HAL_TIM_PWM_Stop+0x90>
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	681a      	ldr	r2, [r3, #0]
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	2101      	movs	r1, #1
 80038c8:	438a      	bics	r2, r1
 80038ca:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d104      	bne.n	80038dc <HAL_TIM_PWM_Stop+0xa0>
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	223e      	movs	r2, #62	@ 0x3e
 80038d6:	2101      	movs	r1, #1
 80038d8:	5499      	strb	r1, [r3, r2]
 80038da:	e023      	b.n	8003924 <HAL_TIM_PWM_Stop+0xe8>
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	2b04      	cmp	r3, #4
 80038e0:	d104      	bne.n	80038ec <HAL_TIM_PWM_Stop+0xb0>
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	223f      	movs	r2, #63	@ 0x3f
 80038e6:	2101      	movs	r1, #1
 80038e8:	5499      	strb	r1, [r3, r2]
 80038ea:	e01b      	b.n	8003924 <HAL_TIM_PWM_Stop+0xe8>
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	2b08      	cmp	r3, #8
 80038f0:	d104      	bne.n	80038fc <HAL_TIM_PWM_Stop+0xc0>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	2240      	movs	r2, #64	@ 0x40
 80038f6:	2101      	movs	r1, #1
 80038f8:	5499      	strb	r1, [r3, r2]
 80038fa:	e013      	b.n	8003924 <HAL_TIM_PWM_Stop+0xe8>
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	2b0c      	cmp	r3, #12
 8003900:	d104      	bne.n	800390c <HAL_TIM_PWM_Stop+0xd0>
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2241      	movs	r2, #65	@ 0x41
 8003906:	2101      	movs	r1, #1
 8003908:	5499      	strb	r1, [r3, r2]
 800390a:	e00b      	b.n	8003924 <HAL_TIM_PWM_Stop+0xe8>
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	2b10      	cmp	r3, #16
 8003910:	d104      	bne.n	800391c <HAL_TIM_PWM_Stop+0xe0>
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	2242      	movs	r2, #66	@ 0x42
 8003916:	2101      	movs	r1, #1
 8003918:	5499      	strb	r1, [r3, r2]
 800391a:	e003      	b.n	8003924 <HAL_TIM_PWM_Stop+0xe8>
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2243      	movs	r2, #67	@ 0x43
 8003920:	2101      	movs	r1, #1
 8003922:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8003924:	2300      	movs	r3, #0
}
 8003926:	0018      	movs	r0, r3
 8003928:	46bd      	mov	sp, r7
 800392a:	b002      	add	sp, #8
 800392c:	bd80      	pop	{r7, pc}
 800392e:	46c0      	nop			@ (mov r8, r8)
 8003930:	40012c00 	.word	0x40012c00
 8003934:	40014400 	.word	0x40014400
 8003938:	40014800 	.word	0x40014800
 800393c:	00001111 	.word	0x00001111
 8003940:	00000444 	.word	0x00000444
 8003944:	ffff7fff 	.word	0xffff7fff

08003948 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b086      	sub	sp, #24
 800394c:	af00      	add	r7, sp, #0
 800394e:	60f8      	str	r0, [r7, #12]
 8003950:	60b9      	str	r1, [r7, #8]
 8003952:	607a      	str	r2, [r7, #4]
 8003954:	001a      	movs	r2, r3
 8003956:	1cbb      	adds	r3, r7, #2
 8003958:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800395a:	2317      	movs	r3, #23
 800395c:	18fb      	adds	r3, r7, r3
 800395e:	2200      	movs	r2, #0
 8003960:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8003962:	68bb      	ldr	r3, [r7, #8]
 8003964:	2b00      	cmp	r3, #0
 8003966:	d108      	bne.n	800397a <HAL_TIM_PWM_Start_DMA+0x32>
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	223e      	movs	r2, #62	@ 0x3e
 800396c:	5c9b      	ldrb	r3, [r3, r2]
 800396e:	b2db      	uxtb	r3, r3
 8003970:	3b02      	subs	r3, #2
 8003972:	425a      	negs	r2, r3
 8003974:	4153      	adcs	r3, r2
 8003976:	b2db      	uxtb	r3, r3
 8003978:	e037      	b.n	80039ea <HAL_TIM_PWM_Start_DMA+0xa2>
 800397a:	68bb      	ldr	r3, [r7, #8]
 800397c:	2b04      	cmp	r3, #4
 800397e:	d108      	bne.n	8003992 <HAL_TIM_PWM_Start_DMA+0x4a>
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	223f      	movs	r2, #63	@ 0x3f
 8003984:	5c9b      	ldrb	r3, [r3, r2]
 8003986:	b2db      	uxtb	r3, r3
 8003988:	3b02      	subs	r3, #2
 800398a:	425a      	negs	r2, r3
 800398c:	4153      	adcs	r3, r2
 800398e:	b2db      	uxtb	r3, r3
 8003990:	e02b      	b.n	80039ea <HAL_TIM_PWM_Start_DMA+0xa2>
 8003992:	68bb      	ldr	r3, [r7, #8]
 8003994:	2b08      	cmp	r3, #8
 8003996:	d108      	bne.n	80039aa <HAL_TIM_PWM_Start_DMA+0x62>
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	2240      	movs	r2, #64	@ 0x40
 800399c:	5c9b      	ldrb	r3, [r3, r2]
 800399e:	b2db      	uxtb	r3, r3
 80039a0:	3b02      	subs	r3, #2
 80039a2:	425a      	negs	r2, r3
 80039a4:	4153      	adcs	r3, r2
 80039a6:	b2db      	uxtb	r3, r3
 80039a8:	e01f      	b.n	80039ea <HAL_TIM_PWM_Start_DMA+0xa2>
 80039aa:	68bb      	ldr	r3, [r7, #8]
 80039ac:	2b0c      	cmp	r3, #12
 80039ae:	d108      	bne.n	80039c2 <HAL_TIM_PWM_Start_DMA+0x7a>
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	2241      	movs	r2, #65	@ 0x41
 80039b4:	5c9b      	ldrb	r3, [r3, r2]
 80039b6:	b2db      	uxtb	r3, r3
 80039b8:	3b02      	subs	r3, #2
 80039ba:	425a      	negs	r2, r3
 80039bc:	4153      	adcs	r3, r2
 80039be:	b2db      	uxtb	r3, r3
 80039c0:	e013      	b.n	80039ea <HAL_TIM_PWM_Start_DMA+0xa2>
 80039c2:	68bb      	ldr	r3, [r7, #8]
 80039c4:	2b10      	cmp	r3, #16
 80039c6:	d108      	bne.n	80039da <HAL_TIM_PWM_Start_DMA+0x92>
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	2242      	movs	r2, #66	@ 0x42
 80039cc:	5c9b      	ldrb	r3, [r3, r2]
 80039ce:	b2db      	uxtb	r3, r3
 80039d0:	3b02      	subs	r3, #2
 80039d2:	425a      	negs	r2, r3
 80039d4:	4153      	adcs	r3, r2
 80039d6:	b2db      	uxtb	r3, r3
 80039d8:	e007      	b.n	80039ea <HAL_TIM_PWM_Start_DMA+0xa2>
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	2243      	movs	r2, #67	@ 0x43
 80039de:	5c9b      	ldrb	r3, [r3, r2]
 80039e0:	b2db      	uxtb	r3, r3
 80039e2:	3b02      	subs	r3, #2
 80039e4:	425a      	negs	r2, r3
 80039e6:	4153      	adcs	r3, r2
 80039e8:	b2db      	uxtb	r3, r3
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d001      	beq.n	80039f2 <HAL_TIM_PWM_Start_DMA+0xaa>
  {
    return HAL_BUSY;
 80039ee:	2302      	movs	r3, #2
 80039f0:	e189      	b.n	8003d06 <HAL_TIM_PWM_Start_DMA+0x3be>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 80039f2:	68bb      	ldr	r3, [r7, #8]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d108      	bne.n	8003a0a <HAL_TIM_PWM_Start_DMA+0xc2>
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	223e      	movs	r2, #62	@ 0x3e
 80039fc:	5c9b      	ldrb	r3, [r3, r2]
 80039fe:	b2db      	uxtb	r3, r3
 8003a00:	3b01      	subs	r3, #1
 8003a02:	425a      	negs	r2, r3
 8003a04:	4153      	adcs	r3, r2
 8003a06:	b2db      	uxtb	r3, r3
 8003a08:	e037      	b.n	8003a7a <HAL_TIM_PWM_Start_DMA+0x132>
 8003a0a:	68bb      	ldr	r3, [r7, #8]
 8003a0c:	2b04      	cmp	r3, #4
 8003a0e:	d108      	bne.n	8003a22 <HAL_TIM_PWM_Start_DMA+0xda>
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	223f      	movs	r2, #63	@ 0x3f
 8003a14:	5c9b      	ldrb	r3, [r3, r2]
 8003a16:	b2db      	uxtb	r3, r3
 8003a18:	3b01      	subs	r3, #1
 8003a1a:	425a      	negs	r2, r3
 8003a1c:	4153      	adcs	r3, r2
 8003a1e:	b2db      	uxtb	r3, r3
 8003a20:	e02b      	b.n	8003a7a <HAL_TIM_PWM_Start_DMA+0x132>
 8003a22:	68bb      	ldr	r3, [r7, #8]
 8003a24:	2b08      	cmp	r3, #8
 8003a26:	d108      	bne.n	8003a3a <HAL_TIM_PWM_Start_DMA+0xf2>
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	2240      	movs	r2, #64	@ 0x40
 8003a2c:	5c9b      	ldrb	r3, [r3, r2]
 8003a2e:	b2db      	uxtb	r3, r3
 8003a30:	3b01      	subs	r3, #1
 8003a32:	425a      	negs	r2, r3
 8003a34:	4153      	adcs	r3, r2
 8003a36:	b2db      	uxtb	r3, r3
 8003a38:	e01f      	b.n	8003a7a <HAL_TIM_PWM_Start_DMA+0x132>
 8003a3a:	68bb      	ldr	r3, [r7, #8]
 8003a3c:	2b0c      	cmp	r3, #12
 8003a3e:	d108      	bne.n	8003a52 <HAL_TIM_PWM_Start_DMA+0x10a>
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	2241      	movs	r2, #65	@ 0x41
 8003a44:	5c9b      	ldrb	r3, [r3, r2]
 8003a46:	b2db      	uxtb	r3, r3
 8003a48:	3b01      	subs	r3, #1
 8003a4a:	425a      	negs	r2, r3
 8003a4c:	4153      	adcs	r3, r2
 8003a4e:	b2db      	uxtb	r3, r3
 8003a50:	e013      	b.n	8003a7a <HAL_TIM_PWM_Start_DMA+0x132>
 8003a52:	68bb      	ldr	r3, [r7, #8]
 8003a54:	2b10      	cmp	r3, #16
 8003a56:	d108      	bne.n	8003a6a <HAL_TIM_PWM_Start_DMA+0x122>
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	2242      	movs	r2, #66	@ 0x42
 8003a5c:	5c9b      	ldrb	r3, [r3, r2]
 8003a5e:	b2db      	uxtb	r3, r3
 8003a60:	3b01      	subs	r3, #1
 8003a62:	425a      	negs	r2, r3
 8003a64:	4153      	adcs	r3, r2
 8003a66:	b2db      	uxtb	r3, r3
 8003a68:	e007      	b.n	8003a7a <HAL_TIM_PWM_Start_DMA+0x132>
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	2243      	movs	r2, #67	@ 0x43
 8003a6e:	5c9b      	ldrb	r3, [r3, r2]
 8003a70:	b2db      	uxtb	r3, r3
 8003a72:	3b01      	subs	r3, #1
 8003a74:	425a      	negs	r2, r3
 8003a76:	4153      	adcs	r3, r2
 8003a78:	b2db      	uxtb	r3, r3
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d035      	beq.n	8003aea <HAL_TIM_PWM_Start_DMA+0x1a2>
  {
    if ((pData == NULL) || (Length == 0U))
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d003      	beq.n	8003a8c <HAL_TIM_PWM_Start_DMA+0x144>
 8003a84:	1cbb      	adds	r3, r7, #2
 8003a86:	881b      	ldrh	r3, [r3, #0]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d101      	bne.n	8003a90 <HAL_TIM_PWM_Start_DMA+0x148>
    {
      return HAL_ERROR;
 8003a8c:	2301      	movs	r3, #1
 8003a8e:	e13a      	b.n	8003d06 <HAL_TIM_PWM_Start_DMA+0x3be>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003a90:	68bb      	ldr	r3, [r7, #8]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d104      	bne.n	8003aa0 <HAL_TIM_PWM_Start_DMA+0x158>
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	223e      	movs	r2, #62	@ 0x3e
 8003a9a:	2102      	movs	r1, #2
 8003a9c:	5499      	strb	r1, [r3, r2]
 8003a9e:	e026      	b.n	8003aee <HAL_TIM_PWM_Start_DMA+0x1a6>
 8003aa0:	68bb      	ldr	r3, [r7, #8]
 8003aa2:	2b04      	cmp	r3, #4
 8003aa4:	d104      	bne.n	8003ab0 <HAL_TIM_PWM_Start_DMA+0x168>
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	223f      	movs	r2, #63	@ 0x3f
 8003aaa:	2102      	movs	r1, #2
 8003aac:	5499      	strb	r1, [r3, r2]
 8003aae:	e01e      	b.n	8003aee <HAL_TIM_PWM_Start_DMA+0x1a6>
 8003ab0:	68bb      	ldr	r3, [r7, #8]
 8003ab2:	2b08      	cmp	r3, #8
 8003ab4:	d104      	bne.n	8003ac0 <HAL_TIM_PWM_Start_DMA+0x178>
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	2240      	movs	r2, #64	@ 0x40
 8003aba:	2102      	movs	r1, #2
 8003abc:	5499      	strb	r1, [r3, r2]
 8003abe:	e016      	b.n	8003aee <HAL_TIM_PWM_Start_DMA+0x1a6>
 8003ac0:	68bb      	ldr	r3, [r7, #8]
 8003ac2:	2b0c      	cmp	r3, #12
 8003ac4:	d104      	bne.n	8003ad0 <HAL_TIM_PWM_Start_DMA+0x188>
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	2241      	movs	r2, #65	@ 0x41
 8003aca:	2102      	movs	r1, #2
 8003acc:	5499      	strb	r1, [r3, r2]
 8003ace:	e00e      	b.n	8003aee <HAL_TIM_PWM_Start_DMA+0x1a6>
 8003ad0:	68bb      	ldr	r3, [r7, #8]
 8003ad2:	2b10      	cmp	r3, #16
 8003ad4:	d104      	bne.n	8003ae0 <HAL_TIM_PWM_Start_DMA+0x198>
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	2242      	movs	r2, #66	@ 0x42
 8003ada:	2102      	movs	r1, #2
 8003adc:	5499      	strb	r1, [r3, r2]
 8003ade:	e006      	b.n	8003aee <HAL_TIM_PWM_Start_DMA+0x1a6>
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	2243      	movs	r2, #67	@ 0x43
 8003ae4:	2102      	movs	r1, #2
 8003ae6:	5499      	strb	r1, [r3, r2]
 8003ae8:	e001      	b.n	8003aee <HAL_TIM_PWM_Start_DMA+0x1a6>
    }
  }
  else
  {
    return HAL_ERROR;
 8003aea:	2301      	movs	r3, #1
 8003aec:	e10b      	b.n	8003d06 <HAL_TIM_PWM_Start_DMA+0x3be>
  }

  switch (Channel)
 8003aee:	68bb      	ldr	r3, [r7, #8]
 8003af0:	2b0c      	cmp	r3, #12
 8003af2:	d100      	bne.n	8003af6 <HAL_TIM_PWM_Start_DMA+0x1ae>
 8003af4:	e080      	b.n	8003bf8 <HAL_TIM_PWM_Start_DMA+0x2b0>
 8003af6:	68bb      	ldr	r3, [r7, #8]
 8003af8:	2b0c      	cmp	r3, #12
 8003afa:	d900      	bls.n	8003afe <HAL_TIM_PWM_Start_DMA+0x1b6>
 8003afc:	e0a1      	b.n	8003c42 <HAL_TIM_PWM_Start_DMA+0x2fa>
 8003afe:	68bb      	ldr	r3, [r7, #8]
 8003b00:	2b08      	cmp	r3, #8
 8003b02:	d054      	beq.n	8003bae <HAL_TIM_PWM_Start_DMA+0x266>
 8003b04:	68bb      	ldr	r3, [r7, #8]
 8003b06:	2b08      	cmp	r3, #8
 8003b08:	d900      	bls.n	8003b0c <HAL_TIM_PWM_Start_DMA+0x1c4>
 8003b0a:	e09a      	b.n	8003c42 <HAL_TIM_PWM_Start_DMA+0x2fa>
 8003b0c:	68bb      	ldr	r3, [r7, #8]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d003      	beq.n	8003b1a <HAL_TIM_PWM_Start_DMA+0x1d2>
 8003b12:	68bb      	ldr	r3, [r7, #8]
 8003b14:	2b04      	cmp	r3, #4
 8003b16:	d025      	beq.n	8003b64 <HAL_TIM_PWM_Start_DMA+0x21c>
 8003b18:	e093      	b.n	8003c42 <HAL_TIM_PWM_Start_DMA+0x2fa>
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b1e:	4a7c      	ldr	r2, [pc, #496]	@ (8003d10 <HAL_TIM_PWM_Start_DMA+0x3c8>)
 8003b20:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b26:	4a7b      	ldr	r2, [pc, #492]	@ (8003d14 <HAL_TIM_PWM_Start_DMA+0x3cc>)
 8003b28:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b2e:	4a7a      	ldr	r2, [pc, #488]	@ (8003d18 <HAL_TIM_PWM_Start_DMA+0x3d0>)
 8003b30:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8003b36:	6879      	ldr	r1, [r7, #4]
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	3334      	adds	r3, #52	@ 0x34
 8003b3e:	001a      	movs	r2, r3
 8003b40:	1cbb      	adds	r3, r7, #2
 8003b42:	881b      	ldrh	r3, [r3, #0]
 8003b44:	f7fe fd5a 	bl	80025fc <HAL_DMA_Start_IT>
 8003b48:	1e03      	subs	r3, r0, #0
 8003b4a:	d001      	beq.n	8003b50 <HAL_TIM_PWM_Start_DMA+0x208>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003b4c:	2301      	movs	r3, #1
 8003b4e:	e0da      	b.n	8003d06 <HAL_TIM_PWM_Start_DMA+0x3be>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	68da      	ldr	r2, [r3, #12]
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	2180      	movs	r1, #128	@ 0x80
 8003b5c:	0089      	lsls	r1, r1, #2
 8003b5e:	430a      	orrs	r2, r1
 8003b60:	60da      	str	r2, [r3, #12]
      break;
 8003b62:	e073      	b.n	8003c4c <HAL_TIM_PWM_Start_DMA+0x304>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b68:	4a69      	ldr	r2, [pc, #420]	@ (8003d10 <HAL_TIM_PWM_Start_DMA+0x3c8>)
 8003b6a:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b70:	4a68      	ldr	r2, [pc, #416]	@ (8003d14 <HAL_TIM_PWM_Start_DMA+0x3cc>)
 8003b72:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b78:	4a67      	ldr	r2, [pc, #412]	@ (8003d18 <HAL_TIM_PWM_Start_DMA+0x3d0>)
 8003b7a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8003b80:	6879      	ldr	r1, [r7, #4]
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	3338      	adds	r3, #56	@ 0x38
 8003b88:	001a      	movs	r2, r3
 8003b8a:	1cbb      	adds	r3, r7, #2
 8003b8c:	881b      	ldrh	r3, [r3, #0]
 8003b8e:	f7fe fd35 	bl	80025fc <HAL_DMA_Start_IT>
 8003b92:	1e03      	subs	r3, r0, #0
 8003b94:	d001      	beq.n	8003b9a <HAL_TIM_PWM_Start_DMA+0x252>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003b96:	2301      	movs	r3, #1
 8003b98:	e0b5      	b.n	8003d06 <HAL_TIM_PWM_Start_DMA+0x3be>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	68da      	ldr	r2, [r3, #12]
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	2180      	movs	r1, #128	@ 0x80
 8003ba6:	00c9      	lsls	r1, r1, #3
 8003ba8:	430a      	orrs	r2, r1
 8003baa:	60da      	str	r2, [r3, #12]
      break;
 8003bac:	e04e      	b.n	8003c4c <HAL_TIM_PWM_Start_DMA+0x304>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bb2:	4a57      	ldr	r2, [pc, #348]	@ (8003d10 <HAL_TIM_PWM_Start_DMA+0x3c8>)
 8003bb4:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bba:	4a56      	ldr	r2, [pc, #344]	@ (8003d14 <HAL_TIM_PWM_Start_DMA+0x3cc>)
 8003bbc:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bc2:	4a55      	ldr	r2, [pc, #340]	@ (8003d18 <HAL_TIM_PWM_Start_DMA+0x3d0>)
 8003bc4:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8003bca:	6879      	ldr	r1, [r7, #4]
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	333c      	adds	r3, #60	@ 0x3c
 8003bd2:	001a      	movs	r2, r3
 8003bd4:	1cbb      	adds	r3, r7, #2
 8003bd6:	881b      	ldrh	r3, [r3, #0]
 8003bd8:	f7fe fd10 	bl	80025fc <HAL_DMA_Start_IT>
 8003bdc:	1e03      	subs	r3, r0, #0
 8003bde:	d001      	beq.n	8003be4 <HAL_TIM_PWM_Start_DMA+0x29c>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003be0:	2301      	movs	r3, #1
 8003be2:	e090      	b.n	8003d06 <HAL_TIM_PWM_Start_DMA+0x3be>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	68da      	ldr	r2, [r3, #12]
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	2180      	movs	r1, #128	@ 0x80
 8003bf0:	0109      	lsls	r1, r1, #4
 8003bf2:	430a      	orrs	r2, r1
 8003bf4:	60da      	str	r2, [r3, #12]
      break;
 8003bf6:	e029      	b.n	8003c4c <HAL_TIM_PWM_Start_DMA+0x304>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bfc:	4a44      	ldr	r2, [pc, #272]	@ (8003d10 <HAL_TIM_PWM_Start_DMA+0x3c8>)
 8003bfe:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c04:	4a43      	ldr	r2, [pc, #268]	@ (8003d14 <HAL_TIM_PWM_Start_DMA+0x3cc>)
 8003c06:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c0c:	4a42      	ldr	r2, [pc, #264]	@ (8003d18 <HAL_TIM_PWM_Start_DMA+0x3d0>)
 8003c0e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8003c14:	6879      	ldr	r1, [r7, #4]
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	3340      	adds	r3, #64	@ 0x40
 8003c1c:	001a      	movs	r2, r3
 8003c1e:	1cbb      	adds	r3, r7, #2
 8003c20:	881b      	ldrh	r3, [r3, #0]
 8003c22:	f7fe fceb 	bl	80025fc <HAL_DMA_Start_IT>
 8003c26:	1e03      	subs	r3, r0, #0
 8003c28:	d001      	beq.n	8003c2e <HAL_TIM_PWM_Start_DMA+0x2e6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003c2a:	2301      	movs	r3, #1
 8003c2c:	e06b      	b.n	8003d06 <HAL_TIM_PWM_Start_DMA+0x3be>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	68da      	ldr	r2, [r3, #12]
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	2180      	movs	r1, #128	@ 0x80
 8003c3a:	0149      	lsls	r1, r1, #5
 8003c3c:	430a      	orrs	r2, r1
 8003c3e:	60da      	str	r2, [r3, #12]
      break;
 8003c40:	e004      	b.n	8003c4c <HAL_TIM_PWM_Start_DMA+0x304>
    }

    default:
      status = HAL_ERROR;
 8003c42:	2317      	movs	r3, #23
 8003c44:	18fb      	adds	r3, r7, r3
 8003c46:	2201      	movs	r2, #1
 8003c48:	701a      	strb	r2, [r3, #0]
      break;
 8003c4a:	46c0      	nop			@ (mov r8, r8)
  }

  if (status == HAL_OK)
 8003c4c:	2317      	movs	r3, #23
 8003c4e:	18fb      	adds	r3, r7, r3
 8003c50:	781b      	ldrb	r3, [r3, #0]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d154      	bne.n	8003d00 <HAL_TIM_PWM_Start_DMA+0x3b8>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	68b9      	ldr	r1, [r7, #8]
 8003c5c:	2201      	movs	r2, #1
 8003c5e:	0018      	movs	r0, r3
 8003c60:	f000 fd62 	bl	8004728 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	4a2c      	ldr	r2, [pc, #176]	@ (8003d1c <HAL_TIM_PWM_Start_DMA+0x3d4>)
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d009      	beq.n	8003c82 <HAL_TIM_PWM_Start_DMA+0x33a>
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	4a2b      	ldr	r2, [pc, #172]	@ (8003d20 <HAL_TIM_PWM_Start_DMA+0x3d8>)
 8003c74:	4293      	cmp	r3, r2
 8003c76:	d004      	beq.n	8003c82 <HAL_TIM_PWM_Start_DMA+0x33a>
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	4a29      	ldr	r2, [pc, #164]	@ (8003d24 <HAL_TIM_PWM_Start_DMA+0x3dc>)
 8003c7e:	4293      	cmp	r3, r2
 8003c80:	d101      	bne.n	8003c86 <HAL_TIM_PWM_Start_DMA+0x33e>
 8003c82:	2301      	movs	r3, #1
 8003c84:	e000      	b.n	8003c88 <HAL_TIM_PWM_Start_DMA+0x340>
 8003c86:	2300      	movs	r3, #0
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d008      	beq.n	8003c9e <HAL_TIM_PWM_Start_DMA+0x356>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	2180      	movs	r1, #128	@ 0x80
 8003c98:	0209      	lsls	r1, r1, #8
 8003c9a:	430a      	orrs	r2, r1
 8003c9c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	4a1e      	ldr	r2, [pc, #120]	@ (8003d1c <HAL_TIM_PWM_Start_DMA+0x3d4>)
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	d00a      	beq.n	8003cbe <HAL_TIM_PWM_Start_DMA+0x376>
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681a      	ldr	r2, [r3, #0]
 8003cac:	2380      	movs	r3, #128	@ 0x80
 8003cae:	05db      	lsls	r3, r3, #23
 8003cb0:	429a      	cmp	r2, r3
 8003cb2:	d004      	beq.n	8003cbe <HAL_TIM_PWM_Start_DMA+0x376>
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	4a1b      	ldr	r2, [pc, #108]	@ (8003d28 <HAL_TIM_PWM_Start_DMA+0x3e0>)
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	d116      	bne.n	8003cec <HAL_TIM_PWM_Start_DMA+0x3a4>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	689b      	ldr	r3, [r3, #8]
 8003cc4:	4a19      	ldr	r2, [pc, #100]	@ (8003d2c <HAL_TIM_PWM_Start_DMA+0x3e4>)
 8003cc6:	4013      	ands	r3, r2
 8003cc8:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003cca:	693b      	ldr	r3, [r7, #16]
 8003ccc:	2b06      	cmp	r3, #6
 8003cce:	d016      	beq.n	8003cfe <HAL_TIM_PWM_Start_DMA+0x3b6>
 8003cd0:	693a      	ldr	r2, [r7, #16]
 8003cd2:	2380      	movs	r3, #128	@ 0x80
 8003cd4:	025b      	lsls	r3, r3, #9
 8003cd6:	429a      	cmp	r2, r3
 8003cd8:	d011      	beq.n	8003cfe <HAL_TIM_PWM_Start_DMA+0x3b6>
      {
        __HAL_TIM_ENABLE(htim);
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	681a      	ldr	r2, [r3, #0]
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	2101      	movs	r1, #1
 8003ce6:	430a      	orrs	r2, r1
 8003ce8:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003cea:	e008      	b.n	8003cfe <HAL_TIM_PWM_Start_DMA+0x3b6>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	681a      	ldr	r2, [r3, #0]
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	2101      	movs	r1, #1
 8003cf8:	430a      	orrs	r2, r1
 8003cfa:	601a      	str	r2, [r3, #0]
 8003cfc:	e000      	b.n	8003d00 <HAL_TIM_PWM_Start_DMA+0x3b8>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003cfe:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Return function status */
  return status;
 8003d00:	2317      	movs	r3, #23
 8003d02:	18fb      	adds	r3, r7, r3
 8003d04:	781b      	ldrb	r3, [r3, #0]
}
 8003d06:	0018      	movs	r0, r3
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	b006      	add	sp, #24
 8003d0c:	bd80      	pop	{r7, pc}
 8003d0e:	46c0      	nop			@ (mov r8, r8)
 8003d10:	08003fd5 	.word	0x08003fd5
 8003d14:	0800407f 	.word	0x0800407f
 8003d18:	08003f41 	.word	0x08003f41
 8003d1c:	40012c00 	.word	0x40012c00
 8003d20:	40014400 	.word	0x40014400
 8003d24:	40014800 	.word	0x40014800
 8003d28:	40000400 	.word	0x40000400
 8003d2c:	00010007 	.word	0x00010007

08003d30 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b086      	sub	sp, #24
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	60f8      	str	r0, [r7, #12]
 8003d38:	60b9      	str	r1, [r7, #8]
 8003d3a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d3c:	2317      	movs	r3, #23
 8003d3e:	18fb      	adds	r3, r7, r3
 8003d40:	2200      	movs	r2, #0
 8003d42:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	223c      	movs	r2, #60	@ 0x3c
 8003d48:	5c9b      	ldrb	r3, [r3, r2]
 8003d4a:	2b01      	cmp	r3, #1
 8003d4c:	d101      	bne.n	8003d52 <HAL_TIM_PWM_ConfigChannel+0x22>
 8003d4e:	2302      	movs	r3, #2
 8003d50:	e0e5      	b.n	8003f1e <HAL_TIM_PWM_ConfigChannel+0x1ee>
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	223c      	movs	r2, #60	@ 0x3c
 8003d56:	2101      	movs	r1, #1
 8003d58:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	2b14      	cmp	r3, #20
 8003d5e:	d900      	bls.n	8003d62 <HAL_TIM_PWM_ConfigChannel+0x32>
 8003d60:	e0d1      	b.n	8003f06 <HAL_TIM_PWM_ConfigChannel+0x1d6>
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	009a      	lsls	r2, r3, #2
 8003d66:	4b70      	ldr	r3, [pc, #448]	@ (8003f28 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8003d68:	18d3      	adds	r3, r2, r3
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	68ba      	ldr	r2, [r7, #8]
 8003d74:	0011      	movs	r1, r2
 8003d76:	0018      	movs	r0, r3
 8003d78:	f000 fa3a 	bl	80041f0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	699a      	ldr	r2, [r3, #24]
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	2108      	movs	r1, #8
 8003d88:	430a      	orrs	r2, r1
 8003d8a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	699a      	ldr	r2, [r3, #24]
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	2104      	movs	r1, #4
 8003d98:	438a      	bics	r2, r1
 8003d9a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	6999      	ldr	r1, [r3, #24]
 8003da2:	68bb      	ldr	r3, [r7, #8]
 8003da4:	691a      	ldr	r2, [r3, #16]
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	430a      	orrs	r2, r1
 8003dac:	619a      	str	r2, [r3, #24]
      break;
 8003dae:	e0af      	b.n	8003f10 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	68ba      	ldr	r2, [r7, #8]
 8003db6:	0011      	movs	r1, r2
 8003db8:	0018      	movs	r0, r3
 8003dba:	f000 fa99 	bl	80042f0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	699a      	ldr	r2, [r3, #24]
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	2180      	movs	r1, #128	@ 0x80
 8003dca:	0109      	lsls	r1, r1, #4
 8003dcc:	430a      	orrs	r2, r1
 8003dce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	699a      	ldr	r2, [r3, #24]
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	4954      	ldr	r1, [pc, #336]	@ (8003f2c <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8003ddc:	400a      	ands	r2, r1
 8003dde:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	6999      	ldr	r1, [r3, #24]
 8003de6:	68bb      	ldr	r3, [r7, #8]
 8003de8:	691b      	ldr	r3, [r3, #16]
 8003dea:	021a      	lsls	r2, r3, #8
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	430a      	orrs	r2, r1
 8003df2:	619a      	str	r2, [r3, #24]
      break;
 8003df4:	e08c      	b.n	8003f10 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	68ba      	ldr	r2, [r7, #8]
 8003dfc:	0011      	movs	r1, r2
 8003dfe:	0018      	movs	r0, r3
 8003e00:	f000 faf4 	bl	80043ec <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	69da      	ldr	r2, [r3, #28]
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	2108      	movs	r1, #8
 8003e10:	430a      	orrs	r2, r1
 8003e12:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	69da      	ldr	r2, [r3, #28]
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	2104      	movs	r1, #4
 8003e20:	438a      	bics	r2, r1
 8003e22:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	69d9      	ldr	r1, [r3, #28]
 8003e2a:	68bb      	ldr	r3, [r7, #8]
 8003e2c:	691a      	ldr	r2, [r3, #16]
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	430a      	orrs	r2, r1
 8003e34:	61da      	str	r2, [r3, #28]
      break;
 8003e36:	e06b      	b.n	8003f10 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	68ba      	ldr	r2, [r7, #8]
 8003e3e:	0011      	movs	r1, r2
 8003e40:	0018      	movs	r0, r3
 8003e42:	f000 fb55 	bl	80044f0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	69da      	ldr	r2, [r3, #28]
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	2180      	movs	r1, #128	@ 0x80
 8003e52:	0109      	lsls	r1, r1, #4
 8003e54:	430a      	orrs	r2, r1
 8003e56:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	69da      	ldr	r2, [r3, #28]
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	4932      	ldr	r1, [pc, #200]	@ (8003f2c <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8003e64:	400a      	ands	r2, r1
 8003e66:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	69d9      	ldr	r1, [r3, #28]
 8003e6e:	68bb      	ldr	r3, [r7, #8]
 8003e70:	691b      	ldr	r3, [r3, #16]
 8003e72:	021a      	lsls	r2, r3, #8
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	430a      	orrs	r2, r1
 8003e7a:	61da      	str	r2, [r3, #28]
      break;
 8003e7c:	e048      	b.n	8003f10 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	68ba      	ldr	r2, [r7, #8]
 8003e84:	0011      	movs	r1, r2
 8003e86:	0018      	movs	r0, r3
 8003e88:	f000 fb96 	bl	80045b8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	2108      	movs	r1, #8
 8003e98:	430a      	orrs	r2, r1
 8003e9a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	2104      	movs	r1, #4
 8003ea8:	438a      	bics	r2, r1
 8003eaa:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8003eb2:	68bb      	ldr	r3, [r7, #8]
 8003eb4:	691a      	ldr	r2, [r3, #16]
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	430a      	orrs	r2, r1
 8003ebc:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8003ebe:	e027      	b.n	8003f10 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	68ba      	ldr	r2, [r7, #8]
 8003ec6:	0011      	movs	r1, r2
 8003ec8:	0018      	movs	r0, r3
 8003eca:	f000 fbcf 	bl	800466c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	2180      	movs	r1, #128	@ 0x80
 8003eda:	0109      	lsls	r1, r1, #4
 8003edc:	430a      	orrs	r2, r1
 8003ede:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	4910      	ldr	r1, [pc, #64]	@ (8003f2c <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8003eec:	400a      	ands	r2, r1
 8003eee:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8003ef6:	68bb      	ldr	r3, [r7, #8]
 8003ef8:	691b      	ldr	r3, [r3, #16]
 8003efa:	021a      	lsls	r2, r3, #8
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	430a      	orrs	r2, r1
 8003f02:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8003f04:	e004      	b.n	8003f10 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 8003f06:	2317      	movs	r3, #23
 8003f08:	18fb      	adds	r3, r7, r3
 8003f0a:	2201      	movs	r2, #1
 8003f0c:	701a      	strb	r2, [r3, #0]
      break;
 8003f0e:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	223c      	movs	r2, #60	@ 0x3c
 8003f14:	2100      	movs	r1, #0
 8003f16:	5499      	strb	r1, [r3, r2]

  return status;
 8003f18:	2317      	movs	r3, #23
 8003f1a:	18fb      	adds	r3, r7, r3
 8003f1c:	781b      	ldrb	r3, [r3, #0]
}
 8003f1e:	0018      	movs	r0, r3
 8003f20:	46bd      	mov	sp, r7
 8003f22:	b006      	add	sp, #24
 8003f24:	bd80      	pop	{r7, pc}
 8003f26:	46c0      	nop			@ (mov r8, r8)
 8003f28:	0800496c 	.word	0x0800496c
 8003f2c:	fffffbff 	.word	0xfffffbff

08003f30 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	b082      	sub	sp, #8
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8003f38:	46c0      	nop			@ (mov r8, r8)
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	b002      	add	sp, #8
 8003f3e:	bd80      	pop	{r7, pc}

08003f40 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b084      	sub	sp, #16
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f4c:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f52:	687a      	ldr	r2, [r7, #4]
 8003f54:	429a      	cmp	r2, r3
 8003f56:	d107      	bne.n	8003f68 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	2201      	movs	r2, #1
 8003f5c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	223e      	movs	r2, #62	@ 0x3e
 8003f62:	2101      	movs	r1, #1
 8003f64:	5499      	strb	r1, [r3, r2]
 8003f66:	e02a      	b.n	8003fbe <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f6c:	687a      	ldr	r2, [r7, #4]
 8003f6e:	429a      	cmp	r2, r3
 8003f70:	d107      	bne.n	8003f82 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	2202      	movs	r2, #2
 8003f76:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	223f      	movs	r2, #63	@ 0x3f
 8003f7c:	2101      	movs	r1, #1
 8003f7e:	5499      	strb	r1, [r3, r2]
 8003f80:	e01d      	b.n	8003fbe <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f86:	687a      	ldr	r2, [r7, #4]
 8003f88:	429a      	cmp	r2, r3
 8003f8a:	d107      	bne.n	8003f9c <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	2204      	movs	r2, #4
 8003f90:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	2240      	movs	r2, #64	@ 0x40
 8003f96:	2101      	movs	r1, #1
 8003f98:	5499      	strb	r1, [r3, r2]
 8003f9a:	e010      	b.n	8003fbe <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fa0:	687a      	ldr	r2, [r7, #4]
 8003fa2:	429a      	cmp	r2, r3
 8003fa4:	d107      	bne.n	8003fb6 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	2208      	movs	r2, #8
 8003faa:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	2241      	movs	r2, #65	@ 0x41
 8003fb0:	2101      	movs	r1, #1
 8003fb2:	5499      	strb	r1, [r3, r2]
 8003fb4:	e003      	b.n	8003fbe <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	223d      	movs	r2, #61	@ 0x3d
 8003fba:	2101      	movs	r1, #1
 8003fbc:	5499      	strb	r1, [r3, r2]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	0018      	movs	r0, r3
 8003fc2:	f7ff ffb5 	bl	8003f30 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	2200      	movs	r2, #0
 8003fca:	771a      	strb	r2, [r3, #28]
}
 8003fcc:	46c0      	nop			@ (mov r8, r8)
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	b004      	add	sp, #16
 8003fd2:	bd80      	pop	{r7, pc}

08003fd4 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	b084      	sub	sp, #16
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fe0:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fe6:	687a      	ldr	r2, [r7, #4]
 8003fe8:	429a      	cmp	r2, r3
 8003fea:	d10b      	bne.n	8004004 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	2201      	movs	r2, #1
 8003ff0:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	69db      	ldr	r3, [r3, #28]
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d136      	bne.n	8004068 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	223e      	movs	r2, #62	@ 0x3e
 8003ffe:	2101      	movs	r1, #1
 8004000:	5499      	strb	r1, [r3, r2]
 8004002:	e031      	b.n	8004068 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004008:	687a      	ldr	r2, [r7, #4]
 800400a:	429a      	cmp	r2, r3
 800400c:	d10b      	bne.n	8004026 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	2202      	movs	r2, #2
 8004012:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	69db      	ldr	r3, [r3, #28]
 8004018:	2b00      	cmp	r3, #0
 800401a:	d125      	bne.n	8004068 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	223f      	movs	r2, #63	@ 0x3f
 8004020:	2101      	movs	r1, #1
 8004022:	5499      	strb	r1, [r3, r2]
 8004024:	e020      	b.n	8004068 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800402a:	687a      	ldr	r2, [r7, #4]
 800402c:	429a      	cmp	r2, r3
 800402e:	d10b      	bne.n	8004048 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	2204      	movs	r2, #4
 8004034:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	69db      	ldr	r3, [r3, #28]
 800403a:	2b00      	cmp	r3, #0
 800403c:	d114      	bne.n	8004068 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	2240      	movs	r2, #64	@ 0x40
 8004042:	2101      	movs	r1, #1
 8004044:	5499      	strb	r1, [r3, r2]
 8004046:	e00f      	b.n	8004068 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800404c:	687a      	ldr	r2, [r7, #4]
 800404e:	429a      	cmp	r2, r3
 8004050:	d10a      	bne.n	8004068 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	2208      	movs	r2, #8
 8004056:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	69db      	ldr	r3, [r3, #28]
 800405c:	2b00      	cmp	r3, #0
 800405e:	d103      	bne.n	8004068 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	2241      	movs	r2, #65	@ 0x41
 8004064:	2101      	movs	r1, #1
 8004066:	5499      	strb	r1, [r3, r2]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	0018      	movs	r0, r3
 800406c:	f7fd fcea 	bl	8001a44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	2200      	movs	r2, #0
 8004074:	771a      	strb	r2, [r3, #28]
}
 8004076:	46c0      	nop			@ (mov r8, r8)
 8004078:	46bd      	mov	sp, r7
 800407a:	b004      	add	sp, #16
 800407c:	bd80      	pop	{r7, pc}

0800407e <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 800407e:	b580      	push	{r7, lr}
 8004080:	b084      	sub	sp, #16
 8004082:	af00      	add	r7, sp, #0
 8004084:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800408a:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004090:	687a      	ldr	r2, [r7, #4]
 8004092:	429a      	cmp	r2, r3
 8004094:	d103      	bne.n	800409e <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	2201      	movs	r2, #1
 800409a:	771a      	strb	r2, [r3, #28]
 800409c:	e019      	b.n	80040d2 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040a2:	687a      	ldr	r2, [r7, #4]
 80040a4:	429a      	cmp	r2, r3
 80040a6:	d103      	bne.n	80040b0 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	2202      	movs	r2, #2
 80040ac:	771a      	strb	r2, [r3, #28]
 80040ae:	e010      	b.n	80040d2 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040b4:	687a      	ldr	r2, [r7, #4]
 80040b6:	429a      	cmp	r2, r3
 80040b8:	d103      	bne.n	80040c2 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	2204      	movs	r2, #4
 80040be:	771a      	strb	r2, [r3, #28]
 80040c0:	e007      	b.n	80040d2 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040c6:	687a      	ldr	r2, [r7, #4]
 80040c8:	429a      	cmp	r2, r3
 80040ca:	d102      	bne.n	80040d2 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	2208      	movs	r2, #8
 80040d0:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	0018      	movs	r0, r3
 80040d6:	f7fd fccb 	bl	8001a70 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	2200      	movs	r2, #0
 80040de:	771a      	strb	r2, [r3, #28]
}
 80040e0:	46c0      	nop			@ (mov r8, r8)
 80040e2:	46bd      	mov	sp, r7
 80040e4:	b004      	add	sp, #16
 80040e6:	bd80      	pop	{r7, pc}

080040e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b084      	sub	sp, #16
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
 80040f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	4a37      	ldr	r2, [pc, #220]	@ (80041d8 <TIM_Base_SetConfig+0xf0>)
 80040fc:	4293      	cmp	r3, r2
 80040fe:	d008      	beq.n	8004112 <TIM_Base_SetConfig+0x2a>
 8004100:	687a      	ldr	r2, [r7, #4]
 8004102:	2380      	movs	r3, #128	@ 0x80
 8004104:	05db      	lsls	r3, r3, #23
 8004106:	429a      	cmp	r2, r3
 8004108:	d003      	beq.n	8004112 <TIM_Base_SetConfig+0x2a>
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	4a33      	ldr	r2, [pc, #204]	@ (80041dc <TIM_Base_SetConfig+0xf4>)
 800410e:	4293      	cmp	r3, r2
 8004110:	d108      	bne.n	8004124 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	2270      	movs	r2, #112	@ 0x70
 8004116:	4393      	bics	r3, r2
 8004118:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800411a:	683b      	ldr	r3, [r7, #0]
 800411c:	685b      	ldr	r3, [r3, #4]
 800411e:	68fa      	ldr	r2, [r7, #12]
 8004120:	4313      	orrs	r3, r2
 8004122:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	4a2c      	ldr	r2, [pc, #176]	@ (80041d8 <TIM_Base_SetConfig+0xf0>)
 8004128:	4293      	cmp	r3, r2
 800412a:	d014      	beq.n	8004156 <TIM_Base_SetConfig+0x6e>
 800412c:	687a      	ldr	r2, [r7, #4]
 800412e:	2380      	movs	r3, #128	@ 0x80
 8004130:	05db      	lsls	r3, r3, #23
 8004132:	429a      	cmp	r2, r3
 8004134:	d00f      	beq.n	8004156 <TIM_Base_SetConfig+0x6e>
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	4a28      	ldr	r2, [pc, #160]	@ (80041dc <TIM_Base_SetConfig+0xf4>)
 800413a:	4293      	cmp	r3, r2
 800413c:	d00b      	beq.n	8004156 <TIM_Base_SetConfig+0x6e>
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	4a27      	ldr	r2, [pc, #156]	@ (80041e0 <TIM_Base_SetConfig+0xf8>)
 8004142:	4293      	cmp	r3, r2
 8004144:	d007      	beq.n	8004156 <TIM_Base_SetConfig+0x6e>
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	4a26      	ldr	r2, [pc, #152]	@ (80041e4 <TIM_Base_SetConfig+0xfc>)
 800414a:	4293      	cmp	r3, r2
 800414c:	d003      	beq.n	8004156 <TIM_Base_SetConfig+0x6e>
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	4a25      	ldr	r2, [pc, #148]	@ (80041e8 <TIM_Base_SetConfig+0x100>)
 8004152:	4293      	cmp	r3, r2
 8004154:	d108      	bne.n	8004168 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	4a24      	ldr	r2, [pc, #144]	@ (80041ec <TIM_Base_SetConfig+0x104>)
 800415a:	4013      	ands	r3, r2
 800415c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800415e:	683b      	ldr	r3, [r7, #0]
 8004160:	68db      	ldr	r3, [r3, #12]
 8004162:	68fa      	ldr	r2, [r7, #12]
 8004164:	4313      	orrs	r3, r2
 8004166:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	2280      	movs	r2, #128	@ 0x80
 800416c:	4393      	bics	r3, r2
 800416e:	001a      	movs	r2, r3
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	695b      	ldr	r3, [r3, #20]
 8004174:	4313      	orrs	r3, r2
 8004176:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	68fa      	ldr	r2, [r7, #12]
 800417c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800417e:	683b      	ldr	r3, [r7, #0]
 8004180:	689a      	ldr	r2, [r3, #8]
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	681a      	ldr	r2, [r3, #0]
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	4a11      	ldr	r2, [pc, #68]	@ (80041d8 <TIM_Base_SetConfig+0xf0>)
 8004192:	4293      	cmp	r3, r2
 8004194:	d007      	beq.n	80041a6 <TIM_Base_SetConfig+0xbe>
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	4a12      	ldr	r2, [pc, #72]	@ (80041e4 <TIM_Base_SetConfig+0xfc>)
 800419a:	4293      	cmp	r3, r2
 800419c:	d003      	beq.n	80041a6 <TIM_Base_SetConfig+0xbe>
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	4a11      	ldr	r2, [pc, #68]	@ (80041e8 <TIM_Base_SetConfig+0x100>)
 80041a2:	4293      	cmp	r3, r2
 80041a4:	d103      	bne.n	80041ae <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80041a6:	683b      	ldr	r3, [r7, #0]
 80041a8:	691a      	ldr	r2, [r3, #16]
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	2201      	movs	r2, #1
 80041b2:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	691b      	ldr	r3, [r3, #16]
 80041b8:	2201      	movs	r2, #1
 80041ba:	4013      	ands	r3, r2
 80041bc:	2b01      	cmp	r3, #1
 80041be:	d106      	bne.n	80041ce <TIM_Base_SetConfig+0xe6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	691b      	ldr	r3, [r3, #16]
 80041c4:	2201      	movs	r2, #1
 80041c6:	4393      	bics	r3, r2
 80041c8:	001a      	movs	r2, r3
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	611a      	str	r2, [r3, #16]
  }
}
 80041ce:	46c0      	nop			@ (mov r8, r8)
 80041d0:	46bd      	mov	sp, r7
 80041d2:	b004      	add	sp, #16
 80041d4:	bd80      	pop	{r7, pc}
 80041d6:	46c0      	nop			@ (mov r8, r8)
 80041d8:	40012c00 	.word	0x40012c00
 80041dc:	40000400 	.word	0x40000400
 80041e0:	40002000 	.word	0x40002000
 80041e4:	40014400 	.word	0x40014400
 80041e8:	40014800 	.word	0x40014800
 80041ec:	fffffcff 	.word	0xfffffcff

080041f0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b086      	sub	sp, #24
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
 80041f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6a1b      	ldr	r3, [r3, #32]
 80041fe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	6a1b      	ldr	r3, [r3, #32]
 8004204:	2201      	movs	r2, #1
 8004206:	4393      	bics	r3, r2
 8004208:	001a      	movs	r2, r3
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	685b      	ldr	r3, [r3, #4]
 8004212:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	699b      	ldr	r3, [r3, #24]
 8004218:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	4a2e      	ldr	r2, [pc, #184]	@ (80042d8 <TIM_OC1_SetConfig+0xe8>)
 800421e:	4013      	ands	r3, r2
 8004220:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	2203      	movs	r2, #3
 8004226:	4393      	bics	r3, r2
 8004228:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	68fa      	ldr	r2, [r7, #12]
 8004230:	4313      	orrs	r3, r2
 8004232:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004234:	697b      	ldr	r3, [r7, #20]
 8004236:	2202      	movs	r2, #2
 8004238:	4393      	bics	r3, r2
 800423a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	689b      	ldr	r3, [r3, #8]
 8004240:	697a      	ldr	r2, [r7, #20]
 8004242:	4313      	orrs	r3, r2
 8004244:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	4a24      	ldr	r2, [pc, #144]	@ (80042dc <TIM_OC1_SetConfig+0xec>)
 800424a:	4293      	cmp	r3, r2
 800424c:	d007      	beq.n	800425e <TIM_OC1_SetConfig+0x6e>
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	4a23      	ldr	r2, [pc, #140]	@ (80042e0 <TIM_OC1_SetConfig+0xf0>)
 8004252:	4293      	cmp	r3, r2
 8004254:	d003      	beq.n	800425e <TIM_OC1_SetConfig+0x6e>
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	4a22      	ldr	r2, [pc, #136]	@ (80042e4 <TIM_OC1_SetConfig+0xf4>)
 800425a:	4293      	cmp	r3, r2
 800425c:	d10c      	bne.n	8004278 <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800425e:	697b      	ldr	r3, [r7, #20]
 8004260:	2208      	movs	r2, #8
 8004262:	4393      	bics	r3, r2
 8004264:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004266:	683b      	ldr	r3, [r7, #0]
 8004268:	68db      	ldr	r3, [r3, #12]
 800426a:	697a      	ldr	r2, [r7, #20]
 800426c:	4313      	orrs	r3, r2
 800426e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004270:	697b      	ldr	r3, [r7, #20]
 8004272:	2204      	movs	r2, #4
 8004274:	4393      	bics	r3, r2
 8004276:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	4a18      	ldr	r2, [pc, #96]	@ (80042dc <TIM_OC1_SetConfig+0xec>)
 800427c:	4293      	cmp	r3, r2
 800427e:	d007      	beq.n	8004290 <TIM_OC1_SetConfig+0xa0>
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	4a17      	ldr	r2, [pc, #92]	@ (80042e0 <TIM_OC1_SetConfig+0xf0>)
 8004284:	4293      	cmp	r3, r2
 8004286:	d003      	beq.n	8004290 <TIM_OC1_SetConfig+0xa0>
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	4a16      	ldr	r2, [pc, #88]	@ (80042e4 <TIM_OC1_SetConfig+0xf4>)
 800428c:	4293      	cmp	r3, r2
 800428e:	d111      	bne.n	80042b4 <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004290:	693b      	ldr	r3, [r7, #16]
 8004292:	4a15      	ldr	r2, [pc, #84]	@ (80042e8 <TIM_OC1_SetConfig+0xf8>)
 8004294:	4013      	ands	r3, r2
 8004296:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004298:	693b      	ldr	r3, [r7, #16]
 800429a:	4a14      	ldr	r2, [pc, #80]	@ (80042ec <TIM_OC1_SetConfig+0xfc>)
 800429c:	4013      	ands	r3, r2
 800429e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	695b      	ldr	r3, [r3, #20]
 80042a4:	693a      	ldr	r2, [r7, #16]
 80042a6:	4313      	orrs	r3, r2
 80042a8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	699b      	ldr	r3, [r3, #24]
 80042ae:	693a      	ldr	r2, [r7, #16]
 80042b0:	4313      	orrs	r3, r2
 80042b2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	693a      	ldr	r2, [r7, #16]
 80042b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	68fa      	ldr	r2, [r7, #12]
 80042be:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	685a      	ldr	r2, [r3, #4]
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	697a      	ldr	r2, [r7, #20]
 80042cc:	621a      	str	r2, [r3, #32]
}
 80042ce:	46c0      	nop			@ (mov r8, r8)
 80042d0:	46bd      	mov	sp, r7
 80042d2:	b006      	add	sp, #24
 80042d4:	bd80      	pop	{r7, pc}
 80042d6:	46c0      	nop			@ (mov r8, r8)
 80042d8:	fffeff8f 	.word	0xfffeff8f
 80042dc:	40012c00 	.word	0x40012c00
 80042e0:	40014400 	.word	0x40014400
 80042e4:	40014800 	.word	0x40014800
 80042e8:	fffffeff 	.word	0xfffffeff
 80042ec:	fffffdff 	.word	0xfffffdff

080042f0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b086      	sub	sp, #24
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
 80042f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6a1b      	ldr	r3, [r3, #32]
 80042fe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	6a1b      	ldr	r3, [r3, #32]
 8004304:	2210      	movs	r2, #16
 8004306:	4393      	bics	r3, r2
 8004308:	001a      	movs	r2, r3
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	685b      	ldr	r3, [r3, #4]
 8004312:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	699b      	ldr	r3, [r3, #24]
 8004318:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	4a2c      	ldr	r2, [pc, #176]	@ (80043d0 <TIM_OC2_SetConfig+0xe0>)
 800431e:	4013      	ands	r3, r2
 8004320:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	4a2b      	ldr	r2, [pc, #172]	@ (80043d4 <TIM_OC2_SetConfig+0xe4>)
 8004326:	4013      	ands	r3, r2
 8004328:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	021b      	lsls	r3, r3, #8
 8004330:	68fa      	ldr	r2, [r7, #12]
 8004332:	4313      	orrs	r3, r2
 8004334:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004336:	697b      	ldr	r3, [r7, #20]
 8004338:	2220      	movs	r2, #32
 800433a:	4393      	bics	r3, r2
 800433c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	689b      	ldr	r3, [r3, #8]
 8004342:	011b      	lsls	r3, r3, #4
 8004344:	697a      	ldr	r2, [r7, #20]
 8004346:	4313      	orrs	r3, r2
 8004348:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	4a22      	ldr	r2, [pc, #136]	@ (80043d8 <TIM_OC2_SetConfig+0xe8>)
 800434e:	4293      	cmp	r3, r2
 8004350:	d10d      	bne.n	800436e <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004352:	697b      	ldr	r3, [r7, #20]
 8004354:	2280      	movs	r2, #128	@ 0x80
 8004356:	4393      	bics	r3, r2
 8004358:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800435a:	683b      	ldr	r3, [r7, #0]
 800435c:	68db      	ldr	r3, [r3, #12]
 800435e:	011b      	lsls	r3, r3, #4
 8004360:	697a      	ldr	r2, [r7, #20]
 8004362:	4313      	orrs	r3, r2
 8004364:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004366:	697b      	ldr	r3, [r7, #20]
 8004368:	2240      	movs	r2, #64	@ 0x40
 800436a:	4393      	bics	r3, r2
 800436c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	4a19      	ldr	r2, [pc, #100]	@ (80043d8 <TIM_OC2_SetConfig+0xe8>)
 8004372:	4293      	cmp	r3, r2
 8004374:	d007      	beq.n	8004386 <TIM_OC2_SetConfig+0x96>
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	4a18      	ldr	r2, [pc, #96]	@ (80043dc <TIM_OC2_SetConfig+0xec>)
 800437a:	4293      	cmp	r3, r2
 800437c:	d003      	beq.n	8004386 <TIM_OC2_SetConfig+0x96>
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	4a17      	ldr	r2, [pc, #92]	@ (80043e0 <TIM_OC2_SetConfig+0xf0>)
 8004382:	4293      	cmp	r3, r2
 8004384:	d113      	bne.n	80043ae <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004386:	693b      	ldr	r3, [r7, #16]
 8004388:	4a16      	ldr	r2, [pc, #88]	@ (80043e4 <TIM_OC2_SetConfig+0xf4>)
 800438a:	4013      	ands	r3, r2
 800438c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800438e:	693b      	ldr	r3, [r7, #16]
 8004390:	4a15      	ldr	r2, [pc, #84]	@ (80043e8 <TIM_OC2_SetConfig+0xf8>)
 8004392:	4013      	ands	r3, r2
 8004394:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004396:	683b      	ldr	r3, [r7, #0]
 8004398:	695b      	ldr	r3, [r3, #20]
 800439a:	009b      	lsls	r3, r3, #2
 800439c:	693a      	ldr	r2, [r7, #16]
 800439e:	4313      	orrs	r3, r2
 80043a0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80043a2:	683b      	ldr	r3, [r7, #0]
 80043a4:	699b      	ldr	r3, [r3, #24]
 80043a6:	009b      	lsls	r3, r3, #2
 80043a8:	693a      	ldr	r2, [r7, #16]
 80043aa:	4313      	orrs	r3, r2
 80043ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	693a      	ldr	r2, [r7, #16]
 80043b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	68fa      	ldr	r2, [r7, #12]
 80043b8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80043ba:	683b      	ldr	r3, [r7, #0]
 80043bc:	685a      	ldr	r2, [r3, #4]
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	697a      	ldr	r2, [r7, #20]
 80043c6:	621a      	str	r2, [r3, #32]
}
 80043c8:	46c0      	nop			@ (mov r8, r8)
 80043ca:	46bd      	mov	sp, r7
 80043cc:	b006      	add	sp, #24
 80043ce:	bd80      	pop	{r7, pc}
 80043d0:	feff8fff 	.word	0xfeff8fff
 80043d4:	fffffcff 	.word	0xfffffcff
 80043d8:	40012c00 	.word	0x40012c00
 80043dc:	40014400 	.word	0x40014400
 80043e0:	40014800 	.word	0x40014800
 80043e4:	fffffbff 	.word	0xfffffbff
 80043e8:	fffff7ff 	.word	0xfffff7ff

080043ec <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b086      	sub	sp, #24
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
 80043f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6a1b      	ldr	r3, [r3, #32]
 80043fa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	6a1b      	ldr	r3, [r3, #32]
 8004400:	4a31      	ldr	r2, [pc, #196]	@ (80044c8 <TIM_OC3_SetConfig+0xdc>)
 8004402:	401a      	ands	r2, r3
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	685b      	ldr	r3, [r3, #4]
 800440c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	69db      	ldr	r3, [r3, #28]
 8004412:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	4a2d      	ldr	r2, [pc, #180]	@ (80044cc <TIM_OC3_SetConfig+0xe0>)
 8004418:	4013      	ands	r3, r2
 800441a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	2203      	movs	r2, #3
 8004420:	4393      	bics	r3, r2
 8004422:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	68fa      	ldr	r2, [r7, #12]
 800442a:	4313      	orrs	r3, r2
 800442c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800442e:	697b      	ldr	r3, [r7, #20]
 8004430:	4a27      	ldr	r2, [pc, #156]	@ (80044d0 <TIM_OC3_SetConfig+0xe4>)
 8004432:	4013      	ands	r3, r2
 8004434:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004436:	683b      	ldr	r3, [r7, #0]
 8004438:	689b      	ldr	r3, [r3, #8]
 800443a:	021b      	lsls	r3, r3, #8
 800443c:	697a      	ldr	r2, [r7, #20]
 800443e:	4313      	orrs	r3, r2
 8004440:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	4a23      	ldr	r2, [pc, #140]	@ (80044d4 <TIM_OC3_SetConfig+0xe8>)
 8004446:	4293      	cmp	r3, r2
 8004448:	d10d      	bne.n	8004466 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800444a:	697b      	ldr	r3, [r7, #20]
 800444c:	4a22      	ldr	r2, [pc, #136]	@ (80044d8 <TIM_OC3_SetConfig+0xec>)
 800444e:	4013      	ands	r3, r2
 8004450:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	68db      	ldr	r3, [r3, #12]
 8004456:	021b      	lsls	r3, r3, #8
 8004458:	697a      	ldr	r2, [r7, #20]
 800445a:	4313      	orrs	r3, r2
 800445c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800445e:	697b      	ldr	r3, [r7, #20]
 8004460:	4a1e      	ldr	r2, [pc, #120]	@ (80044dc <TIM_OC3_SetConfig+0xf0>)
 8004462:	4013      	ands	r3, r2
 8004464:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	4a1a      	ldr	r2, [pc, #104]	@ (80044d4 <TIM_OC3_SetConfig+0xe8>)
 800446a:	4293      	cmp	r3, r2
 800446c:	d007      	beq.n	800447e <TIM_OC3_SetConfig+0x92>
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	4a1b      	ldr	r2, [pc, #108]	@ (80044e0 <TIM_OC3_SetConfig+0xf4>)
 8004472:	4293      	cmp	r3, r2
 8004474:	d003      	beq.n	800447e <TIM_OC3_SetConfig+0x92>
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	4a1a      	ldr	r2, [pc, #104]	@ (80044e4 <TIM_OC3_SetConfig+0xf8>)
 800447a:	4293      	cmp	r3, r2
 800447c:	d113      	bne.n	80044a6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800447e:	693b      	ldr	r3, [r7, #16]
 8004480:	4a19      	ldr	r2, [pc, #100]	@ (80044e8 <TIM_OC3_SetConfig+0xfc>)
 8004482:	4013      	ands	r3, r2
 8004484:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004486:	693b      	ldr	r3, [r7, #16]
 8004488:	4a18      	ldr	r2, [pc, #96]	@ (80044ec <TIM_OC3_SetConfig+0x100>)
 800448a:	4013      	ands	r3, r2
 800448c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800448e:	683b      	ldr	r3, [r7, #0]
 8004490:	695b      	ldr	r3, [r3, #20]
 8004492:	011b      	lsls	r3, r3, #4
 8004494:	693a      	ldr	r2, [r7, #16]
 8004496:	4313      	orrs	r3, r2
 8004498:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800449a:	683b      	ldr	r3, [r7, #0]
 800449c:	699b      	ldr	r3, [r3, #24]
 800449e:	011b      	lsls	r3, r3, #4
 80044a0:	693a      	ldr	r2, [r7, #16]
 80044a2:	4313      	orrs	r3, r2
 80044a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	693a      	ldr	r2, [r7, #16]
 80044aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	68fa      	ldr	r2, [r7, #12]
 80044b0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80044b2:	683b      	ldr	r3, [r7, #0]
 80044b4:	685a      	ldr	r2, [r3, #4]
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	697a      	ldr	r2, [r7, #20]
 80044be:	621a      	str	r2, [r3, #32]
}
 80044c0:	46c0      	nop			@ (mov r8, r8)
 80044c2:	46bd      	mov	sp, r7
 80044c4:	b006      	add	sp, #24
 80044c6:	bd80      	pop	{r7, pc}
 80044c8:	fffffeff 	.word	0xfffffeff
 80044cc:	fffeff8f 	.word	0xfffeff8f
 80044d0:	fffffdff 	.word	0xfffffdff
 80044d4:	40012c00 	.word	0x40012c00
 80044d8:	fffff7ff 	.word	0xfffff7ff
 80044dc:	fffffbff 	.word	0xfffffbff
 80044e0:	40014400 	.word	0x40014400
 80044e4:	40014800 	.word	0x40014800
 80044e8:	ffffefff 	.word	0xffffefff
 80044ec:	ffffdfff 	.word	0xffffdfff

080044f0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	b086      	sub	sp, #24
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
 80044f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6a1b      	ldr	r3, [r3, #32]
 80044fe:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	6a1b      	ldr	r3, [r3, #32]
 8004504:	4a24      	ldr	r2, [pc, #144]	@ (8004598 <TIM_OC4_SetConfig+0xa8>)
 8004506:	401a      	ands	r2, r3
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	685b      	ldr	r3, [r3, #4]
 8004510:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	69db      	ldr	r3, [r3, #28]
 8004516:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	4a20      	ldr	r2, [pc, #128]	@ (800459c <TIM_OC4_SetConfig+0xac>)
 800451c:	4013      	ands	r3, r2
 800451e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	4a1f      	ldr	r2, [pc, #124]	@ (80045a0 <TIM_OC4_SetConfig+0xb0>)
 8004524:	4013      	ands	r3, r2
 8004526:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004528:	683b      	ldr	r3, [r7, #0]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	021b      	lsls	r3, r3, #8
 800452e:	68fa      	ldr	r2, [r7, #12]
 8004530:	4313      	orrs	r3, r2
 8004532:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004534:	693b      	ldr	r3, [r7, #16]
 8004536:	4a1b      	ldr	r2, [pc, #108]	@ (80045a4 <TIM_OC4_SetConfig+0xb4>)
 8004538:	4013      	ands	r3, r2
 800453a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	689b      	ldr	r3, [r3, #8]
 8004540:	031b      	lsls	r3, r3, #12
 8004542:	693a      	ldr	r2, [r7, #16]
 8004544:	4313      	orrs	r3, r2
 8004546:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	4a17      	ldr	r2, [pc, #92]	@ (80045a8 <TIM_OC4_SetConfig+0xb8>)
 800454c:	4293      	cmp	r3, r2
 800454e:	d007      	beq.n	8004560 <TIM_OC4_SetConfig+0x70>
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	4a16      	ldr	r2, [pc, #88]	@ (80045ac <TIM_OC4_SetConfig+0xbc>)
 8004554:	4293      	cmp	r3, r2
 8004556:	d003      	beq.n	8004560 <TIM_OC4_SetConfig+0x70>
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	4a15      	ldr	r2, [pc, #84]	@ (80045b0 <TIM_OC4_SetConfig+0xc0>)
 800455c:	4293      	cmp	r3, r2
 800455e:	d109      	bne.n	8004574 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004560:	697b      	ldr	r3, [r7, #20]
 8004562:	4a14      	ldr	r2, [pc, #80]	@ (80045b4 <TIM_OC4_SetConfig+0xc4>)
 8004564:	4013      	ands	r3, r2
 8004566:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	695b      	ldr	r3, [r3, #20]
 800456c:	019b      	lsls	r3, r3, #6
 800456e:	697a      	ldr	r2, [r7, #20]
 8004570:	4313      	orrs	r3, r2
 8004572:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	697a      	ldr	r2, [r7, #20]
 8004578:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	68fa      	ldr	r2, [r7, #12]
 800457e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	685a      	ldr	r2, [r3, #4]
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	693a      	ldr	r2, [r7, #16]
 800458c:	621a      	str	r2, [r3, #32]
}
 800458e:	46c0      	nop			@ (mov r8, r8)
 8004590:	46bd      	mov	sp, r7
 8004592:	b006      	add	sp, #24
 8004594:	bd80      	pop	{r7, pc}
 8004596:	46c0      	nop			@ (mov r8, r8)
 8004598:	ffffefff 	.word	0xffffefff
 800459c:	feff8fff 	.word	0xfeff8fff
 80045a0:	fffffcff 	.word	0xfffffcff
 80045a4:	ffffdfff 	.word	0xffffdfff
 80045a8:	40012c00 	.word	0x40012c00
 80045ac:	40014400 	.word	0x40014400
 80045b0:	40014800 	.word	0x40014800
 80045b4:	ffffbfff 	.word	0xffffbfff

080045b8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80045b8:	b580      	push	{r7, lr}
 80045ba:	b086      	sub	sp, #24
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
 80045c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6a1b      	ldr	r3, [r3, #32]
 80045c6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	6a1b      	ldr	r3, [r3, #32]
 80045cc:	4a21      	ldr	r2, [pc, #132]	@ (8004654 <TIM_OC5_SetConfig+0x9c>)
 80045ce:	401a      	ands	r2, r3
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	685b      	ldr	r3, [r3, #4]
 80045d8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	4a1d      	ldr	r2, [pc, #116]	@ (8004658 <TIM_OC5_SetConfig+0xa0>)
 80045e4:	4013      	ands	r3, r2
 80045e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	68fa      	ldr	r2, [r7, #12]
 80045ee:	4313      	orrs	r3, r2
 80045f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80045f2:	693b      	ldr	r3, [r7, #16]
 80045f4:	4a19      	ldr	r2, [pc, #100]	@ (800465c <TIM_OC5_SetConfig+0xa4>)
 80045f6:	4013      	ands	r3, r2
 80045f8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	689b      	ldr	r3, [r3, #8]
 80045fe:	041b      	lsls	r3, r3, #16
 8004600:	693a      	ldr	r2, [r7, #16]
 8004602:	4313      	orrs	r3, r2
 8004604:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	4a15      	ldr	r2, [pc, #84]	@ (8004660 <TIM_OC5_SetConfig+0xa8>)
 800460a:	4293      	cmp	r3, r2
 800460c:	d007      	beq.n	800461e <TIM_OC5_SetConfig+0x66>
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	4a14      	ldr	r2, [pc, #80]	@ (8004664 <TIM_OC5_SetConfig+0xac>)
 8004612:	4293      	cmp	r3, r2
 8004614:	d003      	beq.n	800461e <TIM_OC5_SetConfig+0x66>
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	4a13      	ldr	r2, [pc, #76]	@ (8004668 <TIM_OC5_SetConfig+0xb0>)
 800461a:	4293      	cmp	r3, r2
 800461c:	d109      	bne.n	8004632 <TIM_OC5_SetConfig+0x7a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800461e:	697b      	ldr	r3, [r7, #20]
 8004620:	4a0c      	ldr	r2, [pc, #48]	@ (8004654 <TIM_OC5_SetConfig+0x9c>)
 8004622:	4013      	ands	r3, r2
 8004624:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004626:	683b      	ldr	r3, [r7, #0]
 8004628:	695b      	ldr	r3, [r3, #20]
 800462a:	021b      	lsls	r3, r3, #8
 800462c:	697a      	ldr	r2, [r7, #20]
 800462e:	4313      	orrs	r3, r2
 8004630:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	697a      	ldr	r2, [r7, #20]
 8004636:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	68fa      	ldr	r2, [r7, #12]
 800463c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	685a      	ldr	r2, [r3, #4]
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	693a      	ldr	r2, [r7, #16]
 800464a:	621a      	str	r2, [r3, #32]
}
 800464c:	46c0      	nop			@ (mov r8, r8)
 800464e:	46bd      	mov	sp, r7
 8004650:	b006      	add	sp, #24
 8004652:	bd80      	pop	{r7, pc}
 8004654:	fffeffff 	.word	0xfffeffff
 8004658:	fffeff8f 	.word	0xfffeff8f
 800465c:	fffdffff 	.word	0xfffdffff
 8004660:	40012c00 	.word	0x40012c00
 8004664:	40014400 	.word	0x40014400
 8004668:	40014800 	.word	0x40014800

0800466c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800466c:	b580      	push	{r7, lr}
 800466e:	b086      	sub	sp, #24
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
 8004674:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6a1b      	ldr	r3, [r3, #32]
 800467a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	6a1b      	ldr	r3, [r3, #32]
 8004680:	4a22      	ldr	r2, [pc, #136]	@ (800470c <TIM_OC6_SetConfig+0xa0>)
 8004682:	401a      	ands	r2, r3
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	685b      	ldr	r3, [r3, #4]
 800468c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004692:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	4a1e      	ldr	r2, [pc, #120]	@ (8004710 <TIM_OC6_SetConfig+0xa4>)
 8004698:	4013      	ands	r3, r2
 800469a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800469c:	683b      	ldr	r3, [r7, #0]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	021b      	lsls	r3, r3, #8
 80046a2:	68fa      	ldr	r2, [r7, #12]
 80046a4:	4313      	orrs	r3, r2
 80046a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80046a8:	693b      	ldr	r3, [r7, #16]
 80046aa:	4a1a      	ldr	r2, [pc, #104]	@ (8004714 <TIM_OC6_SetConfig+0xa8>)
 80046ac:	4013      	ands	r3, r2
 80046ae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80046b0:	683b      	ldr	r3, [r7, #0]
 80046b2:	689b      	ldr	r3, [r3, #8]
 80046b4:	051b      	lsls	r3, r3, #20
 80046b6:	693a      	ldr	r2, [r7, #16]
 80046b8:	4313      	orrs	r3, r2
 80046ba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	4a16      	ldr	r2, [pc, #88]	@ (8004718 <TIM_OC6_SetConfig+0xac>)
 80046c0:	4293      	cmp	r3, r2
 80046c2:	d007      	beq.n	80046d4 <TIM_OC6_SetConfig+0x68>
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	4a15      	ldr	r2, [pc, #84]	@ (800471c <TIM_OC6_SetConfig+0xb0>)
 80046c8:	4293      	cmp	r3, r2
 80046ca:	d003      	beq.n	80046d4 <TIM_OC6_SetConfig+0x68>
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	4a14      	ldr	r2, [pc, #80]	@ (8004720 <TIM_OC6_SetConfig+0xb4>)
 80046d0:	4293      	cmp	r3, r2
 80046d2:	d109      	bne.n	80046e8 <TIM_OC6_SetConfig+0x7c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80046d4:	697b      	ldr	r3, [r7, #20]
 80046d6:	4a13      	ldr	r2, [pc, #76]	@ (8004724 <TIM_OC6_SetConfig+0xb8>)
 80046d8:	4013      	ands	r3, r2
 80046da:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80046dc:	683b      	ldr	r3, [r7, #0]
 80046de:	695b      	ldr	r3, [r3, #20]
 80046e0:	029b      	lsls	r3, r3, #10
 80046e2:	697a      	ldr	r2, [r7, #20]
 80046e4:	4313      	orrs	r3, r2
 80046e6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	697a      	ldr	r2, [r7, #20]
 80046ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	68fa      	ldr	r2, [r7, #12]
 80046f2:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	685a      	ldr	r2, [r3, #4]
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	693a      	ldr	r2, [r7, #16]
 8004700:	621a      	str	r2, [r3, #32]
}
 8004702:	46c0      	nop			@ (mov r8, r8)
 8004704:	46bd      	mov	sp, r7
 8004706:	b006      	add	sp, #24
 8004708:	bd80      	pop	{r7, pc}
 800470a:	46c0      	nop			@ (mov r8, r8)
 800470c:	ffefffff 	.word	0xffefffff
 8004710:	feff8fff 	.word	0xfeff8fff
 8004714:	ffdfffff 	.word	0xffdfffff
 8004718:	40012c00 	.word	0x40012c00
 800471c:	40014400 	.word	0x40014400
 8004720:	40014800 	.word	0x40014800
 8004724:	fffbffff 	.word	0xfffbffff

08004728 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004728:	b580      	push	{r7, lr}
 800472a:	b086      	sub	sp, #24
 800472c:	af00      	add	r7, sp, #0
 800472e:	60f8      	str	r0, [r7, #12]
 8004730:	60b9      	str	r1, [r7, #8]
 8004732:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004734:	68bb      	ldr	r3, [r7, #8]
 8004736:	221f      	movs	r2, #31
 8004738:	4013      	ands	r3, r2
 800473a:	2201      	movs	r2, #1
 800473c:	409a      	lsls	r2, r3
 800473e:	0013      	movs	r3, r2
 8004740:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	6a1b      	ldr	r3, [r3, #32]
 8004746:	697a      	ldr	r2, [r7, #20]
 8004748:	43d2      	mvns	r2, r2
 800474a:	401a      	ands	r2, r3
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	6a1a      	ldr	r2, [r3, #32]
 8004754:	68bb      	ldr	r3, [r7, #8]
 8004756:	211f      	movs	r1, #31
 8004758:	400b      	ands	r3, r1
 800475a:	6879      	ldr	r1, [r7, #4]
 800475c:	4099      	lsls	r1, r3
 800475e:	000b      	movs	r3, r1
 8004760:	431a      	orrs	r2, r3
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	621a      	str	r2, [r3, #32]
}
 8004766:	46c0      	nop			@ (mov r8, r8)
 8004768:	46bd      	mov	sp, r7
 800476a:	b006      	add	sp, #24
 800476c:	bd80      	pop	{r7, pc}
	...

08004770 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004770:	b580      	push	{r7, lr}
 8004772:	b084      	sub	sp, #16
 8004774:	af00      	add	r7, sp, #0
 8004776:	6078      	str	r0, [r7, #4]
 8004778:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	223c      	movs	r2, #60	@ 0x3c
 800477e:	5c9b      	ldrb	r3, [r3, r2]
 8004780:	2b01      	cmp	r3, #1
 8004782:	d101      	bne.n	8004788 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004784:	2302      	movs	r3, #2
 8004786:	e050      	b.n	800482a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	223c      	movs	r2, #60	@ 0x3c
 800478c:	2101      	movs	r1, #1
 800478e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	223d      	movs	r2, #61	@ 0x3d
 8004794:	2102      	movs	r1, #2
 8004796:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	685b      	ldr	r3, [r3, #4]
 800479e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	689b      	ldr	r3, [r3, #8]
 80047a6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	4a21      	ldr	r2, [pc, #132]	@ (8004834 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80047ae:	4293      	cmp	r3, r2
 80047b0:	d108      	bne.n	80047c4 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	4a20      	ldr	r2, [pc, #128]	@ (8004838 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80047b6:	4013      	ands	r3, r2
 80047b8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80047ba:	683b      	ldr	r3, [r7, #0]
 80047bc:	685b      	ldr	r3, [r3, #4]
 80047be:	68fa      	ldr	r2, [r7, #12]
 80047c0:	4313      	orrs	r3, r2
 80047c2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	2270      	movs	r2, #112	@ 0x70
 80047c8:	4393      	bics	r3, r2
 80047ca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	68fa      	ldr	r2, [r7, #12]
 80047d2:	4313      	orrs	r3, r2
 80047d4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	68fa      	ldr	r2, [r7, #12]
 80047dc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	4a14      	ldr	r2, [pc, #80]	@ (8004834 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80047e4:	4293      	cmp	r3, r2
 80047e6:	d00a      	beq.n	80047fe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681a      	ldr	r2, [r3, #0]
 80047ec:	2380      	movs	r3, #128	@ 0x80
 80047ee:	05db      	lsls	r3, r3, #23
 80047f0:	429a      	cmp	r2, r3
 80047f2:	d004      	beq.n	80047fe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	4a10      	ldr	r2, [pc, #64]	@ (800483c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80047fa:	4293      	cmp	r3, r2
 80047fc:	d10c      	bne.n	8004818 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80047fe:	68bb      	ldr	r3, [r7, #8]
 8004800:	2280      	movs	r2, #128	@ 0x80
 8004802:	4393      	bics	r3, r2
 8004804:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004806:	683b      	ldr	r3, [r7, #0]
 8004808:	689b      	ldr	r3, [r3, #8]
 800480a:	68ba      	ldr	r2, [r7, #8]
 800480c:	4313      	orrs	r3, r2
 800480e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	68ba      	ldr	r2, [r7, #8]
 8004816:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	223d      	movs	r2, #61	@ 0x3d
 800481c:	2101      	movs	r1, #1
 800481e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	223c      	movs	r2, #60	@ 0x3c
 8004824:	2100      	movs	r1, #0
 8004826:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004828:	2300      	movs	r3, #0
}
 800482a:	0018      	movs	r0, r3
 800482c:	46bd      	mov	sp, r7
 800482e:	b004      	add	sp, #16
 8004830:	bd80      	pop	{r7, pc}
 8004832:	46c0      	nop			@ (mov r8, r8)
 8004834:	40012c00 	.word	0x40012c00
 8004838:	ff0fffff 	.word	0xff0fffff
 800483c:	40000400 	.word	0x40000400

08004840 <memset>:
 8004840:	0003      	movs	r3, r0
 8004842:	1882      	adds	r2, r0, r2
 8004844:	4293      	cmp	r3, r2
 8004846:	d100      	bne.n	800484a <memset+0xa>
 8004848:	4770      	bx	lr
 800484a:	7019      	strb	r1, [r3, #0]
 800484c:	3301      	adds	r3, #1
 800484e:	e7f9      	b.n	8004844 <memset+0x4>

08004850 <__libc_init_array>:
 8004850:	b570      	push	{r4, r5, r6, lr}
 8004852:	2600      	movs	r6, #0
 8004854:	4c0c      	ldr	r4, [pc, #48]	@ (8004888 <__libc_init_array+0x38>)
 8004856:	4d0d      	ldr	r5, [pc, #52]	@ (800488c <__libc_init_array+0x3c>)
 8004858:	1b64      	subs	r4, r4, r5
 800485a:	10a4      	asrs	r4, r4, #2
 800485c:	42a6      	cmp	r6, r4
 800485e:	d109      	bne.n	8004874 <__libc_init_array+0x24>
 8004860:	2600      	movs	r6, #0
 8004862:	f000 f819 	bl	8004898 <_init>
 8004866:	4c0a      	ldr	r4, [pc, #40]	@ (8004890 <__libc_init_array+0x40>)
 8004868:	4d0a      	ldr	r5, [pc, #40]	@ (8004894 <__libc_init_array+0x44>)
 800486a:	1b64      	subs	r4, r4, r5
 800486c:	10a4      	asrs	r4, r4, #2
 800486e:	42a6      	cmp	r6, r4
 8004870:	d105      	bne.n	800487e <__libc_init_array+0x2e>
 8004872:	bd70      	pop	{r4, r5, r6, pc}
 8004874:	00b3      	lsls	r3, r6, #2
 8004876:	58eb      	ldr	r3, [r5, r3]
 8004878:	4798      	blx	r3
 800487a:	3601      	adds	r6, #1
 800487c:	e7ee      	b.n	800485c <__libc_init_array+0xc>
 800487e:	00b3      	lsls	r3, r6, #2
 8004880:	58eb      	ldr	r3, [r5, r3]
 8004882:	4798      	blx	r3
 8004884:	3601      	adds	r6, #1
 8004886:	e7f2      	b.n	800486e <__libc_init_array+0x1e>
 8004888:	080049c0 	.word	0x080049c0
 800488c:	080049c0 	.word	0x080049c0
 8004890:	080049c4 	.word	0x080049c4
 8004894:	080049c0 	.word	0x080049c0

08004898 <_init>:
 8004898:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800489a:	46c0      	nop			@ (mov r8, r8)
 800489c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800489e:	bc08      	pop	{r3}
 80048a0:	469e      	mov	lr, r3
 80048a2:	4770      	bx	lr

080048a4 <_fini>:
 80048a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048a6:	46c0      	nop			@ (mov r8, r8)
 80048a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80048aa:	bc08      	pop	{r3}
 80048ac:	469e      	mov	lr, r3
 80048ae:	4770      	bx	lr
