
NEO100_TEST_ROT_V8_LEDS_FUNKTION_3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000037b8  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  08003874  08003874  00004874  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003908  08003908  00005010  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08003908  08003908  00005010  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08003908  08003908  00005010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003908  08003908  00004908  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800390c  0800390c  0000490c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08003910  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001d4  20000010  08003920  00005010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001e4  08003920  000051e4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00005010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b20e  00000000  00000000  00005038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001fe1  00000000  00000000  00010246  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bb8  00000000  00000000  00012228  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000907  00000000  00000000  00012de0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000160e1  00000000  00000000  000136e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000de94  00000000  00000000  000297c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008d1b0  00000000  00000000  0003765c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c480c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002954  00000000  00000000  000c4850  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000095  00000000  00000000  000c71a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000010 	.word	0x20000010
 80000dc:	00000000 	.word	0x00000000
 80000e0:	0800385c 	.word	0x0800385c

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000014 	.word	0x20000014
 8000100:	0800385c 	.word	0x0800385c

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	@ 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f8f0 	bl	80003ec <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			@ (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__divsi3>:
 8000218:	4603      	mov	r3, r0
 800021a:	430b      	orrs	r3, r1
 800021c:	d47f      	bmi.n	800031e <__divsi3+0x106>
 800021e:	2200      	movs	r2, #0
 8000220:	0843      	lsrs	r3, r0, #1
 8000222:	428b      	cmp	r3, r1
 8000224:	d374      	bcc.n	8000310 <__divsi3+0xf8>
 8000226:	0903      	lsrs	r3, r0, #4
 8000228:	428b      	cmp	r3, r1
 800022a:	d35f      	bcc.n	80002ec <__divsi3+0xd4>
 800022c:	0a03      	lsrs	r3, r0, #8
 800022e:	428b      	cmp	r3, r1
 8000230:	d344      	bcc.n	80002bc <__divsi3+0xa4>
 8000232:	0b03      	lsrs	r3, r0, #12
 8000234:	428b      	cmp	r3, r1
 8000236:	d328      	bcc.n	800028a <__divsi3+0x72>
 8000238:	0c03      	lsrs	r3, r0, #16
 800023a:	428b      	cmp	r3, r1
 800023c:	d30d      	bcc.n	800025a <__divsi3+0x42>
 800023e:	22ff      	movs	r2, #255	@ 0xff
 8000240:	0209      	lsls	r1, r1, #8
 8000242:	ba12      	rev	r2, r2
 8000244:	0c03      	lsrs	r3, r0, #16
 8000246:	428b      	cmp	r3, r1
 8000248:	d302      	bcc.n	8000250 <__divsi3+0x38>
 800024a:	1212      	asrs	r2, r2, #8
 800024c:	0209      	lsls	r1, r1, #8
 800024e:	d065      	beq.n	800031c <__divsi3+0x104>
 8000250:	0b03      	lsrs	r3, r0, #12
 8000252:	428b      	cmp	r3, r1
 8000254:	d319      	bcc.n	800028a <__divsi3+0x72>
 8000256:	e000      	b.n	800025a <__divsi3+0x42>
 8000258:	0a09      	lsrs	r1, r1, #8
 800025a:	0bc3      	lsrs	r3, r0, #15
 800025c:	428b      	cmp	r3, r1
 800025e:	d301      	bcc.n	8000264 <__divsi3+0x4c>
 8000260:	03cb      	lsls	r3, r1, #15
 8000262:	1ac0      	subs	r0, r0, r3
 8000264:	4152      	adcs	r2, r2
 8000266:	0b83      	lsrs	r3, r0, #14
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__divsi3+0x58>
 800026c:	038b      	lsls	r3, r1, #14
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	0b43      	lsrs	r3, r0, #13
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x64>
 8000278:	034b      	lsls	r3, r1, #13
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b03      	lsrs	r3, r0, #12
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x70>
 8000284:	030b      	lsls	r3, r1, #12
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0ac3      	lsrs	r3, r0, #11
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x7c>
 8000290:	02cb      	lsls	r3, r1, #11
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0a83      	lsrs	r3, r0, #10
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x88>
 800029c:	028b      	lsls	r3, r1, #10
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0a43      	lsrs	r3, r0, #9
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x94>
 80002a8:	024b      	lsls	r3, r1, #9
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a03      	lsrs	r3, r0, #8
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0xa0>
 80002b4:	020b      	lsls	r3, r1, #8
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	d2cd      	bcs.n	8000258 <__divsi3+0x40>
 80002bc:	09c3      	lsrs	r3, r0, #7
 80002be:	428b      	cmp	r3, r1
 80002c0:	d301      	bcc.n	80002c6 <__divsi3+0xae>
 80002c2:	01cb      	lsls	r3, r1, #7
 80002c4:	1ac0      	subs	r0, r0, r3
 80002c6:	4152      	adcs	r2, r2
 80002c8:	0983      	lsrs	r3, r0, #6
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d301      	bcc.n	80002d2 <__divsi3+0xba>
 80002ce:	018b      	lsls	r3, r1, #6
 80002d0:	1ac0      	subs	r0, r0, r3
 80002d2:	4152      	adcs	r2, r2
 80002d4:	0943      	lsrs	r3, r0, #5
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xc6>
 80002da:	014b      	lsls	r3, r1, #5
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0903      	lsrs	r3, r0, #4
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xd2>
 80002e6:	010b      	lsls	r3, r1, #4
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	08c3      	lsrs	r3, r0, #3
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xde>
 80002f2:	00cb      	lsls	r3, r1, #3
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0883      	lsrs	r3, r0, #2
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xea>
 80002fe:	008b      	lsls	r3, r1, #2
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0843      	lsrs	r3, r0, #1
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xf6>
 800030a:	004b      	lsls	r3, r1, #1
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	1a41      	subs	r1, r0, r1
 8000312:	d200      	bcs.n	8000316 <__divsi3+0xfe>
 8000314:	4601      	mov	r1, r0
 8000316:	4152      	adcs	r2, r2
 8000318:	4610      	mov	r0, r2
 800031a:	4770      	bx	lr
 800031c:	e05d      	b.n	80003da <__divsi3+0x1c2>
 800031e:	0fca      	lsrs	r2, r1, #31
 8000320:	d000      	beq.n	8000324 <__divsi3+0x10c>
 8000322:	4249      	negs	r1, r1
 8000324:	1003      	asrs	r3, r0, #32
 8000326:	d300      	bcc.n	800032a <__divsi3+0x112>
 8000328:	4240      	negs	r0, r0
 800032a:	4053      	eors	r3, r2
 800032c:	2200      	movs	r2, #0
 800032e:	469c      	mov	ip, r3
 8000330:	0903      	lsrs	r3, r0, #4
 8000332:	428b      	cmp	r3, r1
 8000334:	d32d      	bcc.n	8000392 <__divsi3+0x17a>
 8000336:	0a03      	lsrs	r3, r0, #8
 8000338:	428b      	cmp	r3, r1
 800033a:	d312      	bcc.n	8000362 <__divsi3+0x14a>
 800033c:	22fc      	movs	r2, #252	@ 0xfc
 800033e:	0189      	lsls	r1, r1, #6
 8000340:	ba12      	rev	r2, r2
 8000342:	0a03      	lsrs	r3, r0, #8
 8000344:	428b      	cmp	r3, r1
 8000346:	d30c      	bcc.n	8000362 <__divsi3+0x14a>
 8000348:	0189      	lsls	r1, r1, #6
 800034a:	1192      	asrs	r2, r2, #6
 800034c:	428b      	cmp	r3, r1
 800034e:	d308      	bcc.n	8000362 <__divsi3+0x14a>
 8000350:	0189      	lsls	r1, r1, #6
 8000352:	1192      	asrs	r2, r2, #6
 8000354:	428b      	cmp	r3, r1
 8000356:	d304      	bcc.n	8000362 <__divsi3+0x14a>
 8000358:	0189      	lsls	r1, r1, #6
 800035a:	d03a      	beq.n	80003d2 <__divsi3+0x1ba>
 800035c:	1192      	asrs	r2, r2, #6
 800035e:	e000      	b.n	8000362 <__divsi3+0x14a>
 8000360:	0989      	lsrs	r1, r1, #6
 8000362:	09c3      	lsrs	r3, r0, #7
 8000364:	428b      	cmp	r3, r1
 8000366:	d301      	bcc.n	800036c <__divsi3+0x154>
 8000368:	01cb      	lsls	r3, r1, #7
 800036a:	1ac0      	subs	r0, r0, r3
 800036c:	4152      	adcs	r2, r2
 800036e:	0983      	lsrs	r3, r0, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d301      	bcc.n	8000378 <__divsi3+0x160>
 8000374:	018b      	lsls	r3, r1, #6
 8000376:	1ac0      	subs	r0, r0, r3
 8000378:	4152      	adcs	r2, r2
 800037a:	0943      	lsrs	r3, r0, #5
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x16c>
 8000380:	014b      	lsls	r3, r1, #5
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0903      	lsrs	r3, r0, #4
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x178>
 800038c:	010b      	lsls	r3, r1, #4
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	08c3      	lsrs	r3, r0, #3
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x184>
 8000398:	00cb      	lsls	r3, r1, #3
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0883      	lsrs	r3, r0, #2
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x190>
 80003a4:	008b      	lsls	r3, r1, #2
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	d2d9      	bcs.n	8000360 <__divsi3+0x148>
 80003ac:	0843      	lsrs	r3, r0, #1
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d301      	bcc.n	80003b6 <__divsi3+0x19e>
 80003b2:	004b      	lsls	r3, r1, #1
 80003b4:	1ac0      	subs	r0, r0, r3
 80003b6:	4152      	adcs	r2, r2
 80003b8:	1a41      	subs	r1, r0, r1
 80003ba:	d200      	bcs.n	80003be <__divsi3+0x1a6>
 80003bc:	4601      	mov	r1, r0
 80003be:	4663      	mov	r3, ip
 80003c0:	4152      	adcs	r2, r2
 80003c2:	105b      	asrs	r3, r3, #1
 80003c4:	4610      	mov	r0, r2
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x1b4>
 80003c8:	4240      	negs	r0, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d500      	bpl.n	80003d0 <__divsi3+0x1b8>
 80003ce:	4249      	negs	r1, r1
 80003d0:	4770      	bx	lr
 80003d2:	4663      	mov	r3, ip
 80003d4:	105b      	asrs	r3, r3, #1
 80003d6:	d300      	bcc.n	80003da <__divsi3+0x1c2>
 80003d8:	4240      	negs	r0, r0
 80003da:	b501      	push	{r0, lr}
 80003dc:	2000      	movs	r0, #0
 80003de:	f000 f805 	bl	80003ec <__aeabi_idiv0>
 80003e2:	bd02      	pop	{r1, pc}

080003e4 <__aeabi_idivmod>:
 80003e4:	2900      	cmp	r1, #0
 80003e6:	d0f8      	beq.n	80003da <__divsi3+0x1c2>
 80003e8:	e716      	b.n	8000218 <__divsi3>
 80003ea:	4770      	bx	lr

080003ec <__aeabi_idiv0>:
 80003ec:	4770      	bx	lr
 80003ee:	46c0      	nop			@ (mov r8, r8)

080003f0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock and configure DMA channel for TIM3_CH2
  */
void MX_DMA_Init(void)
{
 80003f0:	b580      	push	{r7, lr}
 80003f2:	b082      	sub	sp, #8
 80003f4:	af00      	add	r7, sp, #0
    __HAL_RCC_DMA1_CLK_ENABLE();
 80003f6:	4b21      	ldr	r3, [pc, #132]	@ (800047c <MX_DMA_Init+0x8c>)
 80003f8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80003fa:	4b20      	ldr	r3, [pc, #128]	@ (800047c <MX_DMA_Init+0x8c>)
 80003fc:	2101      	movs	r1, #1
 80003fe:	430a      	orrs	r2, r1
 8000400:	639a      	str	r2, [r3, #56]	@ 0x38
 8000402:	4b1e      	ldr	r3, [pc, #120]	@ (800047c <MX_DMA_Init+0x8c>)
 8000404:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000406:	2201      	movs	r2, #1
 8000408:	4013      	ands	r3, r2
 800040a:	607b      	str	r3, [r7, #4]
 800040c:	687b      	ldr	r3, [r7, #4]

    hdma_tim3_ch2.Instance = DMA1_Channel1;
 800040e:	4b1c      	ldr	r3, [pc, #112]	@ (8000480 <MX_DMA_Init+0x90>)
 8000410:	4a1c      	ldr	r2, [pc, #112]	@ (8000484 <MX_DMA_Init+0x94>)
 8000412:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch2.Init.Request = DMA_REQUEST_TIM3_CH2;
 8000414:	4b1a      	ldr	r3, [pc, #104]	@ (8000480 <MX_DMA_Init+0x90>)
 8000416:	2221      	movs	r2, #33	@ 0x21
 8000418:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800041a:	4b19      	ldr	r3, [pc, #100]	@ (8000480 <MX_DMA_Init+0x90>)
 800041c:	2210      	movs	r2, #16
 800041e:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8000420:	4b17      	ldr	r3, [pc, #92]	@ (8000480 <MX_DMA_Init+0x90>)
 8000422:	2200      	movs	r2, #0
 8000424:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8000426:	4b16      	ldr	r3, [pc, #88]	@ (8000480 <MX_DMA_Init+0x90>)
 8000428:	2280      	movs	r2, #128	@ 0x80
 800042a:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800042c:	4b14      	ldr	r3, [pc, #80]	@ (8000480 <MX_DMA_Init+0x90>)
 800042e:	2280      	movs	r2, #128	@ 0x80
 8000430:	0092      	lsls	r2, r2, #2
 8000432:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000434:	4b12      	ldr	r3, [pc, #72]	@ (8000480 <MX_DMA_Init+0x90>)
 8000436:	2280      	movs	r2, #128	@ 0x80
 8000438:	0112      	lsls	r2, r2, #4
 800043a:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch2.Init.Mode = DMA_CIRCULAR; // Funktionierende Konfiguration
 800043c:	4b10      	ldr	r3, [pc, #64]	@ (8000480 <MX_DMA_Init+0x90>)
 800043e:	2220      	movs	r2, #32
 8000440:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch2.Init.Priority = DMA_PRIORITY_LOW; // Funktionierende Konfiguration
 8000442:	4b0f      	ldr	r3, [pc, #60]	@ (8000480 <MX_DMA_Init+0x90>)
 8000444:	2200      	movs	r2, #0
 8000446:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim3_ch2) != HAL_OK)
 8000448:	4b0d      	ldr	r3, [pc, #52]	@ (8000480 <MX_DMA_Init+0x90>)
 800044a:	0018      	movs	r0, r3
 800044c:	f000 ff78 	bl	8001340 <HAL_DMA_Init>
 8000450:	1e03      	subs	r3, r0, #0
 8000452:	d001      	beq.n	8000458 <MX_DMA_Init+0x68>
    {
        Error_Handler();
 8000454:	f000 fafa 	bl	8000a4c <Error_Handler>
    }

    extern TIM_HandleTypeDef htim3;
    __HAL_LINKDMA(&htim3, hdma[TIM_DMA_ID_CC2], hdma_tim3_ch2);
 8000458:	4b0b      	ldr	r3, [pc, #44]	@ (8000488 <MX_DMA_Init+0x98>)
 800045a:	4a09      	ldr	r2, [pc, #36]	@ (8000480 <MX_DMA_Init+0x90>)
 800045c:	629a      	str	r2, [r3, #40]	@ 0x28
 800045e:	4b08      	ldr	r3, [pc, #32]	@ (8000480 <MX_DMA_Init+0x90>)
 8000460:	4a09      	ldr	r2, [pc, #36]	@ (8000488 <MX_DMA_Init+0x98>)
 8000462:	629a      	str	r2, [r3, #40]	@ 0x28

    HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000464:	2200      	movs	r2, #0
 8000466:	2100      	movs	r1, #0
 8000468:	2009      	movs	r0, #9
 800046a:	f000 ff37 	bl	80012dc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800046e:	2009      	movs	r0, #9
 8000470:	f000 ff49 	bl	8001306 <HAL_NVIC_EnableIRQ>
}
 8000474:	46c0      	nop			@ (mov r8, r8)
 8000476:	46bd      	mov	sp, r7
 8000478:	b002      	add	sp, #8
 800047a:	bd80      	pop	{r7, pc}
 800047c:	40021000 	.word	0x40021000
 8000480:	2000002c 	.word	0x2000002c
 8000484:	40020008 	.word	0x40020008
 8000488:	20000194 	.word	0x20000194

0800048c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800048c:	b580      	push	{r7, lr}
 800048e:	b086      	sub	sp, #24
 8000490:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000492:	1d3b      	adds	r3, r7, #4
 8000494:	0018      	movs	r0, r3
 8000496:	2314      	movs	r3, #20
 8000498:	001a      	movs	r2, r3
 800049a:	2100      	movs	r1, #0
 800049c:	f003 f9b2 	bl	8003804 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004a0:	4b1e      	ldr	r3, [pc, #120]	@ (800051c <MX_GPIO_Init+0x90>)
 80004a2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80004a4:	4b1d      	ldr	r3, [pc, #116]	@ (800051c <MX_GPIO_Init+0x90>)
 80004a6:	2101      	movs	r1, #1
 80004a8:	430a      	orrs	r2, r1
 80004aa:	635a      	str	r2, [r3, #52]	@ 0x34
 80004ac:	4b1b      	ldr	r3, [pc, #108]	@ (800051c <MX_GPIO_Init+0x90>)
 80004ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80004b0:	2201      	movs	r2, #1
 80004b2:	4013      	ands	r3, r2
 80004b4:	603b      	str	r3, [r7, #0]
 80004b6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : PA1 (Interrupt-Pin für kapazitive Erkennung, low-active) */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80004b8:	1d3b      	adds	r3, r7, #4
 80004ba:	2202      	movs	r2, #2
 80004bc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING; // Fallende Flanke für low-active Signal
 80004be:	1d3b      	adds	r3, r7, #4
 80004c0:	2284      	movs	r2, #132	@ 0x84
 80004c2:	0392      	lsls	r2, r2, #14
 80004c4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL; // Externer Pull-up vorhanden
 80004c6:	1d3b      	adds	r3, r7, #4
 80004c8:	2200      	movs	r2, #0
 80004ca:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004cc:	1d3a      	adds	r2, r7, #4
 80004ce:	23a0      	movs	r3, #160	@ 0xa0
 80004d0:	05db      	lsls	r3, r3, #23
 80004d2:	0011      	movs	r1, r2
 80004d4:	0018      	movs	r0, r3
 80004d6:	f001 fa73 	bl	80019c0 <HAL_GPIO_Init>

  /* EXTI interrupt init for PA1 */
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 1, 0);
 80004da:	2200      	movs	r2, #0
 80004dc:	2101      	movs	r1, #1
 80004de:	2005      	movs	r0, #5
 80004e0:	f000 fefc 	bl	80012dc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 80004e4:	2005      	movs	r0, #5
 80004e6:	f000 ff0e 	bl	8001306 <HAL_NVIC_EnableIRQ>

  /* Configure GPIO pin : PA12 (Debug-Output) */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 80004ea:	1d3b      	adds	r3, r7, #4
 80004ec:	2280      	movs	r2, #128	@ 0x80
 80004ee:	0152      	lsls	r2, r2, #5
 80004f0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004f2:	1d3b      	adds	r3, r7, #4
 80004f4:	2201      	movs	r2, #1
 80004f6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004f8:	1d3b      	adds	r3, r7, #4
 80004fa:	2200      	movs	r2, #0
 80004fc:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004fe:	1d3b      	adds	r3, r7, #4
 8000500:	2200      	movs	r2, #0
 8000502:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000504:	1d3a      	adds	r2, r7, #4
 8000506:	23a0      	movs	r3, #160	@ 0xa0
 8000508:	05db      	lsls	r3, r3, #23
 800050a:	0011      	movs	r1, r2
 800050c:	0018      	movs	r0, r3
 800050e:	f001 fa57 	bl	80019c0 <HAL_GPIO_Init>
}
 8000512:	46c0      	nop			@ (mov r8, r8)
 8000514:	46bd      	mov	sp, r7
 8000516:	b006      	add	sp, #24
 8000518:	bd80      	pop	{r7, pc}
 800051a:	46c0      	nop			@ (mov r8, r8)
 800051c:	40021000 	.word	0x40021000

08000520 <__NVIC_GetEnableIRQ>:
  \return             0  Interrupt is not enabled.
  \return             1  Interrupt is enabled.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE uint32_t __NVIC_GetEnableIRQ(IRQn_Type IRQn)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	b082      	sub	sp, #8
 8000524:	af00      	add	r7, sp, #0
 8000526:	0002      	movs	r2, r0
 8000528:	1dfb      	adds	r3, r7, #7
 800052a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800052c:	1dfb      	adds	r3, r7, #7
 800052e:	781b      	ldrb	r3, [r3, #0]
 8000530:	2b7f      	cmp	r3, #127	@ 0x7f
 8000532:	d80b      	bhi.n	800054c <__NVIC_GetEnableIRQ+0x2c>
  {
    return((uint32_t)(((NVIC->ISER[0U] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
 8000534:	4b08      	ldr	r3, [pc, #32]	@ (8000558 <__NVIC_GetEnableIRQ+0x38>)
 8000536:	681a      	ldr	r2, [r3, #0]
 8000538:	1dfb      	adds	r3, r7, #7
 800053a:	781b      	ldrb	r3, [r3, #0]
 800053c:	0019      	movs	r1, r3
 800053e:	231f      	movs	r3, #31
 8000540:	400b      	ands	r3, r1
 8000542:	40da      	lsrs	r2, r3
 8000544:	0013      	movs	r3, r2
 8000546:	2201      	movs	r2, #1
 8000548:	4013      	ands	r3, r2
 800054a:	e000      	b.n	800054e <__NVIC_GetEnableIRQ+0x2e>
  }
  else
  {
    return(0U);
 800054c:	2300      	movs	r3, #0
  }
}
 800054e:	0018      	movs	r0, r3
 8000550:	46bd      	mov	sp, r7
 8000552:	b002      	add	sp, #8
 8000554:	bd80      	pop	{r7, pc}
 8000556:	46c0      	nop			@ (mov r8, r8)
 8000558:	e000e100 	.word	0xe000e100

0800055c <led_fill_led_pwm_data>:
/**
  * @brief Bereitet PWM-Daten für WS2812 vor
  * @param ledx: LED-Index
  * @param ptr: Ausgabearray für PWM-Werte
  */
void led_fill_led_pwm_data(size_t ledx, uint32_t* ptr) {
 800055c:	b580      	push	{r7, lr}
 800055e:	b08a      	sub	sp, #40	@ 0x28
 8000560:	af00      	add	r7, sp, #0
 8000562:	6078      	str	r0, [r7, #4]
 8000564:	6039      	str	r1, [r7, #0]
    extern TIM_HandleTypeDef htim3;
    uint32_t arr = htim3.Init.Period + 1;
 8000566:	4b5c      	ldr	r3, [pc, #368]	@ (80006d8 <led_fill_led_pwm_data+0x17c>)
 8000568:	68db      	ldr	r3, [r3, #12]
 800056a:	3301      	adds	r3, #1
 800056c:	617b      	str	r3, [r7, #20]
    uint32_t pulse_high = (3 * arr / 4) - 1; // Hoch für logische 1 (~68%)
 800056e:	697a      	ldr	r2, [r7, #20]
 8000570:	0013      	movs	r3, r2
 8000572:	005b      	lsls	r3, r3, #1
 8000574:	189b      	adds	r3, r3, r2
 8000576:	089b      	lsrs	r3, r3, #2
 8000578:	3b01      	subs	r3, #1
 800057a:	613b      	str	r3, [r7, #16]
    uint32_t pulse_low = (1 * arr / 4) - 1;  // Hoch für logische 0 (~32%)
 800057c:	697b      	ldr	r3, [r7, #20]
 800057e:	089b      	lsrs	r3, r3, #2
 8000580:	3b01      	subs	r3, #1
 8000582:	60fb      	str	r3, [r7, #12]

    if (ledx < LED_CFG_COUNT) {
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	2b0b      	cmp	r3, #11
 8000588:	d900      	bls.n	800058c <led_fill_led_pwm_data+0x30>
 800058a:	e0a0      	b.n	80006ce <led_fill_led_pwm_data+0x172>
        uint32_t r, g, b;
        // Im Kreis-Modus oder Flash-Modus keine Helligkeitsanpassung für die aktive LED
        if ((in_circle_mode && ledx == red_led_index) || (current_state == STATE_FLASH_BLUE)) {
 800058c:	4b53      	ldr	r3, [pc, #332]	@ (80006dc <led_fill_led_pwm_data+0x180>)
 800058e:	781b      	ldrb	r3, [r3, #0]
 8000590:	b2db      	uxtb	r3, r3
 8000592:	2b00      	cmp	r3, #0
 8000594:	d006      	beq.n	80005a4 <led_fill_led_pwm_data+0x48>
 8000596:	4b52      	ldr	r3, [pc, #328]	@ (80006e0 <led_fill_led_pwm_data+0x184>)
 8000598:	781b      	ldrb	r3, [r3, #0]
 800059a:	b2db      	uxtb	r3, r3
 800059c:	001a      	movs	r2, r3
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	4293      	cmp	r3, r2
 80005a2:	d003      	beq.n	80005ac <led_fill_led_pwm_data+0x50>
 80005a4:	4b4f      	ldr	r3, [pc, #316]	@ (80006e4 <led_fill_led_pwm_data+0x188>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	2b01      	cmp	r3, #1
 80005aa:	d117      	bne.n	80005dc <led_fill_led_pwm_data+0x80>
            r = leds_color_data[ledx * LED_CFG_BYTES_PER_LED + 0]; // Volle Helligkeit
 80005ac:	687a      	ldr	r2, [r7, #4]
 80005ae:	0013      	movs	r3, r2
 80005b0:	005b      	lsls	r3, r3, #1
 80005b2:	189b      	adds	r3, r3, r2
 80005b4:	4a4c      	ldr	r2, [pc, #304]	@ (80006e8 <led_fill_led_pwm_data+0x18c>)
 80005b6:	5cd3      	ldrb	r3, [r2, r3]
 80005b8:	627b      	str	r3, [r7, #36]	@ 0x24
            g = leds_color_data[ledx * LED_CFG_BYTES_PER_LED + 1];
 80005ba:	687a      	ldr	r2, [r7, #4]
 80005bc:	0013      	movs	r3, r2
 80005be:	005b      	lsls	r3, r3, #1
 80005c0:	189b      	adds	r3, r3, r2
 80005c2:	3301      	adds	r3, #1
 80005c4:	4a48      	ldr	r2, [pc, #288]	@ (80006e8 <led_fill_led_pwm_data+0x18c>)
 80005c6:	5cd3      	ldrb	r3, [r2, r3]
 80005c8:	623b      	str	r3, [r7, #32]
            b = leds_color_data[ledx * LED_CFG_BYTES_PER_LED + 2];
 80005ca:	687a      	ldr	r2, [r7, #4]
 80005cc:	0013      	movs	r3, r2
 80005ce:	005b      	lsls	r3, r3, #1
 80005d0:	189b      	adds	r3, r3, r2
 80005d2:	3302      	adds	r3, #2
 80005d4:	4a44      	ldr	r2, [pc, #272]	@ (80006e8 <led_fill_led_pwm_data+0x18c>)
 80005d6:	5cd3      	ldrb	r3, [r2, r3]
 80005d8:	61fb      	str	r3, [r7, #28]
 80005da:	e037      	b.n	800064c <led_fill_led_pwm_data+0xf0>
        } else {
            r = (uint8_t)(((uint32_t)leds_color_data[ledx * LED_CFG_BYTES_PER_LED + 0] * brightness) / 0xFF);
 80005dc:	687a      	ldr	r2, [r7, #4]
 80005de:	0013      	movs	r3, r2
 80005e0:	005b      	lsls	r3, r3, #1
 80005e2:	189b      	adds	r3, r3, r2
 80005e4:	4a40      	ldr	r2, [pc, #256]	@ (80006e8 <led_fill_led_pwm_data+0x18c>)
 80005e6:	5cd3      	ldrb	r3, [r2, r3]
 80005e8:	001a      	movs	r2, r3
 80005ea:	4b40      	ldr	r3, [pc, #256]	@ (80006ec <led_fill_led_pwm_data+0x190>)
 80005ec:	781b      	ldrb	r3, [r3, #0]
 80005ee:	b2db      	uxtb	r3, r3
 80005f0:	4353      	muls	r3, r2
 80005f2:	21ff      	movs	r1, #255	@ 0xff
 80005f4:	0018      	movs	r0, r3
 80005f6:	f7ff fd85 	bl	8000104 <__udivsi3>
 80005fa:	0003      	movs	r3, r0
 80005fc:	b2db      	uxtb	r3, r3
 80005fe:	627b      	str	r3, [r7, #36]	@ 0x24
            g = (uint8_t)(((uint32_t)leds_color_data[ledx * LED_CFG_BYTES_PER_LED + 1] * brightness) / 0xFF);
 8000600:	687a      	ldr	r2, [r7, #4]
 8000602:	0013      	movs	r3, r2
 8000604:	005b      	lsls	r3, r3, #1
 8000606:	189b      	adds	r3, r3, r2
 8000608:	3301      	adds	r3, #1
 800060a:	4a37      	ldr	r2, [pc, #220]	@ (80006e8 <led_fill_led_pwm_data+0x18c>)
 800060c:	5cd3      	ldrb	r3, [r2, r3]
 800060e:	001a      	movs	r2, r3
 8000610:	4b36      	ldr	r3, [pc, #216]	@ (80006ec <led_fill_led_pwm_data+0x190>)
 8000612:	781b      	ldrb	r3, [r3, #0]
 8000614:	b2db      	uxtb	r3, r3
 8000616:	4353      	muls	r3, r2
 8000618:	21ff      	movs	r1, #255	@ 0xff
 800061a:	0018      	movs	r0, r3
 800061c:	f7ff fd72 	bl	8000104 <__udivsi3>
 8000620:	0003      	movs	r3, r0
 8000622:	b2db      	uxtb	r3, r3
 8000624:	623b      	str	r3, [r7, #32]
            b = (uint8_t)(((uint32_t)leds_color_data[ledx * LED_CFG_BYTES_PER_LED + 2] * brightness) / 0xFF);
 8000626:	687a      	ldr	r2, [r7, #4]
 8000628:	0013      	movs	r3, r2
 800062a:	005b      	lsls	r3, r3, #1
 800062c:	189b      	adds	r3, r3, r2
 800062e:	3302      	adds	r3, #2
 8000630:	4a2d      	ldr	r2, [pc, #180]	@ (80006e8 <led_fill_led_pwm_data+0x18c>)
 8000632:	5cd3      	ldrb	r3, [r2, r3]
 8000634:	001a      	movs	r2, r3
 8000636:	4b2d      	ldr	r3, [pc, #180]	@ (80006ec <led_fill_led_pwm_data+0x190>)
 8000638:	781b      	ldrb	r3, [r3, #0]
 800063a:	b2db      	uxtb	r3, r3
 800063c:	4353      	muls	r3, r2
 800063e:	21ff      	movs	r1, #255	@ 0xff
 8000640:	0018      	movs	r0, r3
 8000642:	f7ff fd5f 	bl	8000104 <__udivsi3>
 8000646:	0003      	movs	r3, r0
 8000648:	b2db      	uxtb	r3, r3
 800064a:	61fb      	str	r3, [r7, #28]
        }
        for (size_t i = 0; i < 8; i++) {
 800064c:	2300      	movs	r3, #0
 800064e:	61bb      	str	r3, [r7, #24]
 8000650:	e03a      	b.n	80006c8 <led_fill_led_pwm_data+0x16c>
            ptr[i] = (g & (1 << (7 - i))) ? pulse_high : pulse_low;      // Grün
 8000652:	69bb      	ldr	r3, [r7, #24]
 8000654:	2207      	movs	r2, #7
 8000656:	1ad3      	subs	r3, r2, r3
 8000658:	2201      	movs	r2, #1
 800065a:	409a      	lsls	r2, r3
 800065c:	0013      	movs	r3, r2
 800065e:	001a      	movs	r2, r3
 8000660:	6a3b      	ldr	r3, [r7, #32]
 8000662:	4013      	ands	r3, r2
 8000664:	d001      	beq.n	800066a <led_fill_led_pwm_data+0x10e>
 8000666:	693a      	ldr	r2, [r7, #16]
 8000668:	e000      	b.n	800066c <led_fill_led_pwm_data+0x110>
 800066a:	68fa      	ldr	r2, [r7, #12]
 800066c:	69bb      	ldr	r3, [r7, #24]
 800066e:	009b      	lsls	r3, r3, #2
 8000670:	6839      	ldr	r1, [r7, #0]
 8000672:	18cb      	adds	r3, r1, r3
 8000674:	601a      	str	r2, [r3, #0]
            ptr[8 + i] = (r & (1 << (7 - i))) ? pulse_high : pulse_low;  // Rot
 8000676:	69bb      	ldr	r3, [r7, #24]
 8000678:	2207      	movs	r2, #7
 800067a:	1ad3      	subs	r3, r2, r3
 800067c:	2201      	movs	r2, #1
 800067e:	409a      	lsls	r2, r3
 8000680:	0013      	movs	r3, r2
 8000682:	001a      	movs	r2, r3
 8000684:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000686:	4013      	ands	r3, r2
 8000688:	d001      	beq.n	800068e <led_fill_led_pwm_data+0x132>
 800068a:	693a      	ldr	r2, [r7, #16]
 800068c:	e000      	b.n	8000690 <led_fill_led_pwm_data+0x134>
 800068e:	68fa      	ldr	r2, [r7, #12]
 8000690:	69bb      	ldr	r3, [r7, #24]
 8000692:	3308      	adds	r3, #8
 8000694:	009b      	lsls	r3, r3, #2
 8000696:	6839      	ldr	r1, [r7, #0]
 8000698:	18cb      	adds	r3, r1, r3
 800069a:	601a      	str	r2, [r3, #0]
            ptr[16 + i] = (b & (1 << (7 - i))) ? pulse_high : pulse_low; // Blau
 800069c:	69bb      	ldr	r3, [r7, #24]
 800069e:	2207      	movs	r2, #7
 80006a0:	1ad3      	subs	r3, r2, r3
 80006a2:	2201      	movs	r2, #1
 80006a4:	409a      	lsls	r2, r3
 80006a6:	0013      	movs	r3, r2
 80006a8:	001a      	movs	r2, r3
 80006aa:	69fb      	ldr	r3, [r7, #28]
 80006ac:	4013      	ands	r3, r2
 80006ae:	d001      	beq.n	80006b4 <led_fill_led_pwm_data+0x158>
 80006b0:	693a      	ldr	r2, [r7, #16]
 80006b2:	e000      	b.n	80006b6 <led_fill_led_pwm_data+0x15a>
 80006b4:	68fa      	ldr	r2, [r7, #12]
 80006b6:	69bb      	ldr	r3, [r7, #24]
 80006b8:	3310      	adds	r3, #16
 80006ba:	009b      	lsls	r3, r3, #2
 80006bc:	6839      	ldr	r1, [r7, #0]
 80006be:	18cb      	adds	r3, r1, r3
 80006c0:	601a      	str	r2, [r3, #0]
        for (size_t i = 0; i < 8; i++) {
 80006c2:	69bb      	ldr	r3, [r7, #24]
 80006c4:	3301      	adds	r3, #1
 80006c6:	61bb      	str	r3, [r7, #24]
 80006c8:	69bb      	ldr	r3, [r7, #24]
 80006ca:	2b07      	cmp	r3, #7
 80006cc:	d9c1      	bls.n	8000652 <led_fill_led_pwm_data+0xf6>
        }
    }
}
 80006ce:	46c0      	nop			@ (mov r8, r8)
 80006d0:	46bd      	mov	sp, r7
 80006d2:	b00a      	add	sp, #40	@ 0x28
 80006d4:	bd80      	pop	{r7, pc}
 80006d6:	46c0      	nop			@ (mov r8, r8)
 80006d8:	20000194 	.word	0x20000194
 80006dc:	20000174 	.word	0x20000174
 80006e0:	20000175 	.word	0x20000175
 80006e4:	20000178 	.word	0x20000178
 80006e8:	20000088 	.word	0x20000088
 80006ec:	20000000 	.word	0x20000000

080006f0 <led_update_sequence>:

/**
  * @brief Aktualisiert WS2812-Daten bei DMA-HT/TC-Ereignissen
  * @param tc: 1 für Transfer Complete, 0 für Half Transfer
  */
void led_update_sequence(uint8_t tc) {
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b084      	sub	sp, #16
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	0002      	movs	r2, r0
 80006f8:	1dfb      	adds	r3, r7, #7
 80006fa:	701a      	strb	r2, [r3, #0]
    tc = tc ? 1 : 0;
 80006fc:	1dfb      	adds	r3, r7, #7
 80006fe:	781b      	ldrb	r3, [r3, #0]
 8000700:	1e5a      	subs	r2, r3, #1
 8000702:	4193      	sbcs	r3, r2
 8000704:	b2da      	uxtb	r2, r3
 8000706:	1dfb      	adds	r3, r7, #7
 8000708:	701a      	strb	r2, [r3, #0]
    if (!is_updating) {
 800070a:	4b26      	ldr	r3, [pc, #152]	@ (80007a4 <led_update_sequence+0xb4>)
 800070c:	781b      	ldrb	r3, [r3, #0]
 800070e:	b2db      	uxtb	r3, r3
 8000710:	2b00      	cmp	r3, #0
 8000712:	d043      	beq.n	800079c <led_update_sequence+0xac>
        return;
    }

    led_cycles_cnt += LED_CFG_LEDS_PER_DMA_IRQ;
 8000714:	4b24      	ldr	r3, [pc, #144]	@ (80007a8 <led_update_sequence+0xb8>)
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	1c5a      	adds	r2, r3, #1
 800071a:	4b23      	ldr	r3, [pc, #140]	@ (80007a8 <led_update_sequence+0xb8>)
 800071c:	601a      	str	r2, [r3, #0]

    if (led_cycles_cnt < LED_RESET_PRE_MIN_LED_CYCLES) {
 800071e:	4b22      	ldr	r3, [pc, #136]	@ (80007a8 <led_update_sequence+0xb8>)
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	2b01      	cmp	r3, #1
 8000724:	d93b      	bls.n	800079e <led_update_sequence+0xae>
            for (uint32_t i = 0; index < LED_CFG_LEDS_PER_DMA_IRQ && i < LED_CFG_COUNT; ++index, ++i) {
                led_fill_led_pwm_data(i, &dma_buffer[tc * DMA_BUFF_ELE_HALF_LEN + (index % LED_CFG_LEDS_PER_DMA_IRQ) * DMA_BUFF_ELE_LED_LEN]);
            }
        }
#endif
    } else if (led_cycles_cnt < (LED_RESET_PRE_MIN_LED_CYCLES + LED_CFG_COUNT)) {
 8000726:	4b20      	ldr	r3, [pc, #128]	@ (80007a8 <led_update_sequence+0xb8>)
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	2b0d      	cmp	r3, #13
 800072c:	d812      	bhi.n	8000754 <led_update_sequence+0x64>
        uint32_t next_led = led_cycles_cnt - LED_RESET_PRE_MIN_LED_CYCLES;
 800072e:	4b1e      	ldr	r3, [pc, #120]	@ (80007a8 <led_update_sequence+0xb8>)
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	3b02      	subs	r3, #2
 8000734:	60fb      	str	r3, [r7, #12]
#if LED_CFG_LEDS_PER_DMA_IRQ == 1
        led_fill_led_pwm_data(next_led, &dma_buffer[tc * DMA_BUFF_ELE_HALF_LEN]);
 8000736:	1dfb      	adds	r3, r7, #7
 8000738:	781a      	ldrb	r2, [r3, #0]
 800073a:	0013      	movs	r3, r2
 800073c:	005b      	lsls	r3, r3, #1
 800073e:	189b      	adds	r3, r3, r2
 8000740:	00db      	lsls	r3, r3, #3
 8000742:	009a      	lsls	r2, r3, #2
 8000744:	4b19      	ldr	r3, [pc, #100]	@ (80007ac <led_update_sequence+0xbc>)
 8000746:	18d2      	adds	r2, r2, r3
 8000748:	68fb      	ldr	r3, [r7, #12]
 800074a:	0011      	movs	r1, r2
 800074c:	0018      	movs	r0, r3
 800074e:	f7ff ff05 	bl	800055c <led_fill_led_pwm_data>
 8000752:	e024      	b.n	800079e <led_update_sequence+0xae>
        if (counter < LED_CFG_LEDS_PER_DMA_IRQ) {
            memset(&dma_buffer[tc * DMA_BUFF_ELE_HALF_LEN + counter * DMA_BUFF_ELE_LED_SIZEOF], 0x00,
                   (LED_CFG_LEDS_PER_DMA_IRQ - counter) * DMA_BUFF_ELE_LED_SIZEOF);
        }
#endif
    } else if (led_cycles_cnt < (LED_RESET_PRE_MIN_LED_CYCLES + LED_CFG_COUNT + LED_RESET_POST_MIN_LED_CYCLES + LED_CFG_LEDS_PER_DMA_IRQ)) {
 8000754:	4b14      	ldr	r3, [pc, #80]	@ (80007a8 <led_update_sequence+0xb8>)
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	2b10      	cmp	r3, #16
 800075a:	d812      	bhi.n	8000782 <led_update_sequence+0x92>
        if (led_cycles_cnt < (LED_RESET_PRE_MIN_LED_CYCLES + LED_CFG_COUNT + 2 * LED_CFG_LEDS_PER_DMA_IRQ)) {
 800075c:	4b12      	ldr	r3, [pc, #72]	@ (80007a8 <led_update_sequence+0xb8>)
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	2b0f      	cmp	r3, #15
 8000762:	d81c      	bhi.n	800079e <led_update_sequence+0xae>
            memset(&dma_buffer[tc * DMA_BUFF_ELE_HALF_LEN], 0x00, DMA_BUFF_ELE_HALF_SIZEOF);
 8000764:	1dfb      	adds	r3, r7, #7
 8000766:	781a      	ldrb	r2, [r3, #0]
 8000768:	0013      	movs	r3, r2
 800076a:	005b      	lsls	r3, r3, #1
 800076c:	189b      	adds	r3, r3, r2
 800076e:	00db      	lsls	r3, r3, #3
 8000770:	009a      	lsls	r2, r3, #2
 8000772:	4b0e      	ldr	r3, [pc, #56]	@ (80007ac <led_update_sequence+0xbc>)
 8000774:	18d3      	adds	r3, r2, r3
 8000776:	2260      	movs	r2, #96	@ 0x60
 8000778:	2100      	movs	r1, #0
 800077a:	0018      	movs	r0, r3
 800077c:	f003 f842 	bl	8003804 <memset>
 8000780:	e00d      	b.n	800079e <led_update_sequence+0xae>
        }
    } else {
        HAL_DMA_Abort_IT(&hdma_tim3_ch2);
 8000782:	4b0b      	ldr	r3, [pc, #44]	@ (80007b0 <led_update_sequence+0xc0>)
 8000784:	0018      	movs	r0, r3
 8000786:	f000 ff63 	bl	8001650 <HAL_DMA_Abort_IT>
        HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_2);
 800078a:	4b0a      	ldr	r3, [pc, #40]	@ (80007b4 <led_update_sequence+0xc4>)
 800078c:	2104      	movs	r1, #4
 800078e:	0018      	movs	r0, r3
 8000790:	f002 f836 	bl	8002800 <HAL_TIM_PWM_Stop>
        is_updating = 0;
 8000794:	4b03      	ldr	r3, [pc, #12]	@ (80007a4 <led_update_sequence+0xb4>)
 8000796:	2200      	movs	r2, #0
 8000798:	701a      	strb	r2, [r3, #0]
 800079a:	e000      	b.n	800079e <led_update_sequence+0xae>
        return;
 800079c:	46c0      	nop			@ (mov r8, r8)
    }
}
 800079e:	46bd      	mov	sp, r7
 80007a0:	b004      	add	sp, #16
 80007a2:	bd80      	pop	{r7, pc}
 80007a4:	2000016c 	.word	0x2000016c
 80007a8:	20000170 	.word	0x20000170
 80007ac:	200000ac 	.word	0x200000ac
 80007b0:	2000002c 	.word	0x2000002c
 80007b4:	20000194 	.word	0x20000194

080007b8 <led_start_transfer>:

/**
  * @brief Startet die WS2812-Datenübertragung
  * @return 1 wenn gestartet, 0 wenn bereits läuft
  */
uint8_t led_start_transfer(void) {
 80007b8:	b590      	push	{r4, r7, lr}
 80007ba:	b085      	sub	sp, #20
 80007bc:	af00      	add	r7, sp, #0
    extern TIM_HandleTypeDef htim3;
    if (is_updating) {
 80007be:	4b58      	ldr	r3, [pc, #352]	@ (8000920 <led_start_transfer+0x168>)
 80007c0:	781b      	ldrb	r3, [r3, #0]
 80007c2:	b2db      	uxtb	r3, r3
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d001      	beq.n	80007cc <led_start_transfer+0x14>
        return 0;
 80007c8:	2300      	movs	r3, #0
 80007ca:	e0a4      	b.n	8000916 <led_start_transfer+0x15e>
    }

    is_updating = 1;
 80007cc:	4b54      	ldr	r3, [pc, #336]	@ (8000920 <led_start_transfer+0x168>)
 80007ce:	2201      	movs	r2, #1
 80007d0:	701a      	strb	r2, [r3, #0]
    led_cycles_cnt = LED_CFG_LEDS_PER_DMA_IRQ;
 80007d2:	4b54      	ldr	r3, [pc, #336]	@ (8000924 <led_start_transfer+0x16c>)
 80007d4:	2201      	movs	r2, #1
 80007d6:	601a      	str	r2, [r3, #0]

    memset(dma_buffer, 0x00, sizeof(dma_buffer));
 80007d8:	4b53      	ldr	r3, [pc, #332]	@ (8000928 <led_start_transfer+0x170>)
 80007da:	22c0      	movs	r2, #192	@ 0xc0
 80007dc:	2100      	movs	r1, #0
 80007de:	0018      	movs	r0, r3
 80007e0:	f003 f810 	bl	8003804 <memset>
    for (uint32_t i = 0, index = LED_RESET_PRE_MIN_LED_CYCLES; index < 2 * LED_CFG_LEDS_PER_DMA_IRQ; ++index, ++i) {
 80007e4:	2300      	movs	r3, #0
 80007e6:	60fb      	str	r3, [r7, #12]
 80007e8:	2302      	movs	r3, #2
 80007ea:	60bb      	str	r3, [r7, #8]
 80007ec:	e012      	b.n	8000814 <led_start_transfer+0x5c>
        led_fill_led_pwm_data(i, &dma_buffer[index * DMA_BUFF_ELE_LED_LEN]);
 80007ee:	68ba      	ldr	r2, [r7, #8]
 80007f0:	0013      	movs	r3, r2
 80007f2:	005b      	lsls	r3, r3, #1
 80007f4:	189b      	adds	r3, r3, r2
 80007f6:	00db      	lsls	r3, r3, #3
 80007f8:	009a      	lsls	r2, r3, #2
 80007fa:	4b4b      	ldr	r3, [pc, #300]	@ (8000928 <led_start_transfer+0x170>)
 80007fc:	18d2      	adds	r2, r2, r3
 80007fe:	68fb      	ldr	r3, [r7, #12]
 8000800:	0011      	movs	r1, r2
 8000802:	0018      	movs	r0, r3
 8000804:	f7ff feaa 	bl	800055c <led_fill_led_pwm_data>
    for (uint32_t i = 0, index = LED_RESET_PRE_MIN_LED_CYCLES; index < 2 * LED_CFG_LEDS_PER_DMA_IRQ; ++index, ++i) {
 8000808:	68bb      	ldr	r3, [r7, #8]
 800080a:	3301      	adds	r3, #1
 800080c:	60bb      	str	r3, [r7, #8]
 800080e:	68fb      	ldr	r3, [r7, #12]
 8000810:	3301      	adds	r3, #1
 8000812:	60fb      	str	r3, [r7, #12]
 8000814:	68bb      	ldr	r3, [r7, #8]
 8000816:	2b01      	cmp	r3, #1
 8000818:	d9e9      	bls.n	80007ee <led_start_transfer+0x36>
    }

    // Deinitialisiere und initialisiere den DMA-Kanal neu
    HAL_DMA_DeInit(&hdma_tim3_ch2);
 800081a:	4b44      	ldr	r3, [pc, #272]	@ (800092c <led_start_transfer+0x174>)
 800081c:	0018      	movs	r0, r3
 800081e:	f000 fe19 	bl	8001454 <HAL_DMA_DeInit>
    if (HAL_DMA_Init(&hdma_tim3_ch2) != HAL_OK) {
 8000822:	4b42      	ldr	r3, [pc, #264]	@ (800092c <led_start_transfer+0x174>)
 8000824:	0018      	movs	r0, r3
 8000826:	f000 fd8b 	bl	8001340 <HAL_DMA_Init>
 800082a:	1e03      	subs	r3, r0, #0
 800082c:	d00c      	beq.n	8000848 <led_start_transfer+0x90>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 800082e:	2380      	movs	r3, #128	@ 0x80
 8000830:	0119      	lsls	r1, r3, #4
 8000832:	23a0      	movs	r3, #160	@ 0xa0
 8000834:	05db      	lsls	r3, r3, #23
 8000836:	2201      	movs	r2, #1
 8000838:	0018      	movs	r0, r3
 800083a:	f001 fa25 	bl	8001c88 <HAL_GPIO_WritePin>
        HAL_Delay(100);
 800083e:	2064      	movs	r0, #100	@ 0x64
 8000840:	f000 fc7c 	bl	800113c <HAL_Delay>
        while (1);
 8000844:	46c0      	nop			@ (mov r8, r8)
 8000846:	e7fd      	b.n	8000844 <led_start_transfer+0x8c>
    }

    // Überprüfe den DMA-Zustand vor dem Start
    HAL_DMA_StateTypeDef dma_state = HAL_DMA_GetState(&hdma_tim3_ch2);
 8000848:	1dfc      	adds	r4, r7, #7
 800084a:	4b38      	ldr	r3, [pc, #224]	@ (800092c <led_start_transfer+0x174>)
 800084c:	0018      	movs	r0, r3
 800084e:	f001 f81b 	bl	8001888 <HAL_DMA_GetState>
 8000852:	0003      	movs	r3, r0
 8000854:	7023      	strb	r3, [r4, #0]
    if (dma_state != HAL_DMA_STATE_READY) {
 8000856:	1dfb      	adds	r3, r7, #7
 8000858:	781b      	ldrb	r3, [r3, #0]
 800085a:	2b01      	cmp	r3, #1
 800085c:	d00c      	beq.n	8000878 <led_start_transfer+0xc0>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 800085e:	2380      	movs	r3, #128	@ 0x80
 8000860:	0119      	lsls	r1, r3, #4
 8000862:	23a0      	movs	r3, #160	@ 0xa0
 8000864:	05db      	lsls	r3, r3, #23
 8000866:	2201      	movs	r2, #1
 8000868:	0018      	movs	r0, r3
 800086a:	f001 fa0d 	bl	8001c88 <HAL_GPIO_WritePin>
        HAL_Delay(100);
 800086e:	2064      	movs	r0, #100	@ 0x64
 8000870:	f000 fc64 	bl	800113c <HAL_Delay>
        while (1);
 8000874:	46c0      	nop			@ (mov r8, r8)
 8000876:	e7fd      	b.n	8000874 <led_start_transfer+0xbc>
    }

    // Überprüfe die NVIC-Einstellungen
    if (!NVIC_GetEnableIRQ(DMA1_Channel1_IRQn)) {
 8000878:	2009      	movs	r0, #9
 800087a:	f7ff fe51 	bl	8000520 <__NVIC_GetEnableIRQ>
 800087e:	1e03      	subs	r3, r0, #0
 8000880:	d114      	bne.n	80008ac <led_start_transfer+0xf4>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8000882:	2380      	movs	r3, #128	@ 0x80
 8000884:	0119      	lsls	r1, r3, #4
 8000886:	23a0      	movs	r3, #160	@ 0xa0
 8000888:	05db      	lsls	r3, r3, #23
 800088a:	2201      	movs	r2, #1
 800088c:	0018      	movs	r0, r3
 800088e:	f001 f9fb 	bl	8001c88 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 8000892:	2380      	movs	r3, #128	@ 0x80
 8000894:	0059      	lsls	r1, r3, #1
 8000896:	23a0      	movs	r3, #160	@ 0xa0
 8000898:	05db      	lsls	r3, r3, #23
 800089a:	2201      	movs	r2, #1
 800089c:	0018      	movs	r0, r3
 800089e:	f001 f9f3 	bl	8001c88 <HAL_GPIO_WritePin>
        HAL_Delay(100);
 80008a2:	2064      	movs	r0, #100	@ 0x64
 80008a4:	f000 fc4a 	bl	800113c <HAL_Delay>
        while (1);
 80008a8:	46c0      	nop			@ (mov r8, r8)
 80008aa:	e7fd      	b.n	80008a8 <led_start_transfer+0xf0>
    }

    // Überprüfe die Timer-Initialisierung
    if (htim3.Instance == NULL) {
 80008ac:	4b20      	ldr	r3, [pc, #128]	@ (8000930 <led_start_transfer+0x178>)
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d109      	bne.n	80008c8 <led_start_transfer+0x110>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 80008b4:	2380      	movs	r3, #128	@ 0x80
 80008b6:	0059      	lsls	r1, r3, #1
 80008b8:	23a0      	movs	r3, #160	@ 0xa0
 80008ba:	05db      	lsls	r3, r3, #23
 80008bc:	2201      	movs	r2, #1
 80008be:	0018      	movs	r0, r3
 80008c0:	f001 f9e2 	bl	8001c88 <HAL_GPIO_WritePin>
        while (1);
 80008c4:	46c0      	nop			@ (mov r8, r8)
 80008c6:	e7fd      	b.n	80008c4 <led_start_transfer+0x10c>
    }

    // Starte den Timer mit DMA
    htim3.Instance->DIER |= TIM_DIER_CC2DE; // Explizit aktivieren
 80008c8:	4b19      	ldr	r3, [pc, #100]	@ (8000930 <led_start_transfer+0x178>)
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	68da      	ldr	r2, [r3, #12]
 80008ce:	4b18      	ldr	r3, [pc, #96]	@ (8000930 <led_start_transfer+0x178>)
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	2180      	movs	r1, #128	@ 0x80
 80008d4:	00c9      	lsls	r1, r1, #3
 80008d6:	430a      	orrs	r2, r1
 80008d8:	60da      	str	r2, [r3, #12]
    if (HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_2, dma_buffer, DMA_BUFF_ELE_LEN) != HAL_OK) {
 80008da:	4a13      	ldr	r2, [pc, #76]	@ (8000928 <led_start_transfer+0x170>)
 80008dc:	4814      	ldr	r0, [pc, #80]	@ (8000930 <led_start_transfer+0x178>)
 80008de:	2330      	movs	r3, #48	@ 0x30
 80008e0:	2104      	movs	r1, #4
 80008e2:	f002 f813 	bl	800290c <HAL_TIM_PWM_Start_DMA>
 80008e6:	1e03      	subs	r3, r0, #0
 80008e8:	d014      	beq.n	8000914 <led_start_transfer+0x15c>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 80008ea:	2380      	movs	r3, #128	@ 0x80
 80008ec:	0119      	lsls	r1, r3, #4
 80008ee:	23a0      	movs	r3, #160	@ 0xa0
 80008f0:	05db      	lsls	r3, r3, #23
 80008f2:	2201      	movs	r2, #1
 80008f4:	0018      	movs	r0, r3
 80008f6:	f001 f9c7 	bl	8001c88 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 80008fa:	2380      	movs	r3, #128	@ 0x80
 80008fc:	0059      	lsls	r1, r3, #1
 80008fe:	23a0      	movs	r3, #160	@ 0xa0
 8000900:	05db      	lsls	r3, r3, #23
 8000902:	2201      	movs	r2, #1
 8000904:	0018      	movs	r0, r3
 8000906:	f001 f9bf 	bl	8001c88 <HAL_GPIO_WritePin>
        HAL_Delay(100);
 800090a:	2064      	movs	r0, #100	@ 0x64
 800090c:	f000 fc16 	bl	800113c <HAL_Delay>
        while (1);
 8000910:	46c0      	nop			@ (mov r8, r8)
 8000912:	e7fd      	b.n	8000910 <led_start_transfer+0x158>
    }

    return 1;
 8000914:	2301      	movs	r3, #1
}
 8000916:	0018      	movs	r0, r3
 8000918:	46bd      	mov	sp, r7
 800091a:	b005      	add	sp, #20
 800091c:	bd90      	pop	{r4, r7, pc}
 800091e:	46c0      	nop			@ (mov r8, r8)
 8000920:	2000016c 	.word	0x2000016c
 8000924:	20000170 	.word	0x20000170
 8000928:	200000ac 	.word	0x200000ac
 800092c:	2000002c 	.word	0x2000002c
 8000930:	20000194 	.word	0x20000194

08000934 <main>:

/**
  * @brief  Der Einstiegspunkt der Anwendung.
  * @retval int
  */
int main(void) {
 8000934:	b580      	push	{r7, lr}
 8000936:	b082      	sub	sp, #8
 8000938:	af00      	add	r7, sp, #0
    HAL_Init();
 800093a:	f000 fb79 	bl	8001030 <HAL_Init>
    SystemClock_Config();
 800093e:	f000 f82f 	bl	80009a0 <SystemClock_Config>
    MX_GPIO_Init(); // GPIO-Initialisierung für PA1
 8000942:	f7ff fda3 	bl	800048c <MX_GPIO_Init>
    MX_DMA_Init();
 8000946:	f7ff fd53 	bl	80003f0 <MX_DMA_Init>
    MX_TIM3_Init();
 800094a:	f000 fa4d 	bl	8000de8 <MX_TIM3_Init>

    // SysTick-Konfiguration (1 ms Interrupt)
    HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / 1000);
 800094e:	f001 fef5 	bl	800273c <HAL_RCC_GetHCLKFreq>
 8000952:	0002      	movs	r2, r0
 8000954:	23fa      	movs	r3, #250	@ 0xfa
 8000956:	0099      	lsls	r1, r3, #2
 8000958:	0010      	movs	r0, r2
 800095a:	f7ff fbd3 	bl	8000104 <__udivsi3>
 800095e:	0003      	movs	r3, r0
 8000960:	0018      	movs	r0, r3
 8000962:	f000 fce0 	bl	8001326 <HAL_SYSTICK_Config>
    HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8000966:	2301      	movs	r3, #1
 8000968:	425b      	negs	r3, r3
 800096a:	2200      	movs	r2, #0
 800096c:	2100      	movs	r1, #0
 800096e:	0018      	movs	r0, r3
 8000970:	f000 fcb4 	bl	80012dc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SysTick_IRQn);
 8000974:	2301      	movs	r3, #1
 8000976:	425b      	negs	r3, r3
 8000978:	0018      	movs	r0, r3
 800097a:	f000 fcc4 	bl	8001306 <HAL_NVIC_EnableIRQ>

    while (1) {
        uint32_t current_time = HAL_GetTick();
 800097e:	f000 fbd3 	bl	8001128 <HAL_GetTick>
 8000982:	0003      	movs	r3, r0
 8000984:	607b      	str	r3, [r7, #4]
        if (current_time - last_update_time >= 1) { // 1 ms Schleifenintervall
 8000986:	4b05      	ldr	r3, [pc, #20]	@ (800099c <main+0x68>)
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	687a      	ldr	r2, [r7, #4]
 800098c:	429a      	cmp	r2, r3
 800098e:	d0f6      	beq.n	800097e <main+0x4a>
            handle_state();
 8000990:	f000 f862 	bl	8000a58 <handle_state>
            last_update_time = current_time;
 8000994:	4b01      	ldr	r3, [pc, #4]	@ (800099c <main+0x68>)
 8000996:	687a      	ldr	r2, [r7, #4]
 8000998:	601a      	str	r2, [r3, #0]
    while (1) {
 800099a:	e7f0      	b.n	800097e <main+0x4a>
 800099c:	20000180 	.word	0x20000180

080009a0 <SystemClock_Config>:

/**
  * @brief Systemtakt-Konfiguration
  * @retval Keine
  */
void SystemClock_Config(void) {
 80009a0:	b590      	push	{r4, r7, lr}
 80009a2:	b093      	sub	sp, #76	@ 0x4c
 80009a4:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009a6:	2410      	movs	r4, #16
 80009a8:	193b      	adds	r3, r7, r4
 80009aa:	0018      	movs	r0, r3
 80009ac:	2338      	movs	r3, #56	@ 0x38
 80009ae:	001a      	movs	r2, r3
 80009b0:	2100      	movs	r1, #0
 80009b2:	f002 ff27 	bl	8003804 <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009b6:	003b      	movs	r3, r7
 80009b8:	0018      	movs	r0, r3
 80009ba:	2310      	movs	r3, #16
 80009bc:	001a      	movs	r2, r3
 80009be:	2100      	movs	r1, #0
 80009c0:	f002 ff20 	bl	8003804 <memset>

    HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80009c4:	2380      	movs	r3, #128	@ 0x80
 80009c6:	009b      	lsls	r3, r3, #2
 80009c8:	0018      	movs	r0, r3
 80009ca:	f001 f9d3 	bl	8001d74 <HAL_PWREx_ControlVoltageScaling>

    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80009ce:	193b      	adds	r3, r7, r4
 80009d0:	2202      	movs	r2, #2
 80009d2:	601a      	str	r2, [r3, #0]
    RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009d4:	193b      	adds	r3, r7, r4
 80009d6:	2280      	movs	r2, #128	@ 0x80
 80009d8:	0052      	lsls	r2, r2, #1
 80009da:	60da      	str	r2, [r3, #12]
    RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80009dc:	0021      	movs	r1, r4
 80009de:	187b      	adds	r3, r7, r1
 80009e0:	2200      	movs	r2, #0
 80009e2:	611a      	str	r2, [r3, #16]
    RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009e4:	187b      	adds	r3, r7, r1
 80009e6:	2240      	movs	r2, #64	@ 0x40
 80009e8:	615a      	str	r2, [r3, #20]
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009ea:	187b      	adds	r3, r7, r1
 80009ec:	2202      	movs	r2, #2
 80009ee:	61da      	str	r2, [r3, #28]
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80009f0:	187b      	adds	r3, r7, r1
 80009f2:	2202      	movs	r2, #2
 80009f4:	621a      	str	r2, [r3, #32]
    RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80009f6:	187b      	adds	r3, r7, r1
 80009f8:	2200      	movs	r2, #0
 80009fa:	625a      	str	r2, [r3, #36]	@ 0x24
    RCC_OscInitStruct.PLL.PLLN = 8;
 80009fc:	187b      	adds	r3, r7, r1
 80009fe:	2208      	movs	r2, #8
 8000a00:	629a      	str	r2, [r3, #40]	@ 0x28
    RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a02:	187b      	adds	r3, r7, r1
 8000a04:	2280      	movs	r2, #128	@ 0x80
 8000a06:	0292      	lsls	r2, r2, #10
 8000a08:	62da      	str	r2, [r3, #44]	@ 0x2c
    RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000a0a:	187b      	adds	r3, r7, r1
 8000a0c:	2280      	movs	r2, #128	@ 0x80
 8000a0e:	0492      	lsls	r2, r2, #18
 8000a10:	631a      	str	r2, [r3, #48]	@ 0x30
    RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000a12:	187b      	adds	r3, r7, r1
 8000a14:	2280      	movs	r2, #128	@ 0x80
 8000a16:	0592      	lsls	r2, r2, #22
 8000a18:	635a      	str	r2, [r3, #52]	@ 0x34
    HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8000a1a:	187b      	adds	r3, r7, r1
 8000a1c:	0018      	movs	r0, r3
 8000a1e:	f001 f9e9 	bl	8001df4 <HAL_RCC_OscConfig>

    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1;
 8000a22:	003b      	movs	r3, r7
 8000a24:	2207      	movs	r2, #7
 8000a26:	601a      	str	r2, [r3, #0]
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a28:	003b      	movs	r3, r7
 8000a2a:	2202      	movs	r2, #2
 8000a2c:	605a      	str	r2, [r3, #4]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a2e:	003b      	movs	r3, r7
 8000a30:	2200      	movs	r2, #0
 8000a32:	609a      	str	r2, [r3, #8]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a34:	003b      	movs	r3, r7
 8000a36:	2200      	movs	r2, #0
 8000a38:	60da      	str	r2, [r3, #12]
    HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2);
 8000a3a:	003b      	movs	r3, r7
 8000a3c:	2102      	movs	r1, #2
 8000a3e:	0018      	movs	r0, r3
 8000a40:	f001 fcf2 	bl	8002428 <HAL_RCC_ClockConfig>
}
 8000a44:	46c0      	nop			@ (mov r8, r8)
 8000a46:	46bd      	mov	sp, r7
 8000a48:	b013      	add	sp, #76	@ 0x4c
 8000a4a:	bd90      	pop	{r4, r7, pc}

08000a4c <Error_Handler>:

/**
  * @brief  Diese Funktion wird bei Fehlern ausgeführt.
  * @retval Keine
  */
void Error_Handler(void) {
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a50:	b672      	cpsid	i
}
 8000a52:	46c0      	nop			@ (mov r8, r8)
    __disable_irq();
    while (1) {
 8000a54:	46c0      	nop			@ (mov r8, r8)
 8000a56:	e7fd      	b.n	8000a54 <Error_Handler+0x8>

08000a58 <handle_state>:

/**
  * @brief  Behandelt die Finite State Machine (FSM) für die LED-Steuerung
  * @retval Keine
  */
void handle_state(void) {
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b084      	sub	sp, #16
 8000a5c:	af00      	add	r7, sp, #0
    static uint32_t last_circle_update_time = 0;
    static uint32_t last_flash_start_time = 0;

    uint32_t current_time = HAL_GetTick();
 8000a5e:	f000 fb63 	bl	8001128 <HAL_GetTick>
 8000a62:	0003      	movs	r3, r0
 8000a64:	607b      	str	r3, [r7, #4]

    // INTERRUPT-HANDLING VOR DEM SWITCH!
    if (interrupt_triggered && current_state != STATE_FLASH_BLUE) {
 8000a66:	4b7b      	ldr	r3, [pc, #492]	@ (8000c54 <handle_state+0x1fc>)
 8000a68:	781b      	ldrb	r3, [r3, #0]
 8000a6a:	b2db      	uxtb	r3, r3
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d01a      	beq.n	8000aa6 <handle_state+0x4e>
 8000a70:	4b79      	ldr	r3, [pc, #484]	@ (8000c58 <handle_state+0x200>)
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	2b01      	cmp	r3, #1
 8000a76:	d016      	beq.n	8000aa6 <handle_state+0x4e>
        previous_state = current_state;
 8000a78:	4b77      	ldr	r3, [pc, #476]	@ (8000c58 <handle_state+0x200>)
 8000a7a:	681a      	ldr	r2, [r3, #0]
 8000a7c:	4b77      	ldr	r3, [pc, #476]	@ (8000c5c <handle_state+0x204>)
 8000a7e:	601a      	str	r2, [r3, #0]
        current_state = STATE_FLASH_BLUE;
 8000a80:	4b75      	ldr	r3, [pc, #468]	@ (8000c58 <handle_state+0x200>)
 8000a82:	2201      	movs	r2, #1
 8000a84:	601a      	str	r2, [r3, #0]
        last_flash_start_time = HAL_GetTick(); // Sofort setzen!
 8000a86:	f000 fb4f 	bl	8001128 <HAL_GetTick>
 8000a8a:	0002      	movs	r2, r0
 8000a8c:	4b74      	ldr	r3, [pc, #464]	@ (8000c60 <handle_state+0x208>)
 8000a8e:	601a      	str	r2, [r3, #0]
        interrupt_triggered = 0;
 8000a90:	4b70      	ldr	r3, [pc, #448]	@ (8000c54 <handle_state+0x1fc>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	701a      	strb	r2, [r3, #0]
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET); // Flash-Blue aktiv
 8000a96:	2380      	movs	r3, #128	@ 0x80
 8000a98:	0159      	lsls	r1, r3, #5
 8000a9a:	23a0      	movs	r3, #160	@ 0xa0
 8000a9c:	05db      	lsls	r3, r3, #23
 8000a9e:	2201      	movs	r2, #1
 8000aa0:	0018      	movs	r0, r3
 8000aa2:	f001 f8f1 	bl	8001c88 <HAL_GPIO_WritePin>
    }

    // Debug: Zeige aktuellen State an PA8
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, (current_state == STATE_FLASH_BLUE) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000aa6:	4b6c      	ldr	r3, [pc, #432]	@ (8000c58 <handle_state+0x200>)
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	3b01      	subs	r3, #1
 8000aac:	425a      	negs	r2, r3
 8000aae:	4153      	adcs	r3, r2
 8000ab0:	b2db      	uxtb	r3, r3
 8000ab2:	001a      	movs	r2, r3
 8000ab4:	2380      	movs	r3, #128	@ 0x80
 8000ab6:	0059      	lsls	r1, r3, #1
 8000ab8:	23a0      	movs	r3, #160	@ 0xa0
 8000aba:	05db      	lsls	r3, r3, #23
 8000abc:	0018      	movs	r0, r3
 8000abe:	f001 f8e3 	bl	8001c88 <HAL_GPIO_WritePin>

    switch (current_state) {
 8000ac2:	4b65      	ldr	r3, [pc, #404]	@ (8000c58 <handle_state+0x200>)
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d002      	beq.n	8000ad0 <handle_state+0x78>
 8000aca:	2b01      	cmp	r3, #1
 8000acc:	d06a      	beq.n	8000ba4 <handle_state+0x14c>
                HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET); // Flash-Blue beendet
                current_state = previous_state;
            }
            break;
    }
}
 8000ace:	e0bd      	b.n	8000c4c <handle_state+0x1f4>
            if (current_time - last_circle_update_time >= CIRCLE_UPDATE_INTERVAL_MS) {
 8000ad0:	4b64      	ldr	r3, [pc, #400]	@ (8000c64 <handle_state+0x20c>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	687a      	ldr	r2, [r7, #4]
 8000ad6:	1ad3      	subs	r3, r2, r3
 8000ad8:	2b42      	cmp	r3, #66	@ 0x42
 8000ada:	d800      	bhi.n	8000ade <handle_state+0x86>
 8000adc:	e0b3      	b.n	8000c46 <handle_state+0x1ee>
                if (is_updating) {
 8000ade:	4b62      	ldr	r3, [pc, #392]	@ (8000c68 <handle_state+0x210>)
 8000ae0:	781b      	ldrb	r3, [r3, #0]
 8000ae2:	b2db      	uxtb	r3, r3
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d00b      	beq.n	8000b00 <handle_state+0xa8>
                    HAL_DMA_Abort_IT(&hdma_tim3_ch2);
 8000ae8:	4b60      	ldr	r3, [pc, #384]	@ (8000c6c <handle_state+0x214>)
 8000aea:	0018      	movs	r0, r3
 8000aec:	f000 fdb0 	bl	8001650 <HAL_DMA_Abort_IT>
                    HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_2);
 8000af0:	4b5f      	ldr	r3, [pc, #380]	@ (8000c70 <handle_state+0x218>)
 8000af2:	2104      	movs	r1, #4
 8000af4:	0018      	movs	r0, r3
 8000af6:	f001 fe83 	bl	8002800 <HAL_TIM_PWM_Stop>
                    is_updating = 0;
 8000afa:	4b5b      	ldr	r3, [pc, #364]	@ (8000c68 <handle_state+0x210>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	701a      	strb	r2, [r3, #0]
                for (size_t i = 0; i < LED_CFG_COUNT; ++i) {
 8000b00:	2300      	movs	r3, #0
 8000b02:	60fb      	str	r3, [r7, #12]
 8000b04:	e019      	b.n	8000b3a <handle_state+0xe2>
                    leds_color_data[i * LED_CFG_BYTES_PER_LED + 0] = 0x00; // Rot
 8000b06:	68fa      	ldr	r2, [r7, #12]
 8000b08:	0013      	movs	r3, r2
 8000b0a:	005b      	lsls	r3, r3, #1
 8000b0c:	189b      	adds	r3, r3, r2
 8000b0e:	4a59      	ldr	r2, [pc, #356]	@ (8000c74 <handle_state+0x21c>)
 8000b10:	2100      	movs	r1, #0
 8000b12:	54d1      	strb	r1, [r2, r3]
                    leds_color_data[i * LED_CFG_BYTES_PER_LED + 1] = 0x00; // Grün
 8000b14:	68fa      	ldr	r2, [r7, #12]
 8000b16:	0013      	movs	r3, r2
 8000b18:	005b      	lsls	r3, r3, #1
 8000b1a:	189b      	adds	r3, r3, r2
 8000b1c:	3301      	adds	r3, #1
 8000b1e:	4a55      	ldr	r2, [pc, #340]	@ (8000c74 <handle_state+0x21c>)
 8000b20:	2100      	movs	r1, #0
 8000b22:	54d1      	strb	r1, [r2, r3]
                    leds_color_data[i * LED_CFG_BYTES_PER_LED + 2] = 0x00; // Blau
 8000b24:	68fa      	ldr	r2, [r7, #12]
 8000b26:	0013      	movs	r3, r2
 8000b28:	005b      	lsls	r3, r3, #1
 8000b2a:	189b      	adds	r3, r3, r2
 8000b2c:	3302      	adds	r3, #2
 8000b2e:	4a51      	ldr	r2, [pc, #324]	@ (8000c74 <handle_state+0x21c>)
 8000b30:	2100      	movs	r1, #0
 8000b32:	54d1      	strb	r1, [r2, r3]
                for (size_t i = 0; i < LED_CFG_COUNT; ++i) {
 8000b34:	68fb      	ldr	r3, [r7, #12]
 8000b36:	3301      	adds	r3, #1
 8000b38:	60fb      	str	r3, [r7, #12]
 8000b3a:	68fb      	ldr	r3, [r7, #12]
 8000b3c:	2b0b      	cmp	r3, #11
 8000b3e:	d9e2      	bls.n	8000b06 <handle_state+0xae>
                leds_color_data[red_led_index * LED_CFG_BYTES_PER_LED + 0] = 0xFF; // Rot
 8000b40:	4b4d      	ldr	r3, [pc, #308]	@ (8000c78 <handle_state+0x220>)
 8000b42:	781b      	ldrb	r3, [r3, #0]
 8000b44:	b2db      	uxtb	r3, r3
 8000b46:	001a      	movs	r2, r3
 8000b48:	0013      	movs	r3, r2
 8000b4a:	005b      	lsls	r3, r3, #1
 8000b4c:	189b      	adds	r3, r3, r2
 8000b4e:	4a49      	ldr	r2, [pc, #292]	@ (8000c74 <handle_state+0x21c>)
 8000b50:	21ff      	movs	r1, #255	@ 0xff
 8000b52:	54d1      	strb	r1, [r2, r3]
                leds_color_data[red_led_index * LED_CFG_BYTES_PER_LED + 1] = 0x00; // Grün
 8000b54:	4b48      	ldr	r3, [pc, #288]	@ (8000c78 <handle_state+0x220>)
 8000b56:	781b      	ldrb	r3, [r3, #0]
 8000b58:	b2db      	uxtb	r3, r3
 8000b5a:	001a      	movs	r2, r3
 8000b5c:	0013      	movs	r3, r2
 8000b5e:	005b      	lsls	r3, r3, #1
 8000b60:	189b      	adds	r3, r3, r2
 8000b62:	3301      	adds	r3, #1
 8000b64:	4a43      	ldr	r2, [pc, #268]	@ (8000c74 <handle_state+0x21c>)
 8000b66:	2100      	movs	r1, #0
 8000b68:	54d1      	strb	r1, [r2, r3]
                leds_color_data[red_led_index * LED_CFG_BYTES_PER_LED + 2] = 0x80; // Blau (128)
 8000b6a:	4b43      	ldr	r3, [pc, #268]	@ (8000c78 <handle_state+0x220>)
 8000b6c:	781b      	ldrb	r3, [r3, #0]
 8000b6e:	b2db      	uxtb	r3, r3
 8000b70:	001a      	movs	r2, r3
 8000b72:	0013      	movs	r3, r2
 8000b74:	005b      	lsls	r3, r3, #1
 8000b76:	189b      	adds	r3, r3, r2
 8000b78:	3302      	adds	r3, #2
 8000b7a:	4a3e      	ldr	r2, [pc, #248]	@ (8000c74 <handle_state+0x21c>)
 8000b7c:	2180      	movs	r1, #128	@ 0x80
 8000b7e:	54d1      	strb	r1, [r2, r3]
                red_led_index = (red_led_index + 1) % LED_CFG_COUNT;
 8000b80:	4b3d      	ldr	r3, [pc, #244]	@ (8000c78 <handle_state+0x220>)
 8000b82:	781b      	ldrb	r3, [r3, #0]
 8000b84:	b2db      	uxtb	r3, r3
 8000b86:	3301      	adds	r3, #1
 8000b88:	210c      	movs	r1, #12
 8000b8a:	0018      	movs	r0, r3
 8000b8c:	f7ff fc2a 	bl	80003e4 <__aeabi_idivmod>
 8000b90:	000b      	movs	r3, r1
 8000b92:	b2da      	uxtb	r2, r3
 8000b94:	4b38      	ldr	r3, [pc, #224]	@ (8000c78 <handle_state+0x220>)
 8000b96:	701a      	strb	r2, [r3, #0]
                led_start_transfer();
 8000b98:	f7ff fe0e 	bl	80007b8 <led_start_transfer>
                last_circle_update_time = current_time;
 8000b9c:	4b31      	ldr	r3, [pc, #196]	@ (8000c64 <handle_state+0x20c>)
 8000b9e:	687a      	ldr	r2, [r7, #4]
 8000ba0:	601a      	str	r2, [r3, #0]
            break;
 8000ba2:	e050      	b.n	8000c46 <handle_state+0x1ee>
            if (is_updating) {
 8000ba4:	4b30      	ldr	r3, [pc, #192]	@ (8000c68 <handle_state+0x210>)
 8000ba6:	781b      	ldrb	r3, [r3, #0]
 8000ba8:	b2db      	uxtb	r3, r3
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d00b      	beq.n	8000bc6 <handle_state+0x16e>
                HAL_DMA_Abort_IT(&hdma_tim3_ch2);
 8000bae:	4b2f      	ldr	r3, [pc, #188]	@ (8000c6c <handle_state+0x214>)
 8000bb0:	0018      	movs	r0, r3
 8000bb2:	f000 fd4d 	bl	8001650 <HAL_DMA_Abort_IT>
                HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_2);
 8000bb6:	4b2e      	ldr	r3, [pc, #184]	@ (8000c70 <handle_state+0x218>)
 8000bb8:	2104      	movs	r1, #4
 8000bba:	0018      	movs	r0, r3
 8000bbc:	f001 fe20 	bl	8002800 <HAL_TIM_PWM_Stop>
                is_updating = 0;
 8000bc0:	4b29      	ldr	r3, [pc, #164]	@ (8000c68 <handle_state+0x210>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	701a      	strb	r2, [r3, #0]
            for (size_t i = 0; i < LED_CFG_COUNT; ++i) {
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	60bb      	str	r3, [r7, #8]
 8000bca:	e019      	b.n	8000c00 <handle_state+0x1a8>
                leds_color_data[i * LED_CFG_BYTES_PER_LED + 0] = 0x00;
 8000bcc:	68ba      	ldr	r2, [r7, #8]
 8000bce:	0013      	movs	r3, r2
 8000bd0:	005b      	lsls	r3, r3, #1
 8000bd2:	189b      	adds	r3, r3, r2
 8000bd4:	4a27      	ldr	r2, [pc, #156]	@ (8000c74 <handle_state+0x21c>)
 8000bd6:	2100      	movs	r1, #0
 8000bd8:	54d1      	strb	r1, [r2, r3]
                leds_color_data[i * LED_CFG_BYTES_PER_LED + 1] = 0x00;
 8000bda:	68ba      	ldr	r2, [r7, #8]
 8000bdc:	0013      	movs	r3, r2
 8000bde:	005b      	lsls	r3, r3, #1
 8000be0:	189b      	adds	r3, r3, r2
 8000be2:	3301      	adds	r3, #1
 8000be4:	4a23      	ldr	r2, [pc, #140]	@ (8000c74 <handle_state+0x21c>)
 8000be6:	2100      	movs	r1, #0
 8000be8:	54d1      	strb	r1, [r2, r3]
                leds_color_data[i * LED_CFG_BYTES_PER_LED + 2] = 0xFF;
 8000bea:	68ba      	ldr	r2, [r7, #8]
 8000bec:	0013      	movs	r3, r2
 8000bee:	005b      	lsls	r3, r3, #1
 8000bf0:	189b      	adds	r3, r3, r2
 8000bf2:	3302      	adds	r3, #2
 8000bf4:	4a1f      	ldr	r2, [pc, #124]	@ (8000c74 <handle_state+0x21c>)
 8000bf6:	21ff      	movs	r1, #255	@ 0xff
 8000bf8:	54d1      	strb	r1, [r2, r3]
            for (size_t i = 0; i < LED_CFG_COUNT; ++i) {
 8000bfa:	68bb      	ldr	r3, [r7, #8]
 8000bfc:	3301      	adds	r3, #1
 8000bfe:	60bb      	str	r3, [r7, #8]
 8000c00:	68bb      	ldr	r3, [r7, #8]
 8000c02:	2b0b      	cmp	r3, #11
 8000c04:	d9e2      	bls.n	8000bcc <handle_state+0x174>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8000c06:	2380      	movs	r3, #128	@ 0x80
 8000c08:	0119      	lsls	r1, r3, #4
 8000c0a:	23a0      	movs	r3, #160	@ 0xa0
 8000c0c:	05db      	lsls	r3, r3, #23
 8000c0e:	2201      	movs	r2, #1
 8000c10:	0018      	movs	r0, r3
 8000c12:	f001 f839 	bl	8001c88 <HAL_GPIO_WritePin>
            led_start_transfer();
 8000c16:	f7ff fdcf 	bl	80007b8 <led_start_transfer>
            if (HAL_GetTick() - last_flash_start_time >= FLASH_BLUE_DURATION_MS) {
 8000c1a:	f000 fa85 	bl	8001128 <HAL_GetTick>
 8000c1e:	0002      	movs	r2, r0
 8000c20:	4b0f      	ldr	r3, [pc, #60]	@ (8000c60 <handle_state+0x208>)
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	1ad3      	subs	r3, r2, r3
 8000c26:	4a15      	ldr	r2, [pc, #84]	@ (8000c7c <handle_state+0x224>)
 8000c28:	4293      	cmp	r3, r2
 8000c2a:	d90e      	bls.n	8000c4a <handle_state+0x1f2>
                HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET); // Flash-Blue beendet
 8000c2c:	2380      	movs	r3, #128	@ 0x80
 8000c2e:	0159      	lsls	r1, r3, #5
 8000c30:	23a0      	movs	r3, #160	@ 0xa0
 8000c32:	05db      	lsls	r3, r3, #23
 8000c34:	2200      	movs	r2, #0
 8000c36:	0018      	movs	r0, r3
 8000c38:	f001 f826 	bl	8001c88 <HAL_GPIO_WritePin>
                current_state = previous_state;
 8000c3c:	4b07      	ldr	r3, [pc, #28]	@ (8000c5c <handle_state+0x204>)
 8000c3e:	681a      	ldr	r2, [r3, #0]
 8000c40:	4b05      	ldr	r3, [pc, #20]	@ (8000c58 <handle_state+0x200>)
 8000c42:	601a      	str	r2, [r3, #0]
            break;
 8000c44:	e001      	b.n	8000c4a <handle_state+0x1f2>
            break;
 8000c46:	46c0      	nop			@ (mov r8, r8)
 8000c48:	e000      	b.n	8000c4c <handle_state+0x1f4>
            break;
 8000c4a:	46c0      	nop			@ (mov r8, r8)
}
 8000c4c:	46c0      	nop			@ (mov r8, r8)
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	b004      	add	sp, #16
 8000c52:	bd80      	pop	{r7, pc}
 8000c54:	20000176 	.word	0x20000176
 8000c58:	20000178 	.word	0x20000178
 8000c5c:	2000017c 	.word	0x2000017c
 8000c60:	20000184 	.word	0x20000184
 8000c64:	20000188 	.word	0x20000188
 8000c68:	2000016c 	.word	0x2000016c
 8000c6c:	2000002c 	.word	0x2000002c
 8000c70:	20000194 	.word	0x20000194
 8000c74:	20000088 	.word	0x20000088
 8000c78:	20000175 	.word	0x20000175
 8000c7c:	00001b57 	.word	0x00001b57

08000c80 <HAL_TIM_PWM_PulseFinishedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim) {
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b082      	sub	sp, #8
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM3 && htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2) {
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	4a06      	ldr	r2, [pc, #24]	@ (8000ca8 <HAL_TIM_PWM_PulseFinishedCallback+0x28>)
 8000c8e:	4293      	cmp	r3, r2
 8000c90:	d106      	bne.n	8000ca0 <HAL_TIM_PWM_PulseFinishedCallback+0x20>
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	7f1b      	ldrb	r3, [r3, #28]
 8000c96:	2b02      	cmp	r3, #2
 8000c98:	d102      	bne.n	8000ca0 <HAL_TIM_PWM_PulseFinishedCallback+0x20>
        led_update_sequence(1);
 8000c9a:	2001      	movs	r0, #1
 8000c9c:	f7ff fd28 	bl	80006f0 <led_update_sequence>
    }
}
 8000ca0:	46c0      	nop			@ (mov r8, r8)
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	b002      	add	sp, #8
 8000ca6:	bd80      	pop	{r7, pc}
 8000ca8:	40000400 	.word	0x40000400

08000cac <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:

void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim) {
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b082      	sub	sp, #8
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM3 && htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2) {
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	4a06      	ldr	r2, [pc, #24]	@ (8000cd4 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x28>)
 8000cba:	4293      	cmp	r3, r2
 8000cbc:	d106      	bne.n	8000ccc <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x20>
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	7f1b      	ldrb	r3, [r3, #28]
 8000cc2:	2b02      	cmp	r3, #2
 8000cc4:	d102      	bne.n	8000ccc <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x20>
        led_update_sequence(0);
 8000cc6:	2000      	movs	r0, #0
 8000cc8:	f7ff fd12 	bl	80006f0 <led_update_sequence>
    }
}
 8000ccc:	46c0      	nop			@ (mov r8, r8)
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	b002      	add	sp, #8
 8000cd2:	bd80      	pop	{r7, pc}
 8000cd4:	40000400 	.word	0x40000400

08000cd8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b082      	sub	sp, #8
 8000cdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cde:	4b0f      	ldr	r3, [pc, #60]	@ (8000d1c <HAL_MspInit+0x44>)
 8000ce0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000ce2:	4b0e      	ldr	r3, [pc, #56]	@ (8000d1c <HAL_MspInit+0x44>)
 8000ce4:	2101      	movs	r1, #1
 8000ce6:	430a      	orrs	r2, r1
 8000ce8:	641a      	str	r2, [r3, #64]	@ 0x40
 8000cea:	4b0c      	ldr	r3, [pc, #48]	@ (8000d1c <HAL_MspInit+0x44>)
 8000cec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cee:	2201      	movs	r2, #1
 8000cf0:	4013      	ands	r3, r2
 8000cf2:	607b      	str	r3, [r7, #4]
 8000cf4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cf6:	4b09      	ldr	r3, [pc, #36]	@ (8000d1c <HAL_MspInit+0x44>)
 8000cf8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000cfa:	4b08      	ldr	r3, [pc, #32]	@ (8000d1c <HAL_MspInit+0x44>)
 8000cfc:	2180      	movs	r1, #128	@ 0x80
 8000cfe:	0549      	lsls	r1, r1, #21
 8000d00:	430a      	orrs	r2, r1
 8000d02:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000d04:	4b05      	ldr	r3, [pc, #20]	@ (8000d1c <HAL_MspInit+0x44>)
 8000d06:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000d08:	2380      	movs	r3, #128	@ 0x80
 8000d0a:	055b      	lsls	r3, r3, #21
 8000d0c:	4013      	ands	r3, r2
 8000d0e:	603b      	str	r3, [r7, #0]
 8000d10:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d12:	46c0      	nop			@ (mov r8, r8)
 8000d14:	46bd      	mov	sp, r7
 8000d16:	b002      	add	sp, #8
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	46c0      	nop			@ (mov r8, r8)
 8000d1c:	40021000 	.word	0x40021000

08000d20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d24:	46c0      	nop			@ (mov r8, r8)
 8000d26:	e7fd      	b.n	8000d24 <NMI_Handler+0x4>

08000d28 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d2c:	46c0      	nop			@ (mov r8, r8)
 8000d2e:	e7fd      	b.n	8000d2c <HardFault_Handler+0x4>

08000d30 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000d34:	46c0      	nop			@ (mov r8, r8)
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}

08000d3a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d3a:	b580      	push	{r7, lr}
 8000d3c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d3e:	46c0      	nop			@ (mov r8, r8)
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bd80      	pop	{r7, pc}

08000d44 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
  // Toggle PA8 mit 500 Hz (jeden 2. Interrupt, da SysTick bei 1 kHz läuft)
  systick_counter++;
 8000d48:	4b0b      	ldr	r3, [pc, #44]	@ (8000d78 <SysTick_Handler+0x34>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	1c5a      	adds	r2, r3, #1
 8000d4e:	4b0a      	ldr	r3, [pc, #40]	@ (8000d78 <SysTick_Handler+0x34>)
 8000d50:	601a      	str	r2, [r3, #0]
  if (systick_counter % 2 == 0) {
 8000d52:	4b09      	ldr	r3, [pc, #36]	@ (8000d78 <SysTick_Handler+0x34>)
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	2201      	movs	r2, #1
 8000d58:	4013      	ands	r3, r2
 8000d5a:	d107      	bne.n	8000d6c <SysTick_Handler+0x28>
    HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_8);
 8000d5c:	2380      	movs	r3, #128	@ 0x80
 8000d5e:	005a      	lsls	r2, r3, #1
 8000d60:	23a0      	movs	r3, #160	@ 0xa0
 8000d62:	05db      	lsls	r3, r3, #23
 8000d64:	0011      	movs	r1, r2
 8000d66:	0018      	movs	r0, r3
 8000d68:	f000 ffab 	bl	8001cc2 <HAL_GPIO_TogglePin>
  }
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d6c:	f000 f9ca 	bl	8001104 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d70:	46c0      	nop			@ (mov r8, r8)
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	46c0      	nop			@ (mov r8, r8)
 8000d78:	20000190 	.word	0x20000190

08000d7c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */
  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch2);
 8000d80:	4b03      	ldr	r3, [pc, #12]	@ (8000d90 <DMA1_Channel1_IRQHandler+0x14>)
 8000d82:	0018      	movs	r0, r3
 8000d84:	f000 fcce 	bl	8001724 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000d88:	46c0      	nop			@ (mov r8, r8)
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	46c0      	nop			@ (mov r8, r8)
 8000d90:	2000002c 	.word	0x2000002c

08000d94 <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and 1 interrupts (für PA1).
  */
void EXTI0_1_IRQHandler(void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b082      	sub	sp, #8
 8000d98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */
  uint32_t current_time = HAL_GetTick();
 8000d9a:	f000 f9c5 	bl	8001128 <HAL_GetTick>
 8000d9e:	0003      	movs	r3, r0
 8000da0:	607b      	str	r3, [r7, #4]
  if (current_time - last_interrupt_time >= DEBOUNCE_TIME_MS) {
 8000da2:	4b0d      	ldr	r3, [pc, #52]	@ (8000dd8 <EXTI0_1_IRQHandler+0x44>)
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	687a      	ldr	r2, [r7, #4]
 8000da8:	1ad2      	subs	r2, r2, r3
 8000daa:	23fa      	movs	r3, #250	@ 0xfa
 8000dac:	009b      	lsls	r3, r3, #2
 8000dae:	429a      	cmp	r2, r3
 8000db0:	d30a      	bcc.n	8000dc8 <EXTI0_1_IRQHandler+0x34>
    // Debug: Toggeln von PA11, um zu überprüfen, ob der Interrupt ausgelöst wird
    HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_11);
 8000db2:	2380      	movs	r3, #128	@ 0x80
 8000db4:	011a      	lsls	r2, r3, #4
 8000db6:	23a0      	movs	r3, #160	@ 0xa0
 8000db8:	05db      	lsls	r3, r3, #23
 8000dba:	0011      	movs	r1, r2
 8000dbc:	0018      	movs	r0, r3
 8000dbe:	f000 ff80 	bl	8001cc2 <HAL_GPIO_TogglePin>
    last_interrupt_time = current_time;
 8000dc2:	4b05      	ldr	r3, [pc, #20]	@ (8000dd8 <EXTI0_1_IRQHandler+0x44>)
 8000dc4:	687a      	ldr	r2, [r7, #4]
 8000dc6:	601a      	str	r2, [r3, #0]
  }
  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8000dc8:	2002      	movs	r0, #2
 8000dca:	f000 ff95 	bl	8001cf8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 8000dce:	46c0      	nop			@ (mov r8, r8)
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	b002      	add	sp, #8
 8000dd4:	bd80      	pop	{r7, pc}
 8000dd6:	46c0      	nop			@ (mov r8, r8)
 8000dd8:	2000018c 	.word	0x2000018c

08000ddc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000de0:	46c0      	nop			@ (mov r8, r8)
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}
	...

08000de8 <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b08a      	sub	sp, #40	@ 0x28
 8000dec:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dee:	231c      	movs	r3, #28
 8000df0:	18fb      	adds	r3, r7, r3
 8000df2:	0018      	movs	r0, r3
 8000df4:	230c      	movs	r3, #12
 8000df6:	001a      	movs	r2, r3
 8000df8:	2100      	movs	r1, #0
 8000dfa:	f002 fd03 	bl	8003804 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000dfe:	003b      	movs	r3, r7
 8000e00:	0018      	movs	r0, r3
 8000e02:	231c      	movs	r3, #28
 8000e04:	001a      	movs	r2, r3
 8000e06:	2100      	movs	r1, #0
 8000e08:	f002 fcfc 	bl	8003804 <memset>

  htim3.Instance = TIM3;
 8000e0c:	4b24      	ldr	r3, [pc, #144]	@ (8000ea0 <MX_TIM3_Init+0xb8>)
 8000e0e:	4a25      	ldr	r2, [pc, #148]	@ (8000ea4 <MX_TIM3_Init+0xbc>)
 8000e10:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000e12:	4b23      	ldr	r3, [pc, #140]	@ (8000ea0 <MX_TIM3_Init+0xb8>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e18:	4b21      	ldr	r3, [pc, #132]	@ (8000ea0 <MX_TIM3_Init+0xb8>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 79;
 8000e1e:	4b20      	ldr	r3, [pc, #128]	@ (8000ea0 <MX_TIM3_Init+0xb8>)
 8000e20:	224f      	movs	r2, #79	@ 0x4f
 8000e22:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e24:	4b1e      	ldr	r3, [pc, #120]	@ (8000ea0 <MX_TIM3_Init+0xb8>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000e2a:	4b1d      	ldr	r3, [pc, #116]	@ (8000ea0 <MX_TIM3_Init+0xb8>)
 8000e2c:	2280      	movs	r2, #128	@ 0x80
 8000e2e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000e30:	4b1b      	ldr	r3, [pc, #108]	@ (8000ea0 <MX_TIM3_Init+0xb8>)
 8000e32:	0018      	movs	r0, r3
 8000e34:	f001 fc8c 	bl	8002750 <HAL_TIM_PWM_Init>
 8000e38:	1e03      	subs	r3, r0, #0
 8000e3a:	d001      	beq.n	8000e40 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8000e3c:	f7ff fe06 	bl	8000a4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e40:	211c      	movs	r1, #28
 8000e42:	187b      	adds	r3, r7, r1
 8000e44:	2200      	movs	r2, #0
 8000e46:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e48:	187b      	adds	r3, r7, r1
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000e4e:	187a      	adds	r2, r7, r1
 8000e50:	4b13      	ldr	r3, [pc, #76]	@ (8000ea0 <MX_TIM3_Init+0xb8>)
 8000e52:	0011      	movs	r1, r2
 8000e54:	0018      	movs	r0, r3
 8000e56:	f002 fc6d 	bl	8003734 <HAL_TIMEx_MasterConfigSynchronization>
 8000e5a:	1e03      	subs	r3, r0, #0
 8000e5c:	d001      	beq.n	8000e62 <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 8000e5e:	f7ff fdf5 	bl	8000a4c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e62:	003b      	movs	r3, r7
 8000e64:	2260      	movs	r2, #96	@ 0x60
 8000e66:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000e68:	003b      	movs	r3, r7
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e6e:	003b      	movs	r3, r7
 8000e70:	2200      	movs	r2, #0
 8000e72:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e74:	003b      	movs	r3, r7
 8000e76:	2200      	movs	r2, #0
 8000e78:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000e7a:	0039      	movs	r1, r7
 8000e7c:	4b08      	ldr	r3, [pc, #32]	@ (8000ea0 <MX_TIM3_Init+0xb8>)
 8000e7e:	2204      	movs	r2, #4
 8000e80:	0018      	movs	r0, r3
 8000e82:	f001 ff37 	bl	8002cf4 <HAL_TIM_PWM_ConfigChannel>
 8000e86:	1e03      	subs	r3, r0, #0
 8000e88:	d001      	beq.n	8000e8e <MX_TIM3_Init+0xa6>
  {
    Error_Handler();
 8000e8a:	f7ff fddf 	bl	8000a4c <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim3);
 8000e8e:	4b04      	ldr	r3, [pc, #16]	@ (8000ea0 <MX_TIM3_Init+0xb8>)
 8000e90:	0018      	movs	r0, r3
 8000e92:	f000 f827 	bl	8000ee4 <HAL_TIM_MspPostInit>
}
 8000e96:	46c0      	nop			@ (mov r8, r8)
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	b00a      	add	sp, #40	@ 0x28
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	46c0      	nop			@ (mov r8, r8)
 8000ea0:	20000194 	.word	0x20000194
 8000ea4:	40000400 	.word	0x40000400

08000ea8 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b084      	sub	sp, #16
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
  if(tim_pwmHandle->Instance==TIM3)
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	4a09      	ldr	r2, [pc, #36]	@ (8000edc <HAL_TIM_PWM_MspInit+0x34>)
 8000eb6:	4293      	cmp	r3, r2
 8000eb8:	d10b      	bne.n	8000ed2 <HAL_TIM_PWM_MspInit+0x2a>
  {
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000eba:	4b09      	ldr	r3, [pc, #36]	@ (8000ee0 <HAL_TIM_PWM_MspInit+0x38>)
 8000ebc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000ebe:	4b08      	ldr	r3, [pc, #32]	@ (8000ee0 <HAL_TIM_PWM_MspInit+0x38>)
 8000ec0:	2102      	movs	r1, #2
 8000ec2:	430a      	orrs	r2, r1
 8000ec4:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000ec6:	4b06      	ldr	r3, [pc, #24]	@ (8000ee0 <HAL_TIM_PWM_MspInit+0x38>)
 8000ec8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000eca:	2202      	movs	r2, #2
 8000ecc:	4013      	ands	r3, r2
 8000ece:	60fb      	str	r3, [r7, #12]
 8000ed0:	68fb      	ldr	r3, [r7, #12]
  }
}
 8000ed2:	46c0      	nop			@ (mov r8, r8)
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	b004      	add	sp, #16
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	46c0      	nop			@ (mov r8, r8)
 8000edc:	40000400 	.word	0x40000400
 8000ee0:	40021000 	.word	0x40021000

08000ee4 <HAL_TIM_MspPostInit>:
  * @brief Configures the GPIO pins for TIM3_CH2 (PA7) and debug pins (PA8, PA11)
  * @param timHandle: TIM handle pointer
  * @retval None
  */
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000ee4:	b590      	push	{r4, r7, lr}
 8000ee6:	b089      	sub	sp, #36	@ 0x24
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eec:	240c      	movs	r4, #12
 8000eee:	193b      	adds	r3, r7, r4
 8000ef0:	0018      	movs	r0, r3
 8000ef2:	2314      	movs	r3, #20
 8000ef4:	001a      	movs	r2, r3
 8000ef6:	2100      	movs	r1, #0
 8000ef8:	f002 fc84 	bl	8003804 <memset>
  if(timHandle->Instance==TIM3)
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	4a34      	ldr	r2, [pc, #208]	@ (8000fd4 <HAL_TIM_MspPostInit+0xf0>)
 8000f02:	4293      	cmp	r3, r2
 8000f04:	d162      	bne.n	8000fcc <HAL_TIM_MspPostInit+0xe8>
  {
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f06:	4b34      	ldr	r3, [pc, #208]	@ (8000fd8 <HAL_TIM_MspPostInit+0xf4>)
 8000f08:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000f0a:	4b33      	ldr	r3, [pc, #204]	@ (8000fd8 <HAL_TIM_MspPostInit+0xf4>)
 8000f0c:	2101      	movs	r1, #1
 8000f0e:	430a      	orrs	r2, r1
 8000f10:	635a      	str	r2, [r3, #52]	@ 0x34
 8000f12:	4b31      	ldr	r3, [pc, #196]	@ (8000fd8 <HAL_TIM_MspPostInit+0xf4>)
 8000f14:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000f16:	2201      	movs	r2, #1
 8000f18:	4013      	ands	r3, r2
 8000f1a:	60bb      	str	r3, [r7, #8]
 8000f1c:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000f1e:	193b      	adds	r3, r7, r4
 8000f20:	2280      	movs	r2, #128	@ 0x80
 8000f22:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f24:	193b      	adds	r3, r7, r4
 8000f26:	2202      	movs	r2, #2
 8000f28:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f2a:	193b      	adds	r3, r7, r4
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH; // Hohe Geschwindigkeit für WS2812
 8000f30:	193b      	adds	r3, r7, r4
 8000f32:	2202      	movs	r2, #2
 8000f34:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8000f36:	193b      	adds	r3, r7, r4
 8000f38:	2201      	movs	r2, #1
 8000f3a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f3c:	193a      	adds	r2, r7, r4
 8000f3e:	23a0      	movs	r3, #160	@ 0xa0
 8000f40:	05db      	lsls	r3, r3, #23
 8000f42:	0011      	movs	r1, r2
 8000f44:	0018      	movs	r0, r3
 8000f46:	f000 fd3b 	bl	80019c0 <HAL_GPIO_Init>

    /**Debug Pin PA8 Configuration (SysTick-Debug)
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000f4a:	0021      	movs	r1, r4
 8000f4c:	187b      	adds	r3, r7, r1
 8000f4e:	2280      	movs	r2, #128	@ 0x80
 8000f50:	0052      	lsls	r2, r2, #1
 8000f52:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f54:	000c      	movs	r4, r1
 8000f56:	193b      	adds	r3, r7, r4
 8000f58:	2201      	movs	r2, #1
 8000f5a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f5c:	193b      	adds	r3, r7, r4
 8000f5e:	2200      	movs	r2, #0
 8000f60:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f62:	193b      	adds	r3, r7, r4
 8000f64:	2200      	movs	r2, #0
 8000f66:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = 0;
 8000f68:	193b      	adds	r3, r7, r4
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f6e:	193a      	adds	r2, r7, r4
 8000f70:	23a0      	movs	r3, #160	@ 0xa0
 8000f72:	05db      	lsls	r3, r3, #23
 8000f74:	0011      	movs	r1, r2
 8000f76:	0018      	movs	r0, r3
 8000f78:	f000 fd22 	bl	80019c0 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET); // Initial Low
 8000f7c:	2380      	movs	r3, #128	@ 0x80
 8000f7e:	0059      	lsls	r1, r3, #1
 8000f80:	23a0      	movs	r3, #160	@ 0xa0
 8000f82:	05db      	lsls	r3, r3, #23
 8000f84:	2200      	movs	r2, #0
 8000f86:	0018      	movs	r0, r3
 8000f88:	f000 fe7e 	bl	8001c88 <HAL_GPIO_WritePin>

    /**Debug Pin PA11 Configuration (DMA-Debug)
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000f8c:	193b      	adds	r3, r7, r4
 8000f8e:	2280      	movs	r2, #128	@ 0x80
 8000f90:	0112      	lsls	r2, r2, #4
 8000f92:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f94:	0021      	movs	r1, r4
 8000f96:	187b      	adds	r3, r7, r1
 8000f98:	2201      	movs	r2, #1
 8000f9a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f9c:	187b      	adds	r3, r7, r1
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fa2:	187b      	adds	r3, r7, r1
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = 0;
 8000fa8:	187b      	adds	r3, r7, r1
 8000faa:	2200      	movs	r2, #0
 8000fac:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fae:	187a      	adds	r2, r7, r1
 8000fb0:	23a0      	movs	r3, #160	@ 0xa0
 8000fb2:	05db      	lsls	r3, r3, #23
 8000fb4:	0011      	movs	r1, r2
 8000fb6:	0018      	movs	r0, r3
 8000fb8:	f000 fd02 	bl	80019c0 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET); // Initial Low
 8000fbc:	2380      	movs	r3, #128	@ 0x80
 8000fbe:	0119      	lsls	r1, r3, #4
 8000fc0:	23a0      	movs	r3, #160	@ 0xa0
 8000fc2:	05db      	lsls	r3, r3, #23
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	0018      	movs	r0, r3
 8000fc8:	f000 fe5e 	bl	8001c88 <HAL_GPIO_WritePin>
  }
}
 8000fcc:	46c0      	nop			@ (mov r8, r8)
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	b009      	add	sp, #36	@ 0x24
 8000fd2:	bd90      	pop	{r4, r7, pc}
 8000fd4:	40000400 	.word	0x40000400
 8000fd8:	40021000 	.word	0x40021000

08000fdc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000fdc:	480d      	ldr	r0, [pc, #52]	@ (8001014 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000fde:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000fe0:	f7ff fefc 	bl	8000ddc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000fe4:	480c      	ldr	r0, [pc, #48]	@ (8001018 <LoopForever+0x6>)
  ldr r1, =_edata
 8000fe6:	490d      	ldr	r1, [pc, #52]	@ (800101c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000fe8:	4a0d      	ldr	r2, [pc, #52]	@ (8001020 <LoopForever+0xe>)
  movs r3, #0
 8000fea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fec:	e002      	b.n	8000ff4 <LoopCopyDataInit>

08000fee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ff0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ff2:	3304      	adds	r3, #4

08000ff4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ff4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ff6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ff8:	d3f9      	bcc.n	8000fee <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ffa:	4a0a      	ldr	r2, [pc, #40]	@ (8001024 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ffc:	4c0a      	ldr	r4, [pc, #40]	@ (8001028 <LoopForever+0x16>)
  movs r3, #0
 8000ffe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001000:	e001      	b.n	8001006 <LoopFillZerobss>

08001002 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001002:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001004:	3204      	adds	r2, #4

08001006 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001006:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001008:	d3fb      	bcc.n	8001002 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800100a:	f002 fc03 	bl	8003814 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800100e:	f7ff fc91 	bl	8000934 <main>

08001012 <LoopForever>:

LoopForever:
  b LoopForever
 8001012:	e7fe      	b.n	8001012 <LoopForever>
  ldr   r0, =_estack
 8001014:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8001018:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800101c:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001020:	08003910 	.word	0x08003910
  ldr r2, =_sbss
 8001024:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001028:	200001e4 	.word	0x200001e4

0800102c <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800102c:	e7fe      	b.n	800102c <ADC1_IRQHandler>
	...

08001030 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b082      	sub	sp, #8
 8001034:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001036:	1dfb      	adds	r3, r7, #7
 8001038:	2200      	movs	r2, #0
 800103a:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800103c:	4b0b      	ldr	r3, [pc, #44]	@ (800106c <HAL_Init+0x3c>)
 800103e:	681a      	ldr	r2, [r3, #0]
 8001040:	4b0a      	ldr	r3, [pc, #40]	@ (800106c <HAL_Init+0x3c>)
 8001042:	2180      	movs	r1, #128	@ 0x80
 8001044:	0049      	lsls	r1, r1, #1
 8001046:	430a      	orrs	r2, r1
 8001048:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800104a:	2001      	movs	r0, #1
 800104c:	f000 f810 	bl	8001070 <HAL_InitTick>
 8001050:	1e03      	subs	r3, r0, #0
 8001052:	d003      	beq.n	800105c <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8001054:	1dfb      	adds	r3, r7, #7
 8001056:	2201      	movs	r2, #1
 8001058:	701a      	strb	r2, [r3, #0]
 800105a:	e001      	b.n	8001060 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 800105c:	f7ff fe3c 	bl	8000cd8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001060:	1dfb      	adds	r3, r7, #7
 8001062:	781b      	ldrb	r3, [r3, #0]
}
 8001064:	0018      	movs	r0, r3
 8001066:	46bd      	mov	sp, r7
 8001068:	b002      	add	sp, #8
 800106a:	bd80      	pop	{r7, pc}
 800106c:	40022000 	.word	0x40022000

08001070 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001070:	b590      	push	{r4, r7, lr}
 8001072:	b085      	sub	sp, #20
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001078:	230f      	movs	r3, #15
 800107a:	18fb      	adds	r3, r7, r3
 800107c:	2200      	movs	r2, #0
 800107e:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8001080:	4b1d      	ldr	r3, [pc, #116]	@ (80010f8 <HAL_InitTick+0x88>)
 8001082:	781b      	ldrb	r3, [r3, #0]
 8001084:	2b00      	cmp	r3, #0
 8001086:	d02b      	beq.n	80010e0 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8001088:	4b1c      	ldr	r3, [pc, #112]	@ (80010fc <HAL_InitTick+0x8c>)
 800108a:	681c      	ldr	r4, [r3, #0]
 800108c:	4b1a      	ldr	r3, [pc, #104]	@ (80010f8 <HAL_InitTick+0x88>)
 800108e:	781b      	ldrb	r3, [r3, #0]
 8001090:	0019      	movs	r1, r3
 8001092:	23fa      	movs	r3, #250	@ 0xfa
 8001094:	0098      	lsls	r0, r3, #2
 8001096:	f7ff f835 	bl	8000104 <__udivsi3>
 800109a:	0003      	movs	r3, r0
 800109c:	0019      	movs	r1, r3
 800109e:	0020      	movs	r0, r4
 80010a0:	f7ff f830 	bl	8000104 <__udivsi3>
 80010a4:	0003      	movs	r3, r0
 80010a6:	0018      	movs	r0, r3
 80010a8:	f000 f93d 	bl	8001326 <HAL_SYSTICK_Config>
 80010ac:	1e03      	subs	r3, r0, #0
 80010ae:	d112      	bne.n	80010d6 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	2b03      	cmp	r3, #3
 80010b4:	d80a      	bhi.n	80010cc <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010b6:	6879      	ldr	r1, [r7, #4]
 80010b8:	2301      	movs	r3, #1
 80010ba:	425b      	negs	r3, r3
 80010bc:	2200      	movs	r2, #0
 80010be:	0018      	movs	r0, r3
 80010c0:	f000 f90c 	bl	80012dc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80010c4:	4b0e      	ldr	r3, [pc, #56]	@ (8001100 <HAL_InitTick+0x90>)
 80010c6:	687a      	ldr	r2, [r7, #4]
 80010c8:	601a      	str	r2, [r3, #0]
 80010ca:	e00d      	b.n	80010e8 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80010cc:	230f      	movs	r3, #15
 80010ce:	18fb      	adds	r3, r7, r3
 80010d0:	2201      	movs	r2, #1
 80010d2:	701a      	strb	r2, [r3, #0]
 80010d4:	e008      	b.n	80010e8 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80010d6:	230f      	movs	r3, #15
 80010d8:	18fb      	adds	r3, r7, r3
 80010da:	2201      	movs	r2, #1
 80010dc:	701a      	strb	r2, [r3, #0]
 80010de:	e003      	b.n	80010e8 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80010e0:	230f      	movs	r3, #15
 80010e2:	18fb      	adds	r3, r7, r3
 80010e4:	2201      	movs	r2, #1
 80010e6:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80010e8:	230f      	movs	r3, #15
 80010ea:	18fb      	adds	r3, r7, r3
 80010ec:	781b      	ldrb	r3, [r3, #0]
}
 80010ee:	0018      	movs	r0, r3
 80010f0:	46bd      	mov	sp, r7
 80010f2:	b005      	add	sp, #20
 80010f4:	bd90      	pop	{r4, r7, pc}
 80010f6:	46c0      	nop			@ (mov r8, r8)
 80010f8:	2000000c 	.word	0x2000000c
 80010fc:	20000004 	.word	0x20000004
 8001100:	20000008 	.word	0x20000008

08001104 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001108:	4b05      	ldr	r3, [pc, #20]	@ (8001120 <HAL_IncTick+0x1c>)
 800110a:	781b      	ldrb	r3, [r3, #0]
 800110c:	001a      	movs	r2, r3
 800110e:	4b05      	ldr	r3, [pc, #20]	@ (8001124 <HAL_IncTick+0x20>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	18d2      	adds	r2, r2, r3
 8001114:	4b03      	ldr	r3, [pc, #12]	@ (8001124 <HAL_IncTick+0x20>)
 8001116:	601a      	str	r2, [r3, #0]
}
 8001118:	46c0      	nop			@ (mov r8, r8)
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}
 800111e:	46c0      	nop			@ (mov r8, r8)
 8001120:	2000000c 	.word	0x2000000c
 8001124:	200001e0 	.word	0x200001e0

08001128 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	af00      	add	r7, sp, #0
  return uwTick;
 800112c:	4b02      	ldr	r3, [pc, #8]	@ (8001138 <HAL_GetTick+0x10>)
 800112e:	681b      	ldr	r3, [r3, #0]
}
 8001130:	0018      	movs	r0, r3
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}
 8001136:	46c0      	nop			@ (mov r8, r8)
 8001138:	200001e0 	.word	0x200001e0

0800113c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b084      	sub	sp, #16
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001144:	f7ff fff0 	bl	8001128 <HAL_GetTick>
 8001148:	0003      	movs	r3, r0
 800114a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	3301      	adds	r3, #1
 8001154:	d005      	beq.n	8001162 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001156:	4b0a      	ldr	r3, [pc, #40]	@ (8001180 <HAL_Delay+0x44>)
 8001158:	781b      	ldrb	r3, [r3, #0]
 800115a:	001a      	movs	r2, r3
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	189b      	adds	r3, r3, r2
 8001160:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001162:	46c0      	nop			@ (mov r8, r8)
 8001164:	f7ff ffe0 	bl	8001128 <HAL_GetTick>
 8001168:	0002      	movs	r2, r0
 800116a:	68bb      	ldr	r3, [r7, #8]
 800116c:	1ad3      	subs	r3, r2, r3
 800116e:	68fa      	ldr	r2, [r7, #12]
 8001170:	429a      	cmp	r2, r3
 8001172:	d8f7      	bhi.n	8001164 <HAL_Delay+0x28>
  {
  }
}
 8001174:	46c0      	nop			@ (mov r8, r8)
 8001176:	46c0      	nop			@ (mov r8, r8)
 8001178:	46bd      	mov	sp, r7
 800117a:	b004      	add	sp, #16
 800117c:	bd80      	pop	{r7, pc}
 800117e:	46c0      	nop			@ (mov r8, r8)
 8001180:	2000000c 	.word	0x2000000c

08001184 <__NVIC_EnableIRQ>:
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b082      	sub	sp, #8
 8001188:	af00      	add	r7, sp, #0
 800118a:	0002      	movs	r2, r0
 800118c:	1dfb      	adds	r3, r7, #7
 800118e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001190:	1dfb      	adds	r3, r7, #7
 8001192:	781b      	ldrb	r3, [r3, #0]
 8001194:	2b7f      	cmp	r3, #127	@ 0x7f
 8001196:	d809      	bhi.n	80011ac <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001198:	1dfb      	adds	r3, r7, #7
 800119a:	781b      	ldrb	r3, [r3, #0]
 800119c:	001a      	movs	r2, r3
 800119e:	231f      	movs	r3, #31
 80011a0:	401a      	ands	r2, r3
 80011a2:	4b04      	ldr	r3, [pc, #16]	@ (80011b4 <__NVIC_EnableIRQ+0x30>)
 80011a4:	2101      	movs	r1, #1
 80011a6:	4091      	lsls	r1, r2
 80011a8:	000a      	movs	r2, r1
 80011aa:	601a      	str	r2, [r3, #0]
}
 80011ac:	46c0      	nop			@ (mov r8, r8)
 80011ae:	46bd      	mov	sp, r7
 80011b0:	b002      	add	sp, #8
 80011b2:	bd80      	pop	{r7, pc}
 80011b4:	e000e100 	.word	0xe000e100

080011b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011b8:	b590      	push	{r4, r7, lr}
 80011ba:	b083      	sub	sp, #12
 80011bc:	af00      	add	r7, sp, #0
 80011be:	0002      	movs	r2, r0
 80011c0:	6039      	str	r1, [r7, #0]
 80011c2:	1dfb      	adds	r3, r7, #7
 80011c4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80011c6:	1dfb      	adds	r3, r7, #7
 80011c8:	781b      	ldrb	r3, [r3, #0]
 80011ca:	2b7f      	cmp	r3, #127	@ 0x7f
 80011cc:	d828      	bhi.n	8001220 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80011ce:	4a2f      	ldr	r2, [pc, #188]	@ (800128c <__NVIC_SetPriority+0xd4>)
 80011d0:	1dfb      	adds	r3, r7, #7
 80011d2:	781b      	ldrb	r3, [r3, #0]
 80011d4:	b25b      	sxtb	r3, r3
 80011d6:	089b      	lsrs	r3, r3, #2
 80011d8:	33c0      	adds	r3, #192	@ 0xc0
 80011da:	009b      	lsls	r3, r3, #2
 80011dc:	589b      	ldr	r3, [r3, r2]
 80011de:	1dfa      	adds	r2, r7, #7
 80011e0:	7812      	ldrb	r2, [r2, #0]
 80011e2:	0011      	movs	r1, r2
 80011e4:	2203      	movs	r2, #3
 80011e6:	400a      	ands	r2, r1
 80011e8:	00d2      	lsls	r2, r2, #3
 80011ea:	21ff      	movs	r1, #255	@ 0xff
 80011ec:	4091      	lsls	r1, r2
 80011ee:	000a      	movs	r2, r1
 80011f0:	43d2      	mvns	r2, r2
 80011f2:	401a      	ands	r2, r3
 80011f4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	019b      	lsls	r3, r3, #6
 80011fa:	22ff      	movs	r2, #255	@ 0xff
 80011fc:	401a      	ands	r2, r3
 80011fe:	1dfb      	adds	r3, r7, #7
 8001200:	781b      	ldrb	r3, [r3, #0]
 8001202:	0018      	movs	r0, r3
 8001204:	2303      	movs	r3, #3
 8001206:	4003      	ands	r3, r0
 8001208:	00db      	lsls	r3, r3, #3
 800120a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800120c:	481f      	ldr	r0, [pc, #124]	@ (800128c <__NVIC_SetPriority+0xd4>)
 800120e:	1dfb      	adds	r3, r7, #7
 8001210:	781b      	ldrb	r3, [r3, #0]
 8001212:	b25b      	sxtb	r3, r3
 8001214:	089b      	lsrs	r3, r3, #2
 8001216:	430a      	orrs	r2, r1
 8001218:	33c0      	adds	r3, #192	@ 0xc0
 800121a:	009b      	lsls	r3, r3, #2
 800121c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800121e:	e031      	b.n	8001284 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001220:	4a1b      	ldr	r2, [pc, #108]	@ (8001290 <__NVIC_SetPriority+0xd8>)
 8001222:	1dfb      	adds	r3, r7, #7
 8001224:	781b      	ldrb	r3, [r3, #0]
 8001226:	0019      	movs	r1, r3
 8001228:	230f      	movs	r3, #15
 800122a:	400b      	ands	r3, r1
 800122c:	3b08      	subs	r3, #8
 800122e:	089b      	lsrs	r3, r3, #2
 8001230:	3306      	adds	r3, #6
 8001232:	009b      	lsls	r3, r3, #2
 8001234:	18d3      	adds	r3, r2, r3
 8001236:	3304      	adds	r3, #4
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	1dfa      	adds	r2, r7, #7
 800123c:	7812      	ldrb	r2, [r2, #0]
 800123e:	0011      	movs	r1, r2
 8001240:	2203      	movs	r2, #3
 8001242:	400a      	ands	r2, r1
 8001244:	00d2      	lsls	r2, r2, #3
 8001246:	21ff      	movs	r1, #255	@ 0xff
 8001248:	4091      	lsls	r1, r2
 800124a:	000a      	movs	r2, r1
 800124c:	43d2      	mvns	r2, r2
 800124e:	401a      	ands	r2, r3
 8001250:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	019b      	lsls	r3, r3, #6
 8001256:	22ff      	movs	r2, #255	@ 0xff
 8001258:	401a      	ands	r2, r3
 800125a:	1dfb      	adds	r3, r7, #7
 800125c:	781b      	ldrb	r3, [r3, #0]
 800125e:	0018      	movs	r0, r3
 8001260:	2303      	movs	r3, #3
 8001262:	4003      	ands	r3, r0
 8001264:	00db      	lsls	r3, r3, #3
 8001266:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001268:	4809      	ldr	r0, [pc, #36]	@ (8001290 <__NVIC_SetPriority+0xd8>)
 800126a:	1dfb      	adds	r3, r7, #7
 800126c:	781b      	ldrb	r3, [r3, #0]
 800126e:	001c      	movs	r4, r3
 8001270:	230f      	movs	r3, #15
 8001272:	4023      	ands	r3, r4
 8001274:	3b08      	subs	r3, #8
 8001276:	089b      	lsrs	r3, r3, #2
 8001278:	430a      	orrs	r2, r1
 800127a:	3306      	adds	r3, #6
 800127c:	009b      	lsls	r3, r3, #2
 800127e:	18c3      	adds	r3, r0, r3
 8001280:	3304      	adds	r3, #4
 8001282:	601a      	str	r2, [r3, #0]
}
 8001284:	46c0      	nop			@ (mov r8, r8)
 8001286:	46bd      	mov	sp, r7
 8001288:	b003      	add	sp, #12
 800128a:	bd90      	pop	{r4, r7, pc}
 800128c:	e000e100 	.word	0xe000e100
 8001290:	e000ed00 	.word	0xe000ed00

08001294 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b082      	sub	sp, #8
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	1e5a      	subs	r2, r3, #1
 80012a0:	2380      	movs	r3, #128	@ 0x80
 80012a2:	045b      	lsls	r3, r3, #17
 80012a4:	429a      	cmp	r2, r3
 80012a6:	d301      	bcc.n	80012ac <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012a8:	2301      	movs	r3, #1
 80012aa:	e010      	b.n	80012ce <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012ac:	4b0a      	ldr	r3, [pc, #40]	@ (80012d8 <SysTick_Config+0x44>)
 80012ae:	687a      	ldr	r2, [r7, #4]
 80012b0:	3a01      	subs	r2, #1
 80012b2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012b4:	2301      	movs	r3, #1
 80012b6:	425b      	negs	r3, r3
 80012b8:	2103      	movs	r1, #3
 80012ba:	0018      	movs	r0, r3
 80012bc:	f7ff ff7c 	bl	80011b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012c0:	4b05      	ldr	r3, [pc, #20]	@ (80012d8 <SysTick_Config+0x44>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012c6:	4b04      	ldr	r3, [pc, #16]	@ (80012d8 <SysTick_Config+0x44>)
 80012c8:	2207      	movs	r2, #7
 80012ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012cc:	2300      	movs	r3, #0
}
 80012ce:	0018      	movs	r0, r3
 80012d0:	46bd      	mov	sp, r7
 80012d2:	b002      	add	sp, #8
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	46c0      	nop			@ (mov r8, r8)
 80012d8:	e000e010 	.word	0xe000e010

080012dc <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b084      	sub	sp, #16
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	60b9      	str	r1, [r7, #8]
 80012e4:	607a      	str	r2, [r7, #4]
 80012e6:	210f      	movs	r1, #15
 80012e8:	187b      	adds	r3, r7, r1
 80012ea:	1c02      	adds	r2, r0, #0
 80012ec:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80012ee:	68ba      	ldr	r2, [r7, #8]
 80012f0:	187b      	adds	r3, r7, r1
 80012f2:	781b      	ldrb	r3, [r3, #0]
 80012f4:	b25b      	sxtb	r3, r3
 80012f6:	0011      	movs	r1, r2
 80012f8:	0018      	movs	r0, r3
 80012fa:	f7ff ff5d 	bl	80011b8 <__NVIC_SetPriority>
}
 80012fe:	46c0      	nop			@ (mov r8, r8)
 8001300:	46bd      	mov	sp, r7
 8001302:	b004      	add	sp, #16
 8001304:	bd80      	pop	{r7, pc}

08001306 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001306:	b580      	push	{r7, lr}
 8001308:	b082      	sub	sp, #8
 800130a:	af00      	add	r7, sp, #0
 800130c:	0002      	movs	r2, r0
 800130e:	1dfb      	adds	r3, r7, #7
 8001310:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001312:	1dfb      	adds	r3, r7, #7
 8001314:	781b      	ldrb	r3, [r3, #0]
 8001316:	b25b      	sxtb	r3, r3
 8001318:	0018      	movs	r0, r3
 800131a:	f7ff ff33 	bl	8001184 <__NVIC_EnableIRQ>
}
 800131e:	46c0      	nop			@ (mov r8, r8)
 8001320:	46bd      	mov	sp, r7
 8001322:	b002      	add	sp, #8
 8001324:	bd80      	pop	{r7, pc}

08001326 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001326:	b580      	push	{r7, lr}
 8001328:	b082      	sub	sp, #8
 800132a:	af00      	add	r7, sp, #0
 800132c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	0018      	movs	r0, r3
 8001332:	f7ff ffaf 	bl	8001294 <SysTick_Config>
 8001336:	0003      	movs	r3, r0
}
 8001338:	0018      	movs	r0, r3
 800133a:	46bd      	mov	sp, r7
 800133c:	b002      	add	sp, #8
 800133e:	bd80      	pop	{r7, pc}

08001340 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b082      	sub	sp, #8
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	2b00      	cmp	r3, #0
 800134c:	d101      	bne.n	8001352 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800134e:	2301      	movs	r3, #1
 8001350:	e077      	b.n	8001442 <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	4a3d      	ldr	r2, [pc, #244]	@ (800144c <HAL_DMA_Init+0x10c>)
 8001358:	4694      	mov	ip, r2
 800135a:	4463      	add	r3, ip
 800135c:	2114      	movs	r1, #20
 800135e:	0018      	movs	r0, r3
 8001360:	f7fe fed0 	bl	8000104 <__udivsi3>
 8001364:	0003      	movs	r3, r0
 8001366:	009a      	lsls	r2, r3, #2
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	641a      	str	r2, [r3, #64]	@ 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	2225      	movs	r2, #37	@ 0x25
 8001370:	2102      	movs	r1, #2
 8001372:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	681a      	ldr	r2, [r3, #0]
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	4934      	ldr	r1, [pc, #208]	@ (8001450 <HAL_DMA_Init+0x110>)
 8001380:	400a      	ands	r2, r1
 8001382:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	6819      	ldr	r1, [r3, #0]
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	689a      	ldr	r2, [r3, #8]
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	68db      	ldr	r3, [r3, #12]
 8001392:	431a      	orrs	r2, r3
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	691b      	ldr	r3, [r3, #16]
 8001398:	431a      	orrs	r2, r3
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	695b      	ldr	r3, [r3, #20]
 800139e:	431a      	orrs	r2, r3
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	699b      	ldr	r3, [r3, #24]
 80013a4:	431a      	orrs	r2, r3
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	69db      	ldr	r3, [r3, #28]
 80013aa:	431a      	orrs	r2, r3
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	6a1b      	ldr	r3, [r3, #32]
 80013b0:	431a      	orrs	r2, r3
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	430a      	orrs	r2, r1
 80013b8:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	0018      	movs	r0, r3
 80013be:	f000 faaf 	bl	8001920 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	689a      	ldr	r2, [r3, #8]
 80013c6:	2380      	movs	r3, #128	@ 0x80
 80013c8:	01db      	lsls	r3, r3, #7
 80013ca:	429a      	cmp	r2, r3
 80013cc:	d102      	bne.n	80013d4 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	2200      	movs	r2, #0
 80013d2:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	685a      	ldr	r2, [r3, #4]
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013dc:	213f      	movs	r1, #63	@ 0x3f
 80013de:	400a      	ands	r2, r1
 80013e0:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80013e6:	687a      	ldr	r2, [r7, #4]
 80013e8:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80013ea:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	685b      	ldr	r3, [r3, #4]
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d011      	beq.n	8001418 <HAL_DMA_Init+0xd8>
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	685b      	ldr	r3, [r3, #4]
 80013f8:	2b04      	cmp	r3, #4
 80013fa:	d80d      	bhi.n	8001418 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	0018      	movs	r0, r3
 8001400:	f000 faba 	bl	8001978 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001408:	2200      	movs	r2, #0
 800140a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001410:	687a      	ldr	r2, [r7, #4]
 8001412:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8001414:	605a      	str	r2, [r3, #4]
 8001416:	e008      	b.n	800142a <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	2200      	movs	r2, #0
 800141c:	651a      	str	r2, [r3, #80]	@ 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	2200      	movs	r2, #0
 8001422:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	2200      	movs	r2, #0
 8001428:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	2200      	movs	r2, #0
 800142e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	2225      	movs	r2, #37	@ 0x25
 8001434:	2101      	movs	r1, #1
 8001436:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	2224      	movs	r2, #36	@ 0x24
 800143c:	2100      	movs	r1, #0
 800143e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001440:	2300      	movs	r3, #0
}
 8001442:	0018      	movs	r0, r3
 8001444:	46bd      	mov	sp, r7
 8001446:	b002      	add	sp, #8
 8001448:	bd80      	pop	{r7, pc}
 800144a:	46c0      	nop			@ (mov r8, r8)
 800144c:	bffdfff8 	.word	0xbffdfff8
 8001450:	ffff800f 	.word	0xffff800f

08001454 <HAL_DMA_DeInit>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b082      	sub	sp, #8
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (NULL == hdma)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	2b00      	cmp	r3, #0
 8001460:	d101      	bne.n	8001466 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8001462:	2301      	movs	r3, #1
 8001464:	e066      	b.n	8001534 <HAL_DMA_DeInit+0xe0>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	681a      	ldr	r2, [r3, #0]
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	2101      	movs	r1, #1
 8001472:	438a      	bics	r2, r1
 8001474:	601a      	str	r2, [r3, #0]
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	4a30      	ldr	r2, [pc, #192]	@ (800153c <HAL_DMA_DeInit+0xe8>)
 800147c:	4694      	mov	ip, r2
 800147e:	4463      	add	r3, ip
 8001480:	2114      	movs	r1, #20
 8001482:	0018      	movs	r0, r3
 8001484:	f7fe fe3e 	bl	8000104 <__udivsi3>
 8001488:	0003      	movs	r3, r0
 800148a:	009a      	lsls	r2, r3, #2
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	641a      	str	r2, [r3, #64]	@ 0x40
#endif /* DMA2 */

  /* Reset DMA Channel control register */
  hdma->Instance->CCR = 0U;
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	2200      	movs	r2, #0
 8001496:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8001498:	4b29      	ldr	r3, [pc, #164]	@ (8001540 <HAL_DMA_DeInit+0xec>)
 800149a:	6859      	ldr	r1, [r3, #4]
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014a0:	221c      	movs	r2, #28
 80014a2:	4013      	ands	r3, r2
 80014a4:	2201      	movs	r2, #1
 80014a6:	409a      	lsls	r2, r3
 80014a8:	4b25      	ldr	r3, [pc, #148]	@ (8001540 <HAL_DMA_DeInit+0xec>)
 80014aa:	430a      	orrs	r2, r1
 80014ac:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */

  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	0018      	movs	r0, r3
 80014b2:	f000 fa35 	bl	8001920 <DMA_CalcDMAMUXChannelBaseAndMask>

  /* Reset the DMAMUX channel that corresponds to the DMA channel */
  hdma->DMAmuxChannel->CCR = 0U;
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014ba:	2200      	movs	r2, #0
 80014bc:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80014c2:	687a      	ldr	r2, [r7, #4]
 80014c4:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80014c6:	605a      	str	r2, [r3, #4]

  /* Reset Request generator parameters if any */
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	685b      	ldr	r3, [r3, #4]
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d010      	beq.n	80014f2 <HAL_DMA_DeInit+0x9e>
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	685b      	ldr	r3, [r3, #4]
 80014d4:	2b04      	cmp	r3, #4
 80014d6:	d80c      	bhi.n	80014f2 <HAL_DMA_DeInit+0x9e>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	0018      	movs	r0, r3
 80014dc:	f000 fa4c 	bl	8001978 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80014e4:	2200      	movs	r2, #0
 80014e6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80014ec:	687a      	ldr	r2, [r7, #4]
 80014ee:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 80014f0:	605a      	str	r2, [r3, #4]
  }

  hdma->DMAmuxRequestGen = 0U;
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	2200      	movs	r2, #0
 80014f6:	651a      	str	r2, [r3, #80]	@ 0x50
  hdma->DMAmuxRequestGenStatus = 0U;
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	2200      	movs	r2, #0
 80014fc:	655a      	str	r2, [r3, #84]	@ 0x54
  hdma->DMAmuxRequestGenStatusMask = 0U;
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	2200      	movs	r2, #0
 8001502:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	2200      	movs	r2, #0
 8001508:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma->XferHalfCpltCallback = NULL;
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	2200      	movs	r2, #0
 800150e:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma->XferErrorCallback = NULL;
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	2200      	movs	r2, #0
 8001514:	635a      	str	r2, [r3, #52]	@ 0x34
  hdma->XferAbortCallback = NULL;
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	2200      	movs	r2, #0
 800151a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	2200      	movs	r2, #0
 8001520:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	2225      	movs	r2, #37	@ 0x25
 8001526:	2100      	movs	r1, #0
 8001528:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	2224      	movs	r2, #36	@ 0x24
 800152e:	2100      	movs	r1, #0
 8001530:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001532:	2300      	movs	r3, #0
}
 8001534:	0018      	movs	r0, r3
 8001536:	46bd      	mov	sp, r7
 8001538:	b002      	add	sp, #8
 800153a:	bd80      	pop	{r7, pc}
 800153c:	bffdfff8 	.word	0xbffdfff8
 8001540:	40020000 	.word	0x40020000

08001544 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b086      	sub	sp, #24
 8001548:	af00      	add	r7, sp, #0
 800154a:	60f8      	str	r0, [r7, #12]
 800154c:	60b9      	str	r1, [r7, #8]
 800154e:	607a      	str	r2, [r7, #4]
 8001550:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001552:	2317      	movs	r3, #23
 8001554:	18fb      	adds	r3, r7, r3
 8001556:	2200      	movs	r2, #0
 8001558:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	2224      	movs	r2, #36	@ 0x24
 800155e:	5c9b      	ldrb	r3, [r3, r2]
 8001560:	2b01      	cmp	r3, #1
 8001562:	d101      	bne.n	8001568 <HAL_DMA_Start_IT+0x24>
 8001564:	2302      	movs	r3, #2
 8001566:	e06f      	b.n	8001648 <HAL_DMA_Start_IT+0x104>
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	2224      	movs	r2, #36	@ 0x24
 800156c:	2101      	movs	r1, #1
 800156e:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	2225      	movs	r2, #37	@ 0x25
 8001574:	5c9b      	ldrb	r3, [r3, r2]
 8001576:	b2db      	uxtb	r3, r3
 8001578:	2b01      	cmp	r3, #1
 800157a:	d157      	bne.n	800162c <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	2225      	movs	r2, #37	@ 0x25
 8001580:	2102      	movs	r1, #2
 8001582:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	2200      	movs	r2, #0
 8001588:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	681a      	ldr	r2, [r3, #0]
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	2101      	movs	r1, #1
 8001596:	438a      	bics	r2, r1
 8001598:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	687a      	ldr	r2, [r7, #4]
 800159e:	68b9      	ldr	r1, [r7, #8]
 80015a0:	68f8      	ldr	r0, [r7, #12]
 80015a2:	f000 f97d 	bl	80018a0 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d008      	beq.n	80015c0 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	681a      	ldr	r2, [r3, #0]
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	210e      	movs	r1, #14
 80015ba:	430a      	orrs	r2, r1
 80015bc:	601a      	str	r2, [r3, #0]
 80015be:	e00f      	b.n	80015e0 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	681a      	ldr	r2, [r3, #0]
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	2104      	movs	r1, #4
 80015cc:	438a      	bics	r2, r1
 80015ce:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	681a      	ldr	r2, [r3, #0]
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	210a      	movs	r1, #10
 80015dc:	430a      	orrs	r2, r1
 80015de:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015e4:	681a      	ldr	r2, [r3, #0]
 80015e6:	2380      	movs	r3, #128	@ 0x80
 80015e8:	025b      	lsls	r3, r3, #9
 80015ea:	4013      	ands	r3, r2
 80015ec:	d008      	beq.n	8001600 <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015f2:	681a      	ldr	r2, [r3, #0]
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015f8:	2180      	movs	r1, #128	@ 0x80
 80015fa:	0049      	lsls	r1, r1, #1
 80015fc:	430a      	orrs	r2, r1
 80015fe:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001604:	2b00      	cmp	r3, #0
 8001606:	d008      	beq.n	800161a <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800160c:	681a      	ldr	r2, [r3, #0]
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001612:	2180      	movs	r1, #128	@ 0x80
 8001614:	0049      	lsls	r1, r1, #1
 8001616:	430a      	orrs	r2, r1
 8001618:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	681a      	ldr	r2, [r3, #0]
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	2101      	movs	r1, #1
 8001626:	430a      	orrs	r2, r1
 8001628:	601a      	str	r2, [r3, #0]
 800162a:	e00a      	b.n	8001642 <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	2280      	movs	r2, #128	@ 0x80
 8001630:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	2224      	movs	r2, #36	@ 0x24
 8001636:	2100      	movs	r1, #0
 8001638:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 800163a:	2317      	movs	r3, #23
 800163c:	18fb      	adds	r3, r7, r3
 800163e:	2201      	movs	r2, #1
 8001640:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8001642:	2317      	movs	r3, #23
 8001644:	18fb      	adds	r3, r7, r3
 8001646:	781b      	ldrb	r3, [r3, #0]
}
 8001648:	0018      	movs	r0, r3
 800164a:	46bd      	mov	sp, r7
 800164c:	b006      	add	sp, #24
 800164e:	bd80      	pop	{r7, pc}

08001650 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b084      	sub	sp, #16
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001658:	210f      	movs	r1, #15
 800165a:	187b      	adds	r3, r7, r1
 800165c:	2200      	movs	r2, #0
 800165e:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	2225      	movs	r2, #37	@ 0x25
 8001664:	5c9b      	ldrb	r3, [r3, r2]
 8001666:	b2db      	uxtb	r3, r3
 8001668:	2b02      	cmp	r3, #2
 800166a:	d006      	beq.n	800167a <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	2204      	movs	r2, #4
 8001670:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8001672:	187b      	adds	r3, r7, r1
 8001674:	2201      	movs	r2, #1
 8001676:	701a      	strb	r2, [r3, #0]
 8001678:	e049      	b.n	800170e <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	681a      	ldr	r2, [r3, #0]
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	210e      	movs	r1, #14
 8001686:	438a      	bics	r2, r1
 8001688:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	681a      	ldr	r2, [r3, #0]
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	2101      	movs	r1, #1
 8001696:	438a      	bics	r2, r1
 8001698:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800169e:	681a      	ldr	r2, [r3, #0]
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016a4:	491d      	ldr	r1, [pc, #116]	@ (800171c <HAL_DMA_Abort_IT+0xcc>)
 80016a6:	400a      	ands	r2, r1
 80016a8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 80016aa:	4b1d      	ldr	r3, [pc, #116]	@ (8001720 <HAL_DMA_Abort_IT+0xd0>)
 80016ac:	6859      	ldr	r1, [r3, #4]
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016b2:	221c      	movs	r2, #28
 80016b4:	4013      	ands	r3, r2
 80016b6:	2201      	movs	r2, #1
 80016b8:	409a      	lsls	r2, r3
 80016ba:	4b19      	ldr	r3, [pc, #100]	@ (8001720 <HAL_DMA_Abort_IT+0xd0>)
 80016bc:	430a      	orrs	r2, r1
 80016be:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80016c4:	687a      	ldr	r2, [r7, #4]
 80016c6:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80016c8:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d00c      	beq.n	80016ec <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80016d6:	681a      	ldr	r2, [r3, #0]
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80016dc:	490f      	ldr	r1, [pc, #60]	@ (800171c <HAL_DMA_Abort_IT+0xcc>)
 80016de:	400a      	ands	r2, r1
 80016e0:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80016e6:	687a      	ldr	r2, [r7, #4]
 80016e8:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 80016ea:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	2225      	movs	r2, #37	@ 0x25
 80016f0:	2101      	movs	r1, #1
 80016f2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	2224      	movs	r2, #36	@ 0x24
 80016f8:	2100      	movs	r1, #0
 80016fa:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001700:	2b00      	cmp	r3, #0
 8001702:	d004      	beq.n	800170e <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001708:	687a      	ldr	r2, [r7, #4]
 800170a:	0010      	movs	r0, r2
 800170c:	4798      	blx	r3
    }
  }
  return status;
 800170e:	230f      	movs	r3, #15
 8001710:	18fb      	adds	r3, r7, r3
 8001712:	781b      	ldrb	r3, [r3, #0]
}
 8001714:	0018      	movs	r0, r3
 8001716:	46bd      	mov	sp, r7
 8001718:	b004      	add	sp, #16
 800171a:	bd80      	pop	{r7, pc}
 800171c:	fffffeff 	.word	0xfffffeff
 8001720:	40020000 	.word	0x40020000

08001724 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b084      	sub	sp, #16
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 800172c:	4b55      	ldr	r3, [pc, #340]	@ (8001884 <HAL_DMA_IRQHandler+0x160>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800173e:	221c      	movs	r2, #28
 8001740:	4013      	ands	r3, r2
 8001742:	2204      	movs	r2, #4
 8001744:	409a      	lsls	r2, r3
 8001746:	0013      	movs	r3, r2
 8001748:	68fa      	ldr	r2, [r7, #12]
 800174a:	4013      	ands	r3, r2
 800174c:	d027      	beq.n	800179e <HAL_DMA_IRQHandler+0x7a>
 800174e:	68bb      	ldr	r3, [r7, #8]
 8001750:	2204      	movs	r2, #4
 8001752:	4013      	ands	r3, r2
 8001754:	d023      	beq.n	800179e <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	2220      	movs	r2, #32
 800175e:	4013      	ands	r3, r2
 8001760:	d107      	bne.n	8001772 <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	681a      	ldr	r2, [r3, #0]
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	2104      	movs	r1, #4
 800176e:	438a      	bics	r2, r1
 8001770:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 8001772:	4b44      	ldr	r3, [pc, #272]	@ (8001884 <HAL_DMA_IRQHandler+0x160>)
 8001774:	6859      	ldr	r1, [r3, #4]
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800177a:	221c      	movs	r2, #28
 800177c:	4013      	ands	r3, r2
 800177e:	2204      	movs	r2, #4
 8001780:	409a      	lsls	r2, r3
 8001782:	4b40      	ldr	r3, [pc, #256]	@ (8001884 <HAL_DMA_IRQHandler+0x160>)
 8001784:	430a      	orrs	r2, r1
 8001786:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800178c:	2b00      	cmp	r3, #0
 800178e:	d100      	bne.n	8001792 <HAL_DMA_IRQHandler+0x6e>
 8001790:	e073      	b.n	800187a <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001796:	687a      	ldr	r2, [r7, #4]
 8001798:	0010      	movs	r0, r2
 800179a:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 800179c:	e06d      	b.n	800187a <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017a2:	221c      	movs	r2, #28
 80017a4:	4013      	ands	r3, r2
 80017a6:	2202      	movs	r2, #2
 80017a8:	409a      	lsls	r2, r3
 80017aa:	0013      	movs	r3, r2
 80017ac:	68fa      	ldr	r2, [r7, #12]
 80017ae:	4013      	ands	r3, r2
 80017b0:	d02e      	beq.n	8001810 <HAL_DMA_IRQHandler+0xec>
 80017b2:	68bb      	ldr	r3, [r7, #8]
 80017b4:	2202      	movs	r2, #2
 80017b6:	4013      	ands	r3, r2
 80017b8:	d02a      	beq.n	8001810 <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	2220      	movs	r2, #32
 80017c2:	4013      	ands	r3, r2
 80017c4:	d10b      	bne.n	80017de <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	681a      	ldr	r2, [r3, #0]
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	210a      	movs	r1, #10
 80017d2:	438a      	bics	r2, r1
 80017d4:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	2225      	movs	r2, #37	@ 0x25
 80017da:	2101      	movs	r1, #1
 80017dc:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 80017de:	4b29      	ldr	r3, [pc, #164]	@ (8001884 <HAL_DMA_IRQHandler+0x160>)
 80017e0:	6859      	ldr	r1, [r3, #4]
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017e6:	221c      	movs	r2, #28
 80017e8:	4013      	ands	r3, r2
 80017ea:	2202      	movs	r2, #2
 80017ec:	409a      	lsls	r2, r3
 80017ee:	4b25      	ldr	r3, [pc, #148]	@ (8001884 <HAL_DMA_IRQHandler+0x160>)
 80017f0:	430a      	orrs	r2, r1
 80017f2:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	2224      	movs	r2, #36	@ 0x24
 80017f8:	2100      	movs	r1, #0
 80017fa:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001800:	2b00      	cmp	r3, #0
 8001802:	d03a      	beq.n	800187a <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001808:	687a      	ldr	r2, [r7, #4]
 800180a:	0010      	movs	r0, r2
 800180c:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 800180e:	e034      	b.n	800187a <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001814:	221c      	movs	r2, #28
 8001816:	4013      	ands	r3, r2
 8001818:	2208      	movs	r2, #8
 800181a:	409a      	lsls	r2, r3
 800181c:	0013      	movs	r3, r2
 800181e:	68fa      	ldr	r2, [r7, #12]
 8001820:	4013      	ands	r3, r2
 8001822:	d02b      	beq.n	800187c <HAL_DMA_IRQHandler+0x158>
 8001824:	68bb      	ldr	r3, [r7, #8]
 8001826:	2208      	movs	r2, #8
 8001828:	4013      	ands	r3, r2
 800182a:	d027      	beq.n	800187c <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	681a      	ldr	r2, [r3, #0]
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	210e      	movs	r1, #14
 8001838:	438a      	bics	r2, r1
 800183a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 800183c:	4b11      	ldr	r3, [pc, #68]	@ (8001884 <HAL_DMA_IRQHandler+0x160>)
 800183e:	6859      	ldr	r1, [r3, #4]
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001844:	221c      	movs	r2, #28
 8001846:	4013      	ands	r3, r2
 8001848:	2201      	movs	r2, #1
 800184a:	409a      	lsls	r2, r3
 800184c:	4b0d      	ldr	r3, [pc, #52]	@ (8001884 <HAL_DMA_IRQHandler+0x160>)
 800184e:	430a      	orrs	r2, r1
 8001850:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	2201      	movs	r2, #1
 8001856:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	2225      	movs	r2, #37	@ 0x25
 800185c:	2101      	movs	r1, #1
 800185e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	2224      	movs	r2, #36	@ 0x24
 8001864:	2100      	movs	r1, #0
 8001866:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800186c:	2b00      	cmp	r3, #0
 800186e:	d005      	beq.n	800187c <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001874:	687a      	ldr	r2, [r7, #4]
 8001876:	0010      	movs	r0, r2
 8001878:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800187a:	46c0      	nop			@ (mov r8, r8)
 800187c:	46c0      	nop			@ (mov r8, r8)
}
 800187e:	46bd      	mov	sp, r7
 8001880:	b004      	add	sp, #16
 8001882:	bd80      	pop	{r7, pc}
 8001884:	40020000 	.word	0x40020000

08001888 <HAL_DMA_GetState>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b082      	sub	sp, #8
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	2225      	movs	r2, #37	@ 0x25
 8001894:	5c9b      	ldrb	r3, [r3, r2]
 8001896:	b2db      	uxtb	r3, r3
}
 8001898:	0018      	movs	r0, r3
 800189a:	46bd      	mov	sp, r7
 800189c:	b002      	add	sp, #8
 800189e:	bd80      	pop	{r7, pc}

080018a0 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b084      	sub	sp, #16
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	60f8      	str	r0, [r7, #12]
 80018a8:	60b9      	str	r1, [r7, #8]
 80018aa:	607a      	str	r2, [r7, #4]
 80018ac:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80018b2:	68fa      	ldr	r2, [r7, #12]
 80018b4:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80018b6:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d004      	beq.n	80018ca <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80018c4:	68fa      	ldr	r2, [r7, #12]
 80018c6:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 80018c8:	605a      	str	r2, [r3, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 80018ca:	4b14      	ldr	r3, [pc, #80]	@ (800191c <DMA_SetConfig+0x7c>)
 80018cc:	6859      	ldr	r1, [r3, #4]
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018d2:	221c      	movs	r2, #28
 80018d4:	4013      	ands	r3, r2
 80018d6:	2201      	movs	r2, #1
 80018d8:	409a      	lsls	r2, r3
 80018da:	4b10      	ldr	r3, [pc, #64]	@ (800191c <DMA_SetConfig+0x7c>)
 80018dc:	430a      	orrs	r2, r1
 80018de:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	683a      	ldr	r2, [r7, #0]
 80018e6:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	689b      	ldr	r3, [r3, #8]
 80018ec:	2b10      	cmp	r3, #16
 80018ee:	d108      	bne.n	8001902 <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	687a      	ldr	r2, [r7, #4]
 80018f6:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	68ba      	ldr	r2, [r7, #8]
 80018fe:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001900:	e007      	b.n	8001912 <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	68ba      	ldr	r2, [r7, #8]
 8001908:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	687a      	ldr	r2, [r7, #4]
 8001910:	60da      	str	r2, [r3, #12]
}
 8001912:	46c0      	nop			@ (mov r8, r8)
 8001914:	46bd      	mov	sp, r7
 8001916:	b004      	add	sp, #16
 8001918:	bd80      	pop	{r7, pc}
 800191a:	46c0      	nop			@ (mov r8, r8)
 800191c:	40020000 	.word	0x40020000

08001920 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b084      	sub	sp, #16
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800192c:	089b      	lsrs	r3, r3, #2
 800192e:	4a10      	ldr	r2, [pc, #64]	@ (8001970 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 8001930:	4694      	mov	ip, r2
 8001932:	4463      	add	r3, ip
 8001934:	009b      	lsls	r3, r3, #2
 8001936:	001a      	movs	r2, r3
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	001a      	movs	r2, r3
 8001942:	23ff      	movs	r3, #255	@ 0xff
 8001944:	4013      	ands	r3, r2
 8001946:	3b08      	subs	r3, #8
 8001948:	2114      	movs	r1, #20
 800194a:	0018      	movs	r0, r3
 800194c:	f7fe fbda 	bl	8000104 <__udivsi3>
 8001950:	0003      	movs	r3, r0
 8001952:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	4a07      	ldr	r2, [pc, #28]	@ (8001974 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8001958:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	221f      	movs	r2, #31
 800195e:	4013      	ands	r3, r2
 8001960:	2201      	movs	r2, #1
 8001962:	409a      	lsls	r2, r3
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	64da      	str	r2, [r3, #76]	@ 0x4c
}
 8001968:	46c0      	nop			@ (mov r8, r8)
 800196a:	46bd      	mov	sp, r7
 800196c:	b004      	add	sp, #16
 800196e:	bd80      	pop	{r7, pc}
 8001970:	10008200 	.word	0x10008200
 8001974:	40020880 	.word	0x40020880

08001978 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b084      	sub	sp, #16
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	223f      	movs	r2, #63	@ 0x3f
 8001986:	4013      	ands	r3, r2
 8001988:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	4a0a      	ldr	r2, [pc, #40]	@ (80019b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800198e:	4694      	mov	ip, r2
 8001990:	4463      	add	r3, ip
 8001992:	009b      	lsls	r3, r3, #2
 8001994:	001a      	movs	r2, r3
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	651a      	str	r2, [r3, #80]	@ 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	4a07      	ldr	r2, [pc, #28]	@ (80019bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800199e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	3b01      	subs	r3, #1
 80019a4:	2203      	movs	r2, #3
 80019a6:	4013      	ands	r3, r2
 80019a8:	2201      	movs	r2, #1
 80019aa:	409a      	lsls	r2, r3
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	659a      	str	r2, [r3, #88]	@ 0x58
}
 80019b0:	46c0      	nop			@ (mov r8, r8)
 80019b2:	46bd      	mov	sp, r7
 80019b4:	b004      	add	sp, #16
 80019b6:	bd80      	pop	{r7, pc}
 80019b8:	1000823f 	.word	0x1000823f
 80019bc:	40020940 	.word	0x40020940

080019c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b086      	sub	sp, #24
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
 80019c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80019ca:	2300      	movs	r3, #0
 80019cc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019ce:	e147      	b.n	8001c60 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	2101      	movs	r1, #1
 80019d6:	697a      	ldr	r2, [r7, #20]
 80019d8:	4091      	lsls	r1, r2
 80019da:	000a      	movs	r2, r1
 80019dc:	4013      	ands	r3, r2
 80019de:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d100      	bne.n	80019e8 <HAL_GPIO_Init+0x28>
 80019e6:	e138      	b.n	8001c5a <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	2203      	movs	r2, #3
 80019ee:	4013      	ands	r3, r2
 80019f0:	2b01      	cmp	r3, #1
 80019f2:	d005      	beq.n	8001a00 <HAL_GPIO_Init+0x40>
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	685b      	ldr	r3, [r3, #4]
 80019f8:	2203      	movs	r2, #3
 80019fa:	4013      	ands	r3, r2
 80019fc:	2b02      	cmp	r3, #2
 80019fe:	d130      	bne.n	8001a62 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	689b      	ldr	r3, [r3, #8]
 8001a04:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001a06:	697b      	ldr	r3, [r7, #20]
 8001a08:	005b      	lsls	r3, r3, #1
 8001a0a:	2203      	movs	r2, #3
 8001a0c:	409a      	lsls	r2, r3
 8001a0e:	0013      	movs	r3, r2
 8001a10:	43da      	mvns	r2, r3
 8001a12:	693b      	ldr	r3, [r7, #16]
 8001a14:	4013      	ands	r3, r2
 8001a16:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	68da      	ldr	r2, [r3, #12]
 8001a1c:	697b      	ldr	r3, [r7, #20]
 8001a1e:	005b      	lsls	r3, r3, #1
 8001a20:	409a      	lsls	r2, r3
 8001a22:	0013      	movs	r3, r2
 8001a24:	693a      	ldr	r2, [r7, #16]
 8001a26:	4313      	orrs	r3, r2
 8001a28:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	693a      	ldr	r2, [r7, #16]
 8001a2e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	685b      	ldr	r3, [r3, #4]
 8001a34:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001a36:	2201      	movs	r2, #1
 8001a38:	697b      	ldr	r3, [r7, #20]
 8001a3a:	409a      	lsls	r2, r3
 8001a3c:	0013      	movs	r3, r2
 8001a3e:	43da      	mvns	r2, r3
 8001a40:	693b      	ldr	r3, [r7, #16]
 8001a42:	4013      	ands	r3, r2
 8001a44:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	685b      	ldr	r3, [r3, #4]
 8001a4a:	091b      	lsrs	r3, r3, #4
 8001a4c:	2201      	movs	r2, #1
 8001a4e:	401a      	ands	r2, r3
 8001a50:	697b      	ldr	r3, [r7, #20]
 8001a52:	409a      	lsls	r2, r3
 8001a54:	0013      	movs	r3, r2
 8001a56:	693a      	ldr	r2, [r7, #16]
 8001a58:	4313      	orrs	r3, r2
 8001a5a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	693a      	ldr	r2, [r7, #16]
 8001a60:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	685b      	ldr	r3, [r3, #4]
 8001a66:	2203      	movs	r2, #3
 8001a68:	4013      	ands	r3, r2
 8001a6a:	2b03      	cmp	r3, #3
 8001a6c:	d017      	beq.n	8001a9e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	68db      	ldr	r3, [r3, #12]
 8001a72:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001a74:	697b      	ldr	r3, [r7, #20]
 8001a76:	005b      	lsls	r3, r3, #1
 8001a78:	2203      	movs	r2, #3
 8001a7a:	409a      	lsls	r2, r3
 8001a7c:	0013      	movs	r3, r2
 8001a7e:	43da      	mvns	r2, r3
 8001a80:	693b      	ldr	r3, [r7, #16]
 8001a82:	4013      	ands	r3, r2
 8001a84:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	689a      	ldr	r2, [r3, #8]
 8001a8a:	697b      	ldr	r3, [r7, #20]
 8001a8c:	005b      	lsls	r3, r3, #1
 8001a8e:	409a      	lsls	r2, r3
 8001a90:	0013      	movs	r3, r2
 8001a92:	693a      	ldr	r2, [r7, #16]
 8001a94:	4313      	orrs	r3, r2
 8001a96:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	693a      	ldr	r2, [r7, #16]
 8001a9c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	685b      	ldr	r3, [r3, #4]
 8001aa2:	2203      	movs	r2, #3
 8001aa4:	4013      	ands	r3, r2
 8001aa6:	2b02      	cmp	r3, #2
 8001aa8:	d123      	bne.n	8001af2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001aaa:	697b      	ldr	r3, [r7, #20]
 8001aac:	08da      	lsrs	r2, r3, #3
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	3208      	adds	r2, #8
 8001ab2:	0092      	lsls	r2, r2, #2
 8001ab4:	58d3      	ldr	r3, [r2, r3]
 8001ab6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001ab8:	697b      	ldr	r3, [r7, #20]
 8001aba:	2207      	movs	r2, #7
 8001abc:	4013      	ands	r3, r2
 8001abe:	009b      	lsls	r3, r3, #2
 8001ac0:	220f      	movs	r2, #15
 8001ac2:	409a      	lsls	r2, r3
 8001ac4:	0013      	movs	r3, r2
 8001ac6:	43da      	mvns	r2, r3
 8001ac8:	693b      	ldr	r3, [r7, #16]
 8001aca:	4013      	ands	r3, r2
 8001acc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	691a      	ldr	r2, [r3, #16]
 8001ad2:	697b      	ldr	r3, [r7, #20]
 8001ad4:	2107      	movs	r1, #7
 8001ad6:	400b      	ands	r3, r1
 8001ad8:	009b      	lsls	r3, r3, #2
 8001ada:	409a      	lsls	r2, r3
 8001adc:	0013      	movs	r3, r2
 8001ade:	693a      	ldr	r2, [r7, #16]
 8001ae0:	4313      	orrs	r3, r2
 8001ae2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001ae4:	697b      	ldr	r3, [r7, #20]
 8001ae6:	08da      	lsrs	r2, r3, #3
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	3208      	adds	r2, #8
 8001aec:	0092      	lsls	r2, r2, #2
 8001aee:	6939      	ldr	r1, [r7, #16]
 8001af0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001af8:	697b      	ldr	r3, [r7, #20]
 8001afa:	005b      	lsls	r3, r3, #1
 8001afc:	2203      	movs	r2, #3
 8001afe:	409a      	lsls	r2, r3
 8001b00:	0013      	movs	r3, r2
 8001b02:	43da      	mvns	r2, r3
 8001b04:	693b      	ldr	r3, [r7, #16]
 8001b06:	4013      	ands	r3, r2
 8001b08:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	685b      	ldr	r3, [r3, #4]
 8001b0e:	2203      	movs	r2, #3
 8001b10:	401a      	ands	r2, r3
 8001b12:	697b      	ldr	r3, [r7, #20]
 8001b14:	005b      	lsls	r3, r3, #1
 8001b16:	409a      	lsls	r2, r3
 8001b18:	0013      	movs	r3, r2
 8001b1a:	693a      	ldr	r2, [r7, #16]
 8001b1c:	4313      	orrs	r3, r2
 8001b1e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	693a      	ldr	r2, [r7, #16]
 8001b24:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	685a      	ldr	r2, [r3, #4]
 8001b2a:	23c0      	movs	r3, #192	@ 0xc0
 8001b2c:	029b      	lsls	r3, r3, #10
 8001b2e:	4013      	ands	r3, r2
 8001b30:	d100      	bne.n	8001b34 <HAL_GPIO_Init+0x174>
 8001b32:	e092      	b.n	8001c5a <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8001b34:	4a50      	ldr	r2, [pc, #320]	@ (8001c78 <HAL_GPIO_Init+0x2b8>)
 8001b36:	697b      	ldr	r3, [r7, #20]
 8001b38:	089b      	lsrs	r3, r3, #2
 8001b3a:	3318      	adds	r3, #24
 8001b3c:	009b      	lsls	r3, r3, #2
 8001b3e:	589b      	ldr	r3, [r3, r2]
 8001b40:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8001b42:	697b      	ldr	r3, [r7, #20]
 8001b44:	2203      	movs	r2, #3
 8001b46:	4013      	ands	r3, r2
 8001b48:	00db      	lsls	r3, r3, #3
 8001b4a:	220f      	movs	r2, #15
 8001b4c:	409a      	lsls	r2, r3
 8001b4e:	0013      	movs	r3, r2
 8001b50:	43da      	mvns	r2, r3
 8001b52:	693b      	ldr	r3, [r7, #16]
 8001b54:	4013      	ands	r3, r2
 8001b56:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8001b58:	687a      	ldr	r2, [r7, #4]
 8001b5a:	23a0      	movs	r3, #160	@ 0xa0
 8001b5c:	05db      	lsls	r3, r3, #23
 8001b5e:	429a      	cmp	r2, r3
 8001b60:	d013      	beq.n	8001b8a <HAL_GPIO_Init+0x1ca>
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	4a45      	ldr	r2, [pc, #276]	@ (8001c7c <HAL_GPIO_Init+0x2bc>)
 8001b66:	4293      	cmp	r3, r2
 8001b68:	d00d      	beq.n	8001b86 <HAL_GPIO_Init+0x1c6>
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	4a44      	ldr	r2, [pc, #272]	@ (8001c80 <HAL_GPIO_Init+0x2c0>)
 8001b6e:	4293      	cmp	r3, r2
 8001b70:	d007      	beq.n	8001b82 <HAL_GPIO_Init+0x1c2>
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	4a43      	ldr	r2, [pc, #268]	@ (8001c84 <HAL_GPIO_Init+0x2c4>)
 8001b76:	4293      	cmp	r3, r2
 8001b78:	d101      	bne.n	8001b7e <HAL_GPIO_Init+0x1be>
 8001b7a:	2303      	movs	r3, #3
 8001b7c:	e006      	b.n	8001b8c <HAL_GPIO_Init+0x1cc>
 8001b7e:	2305      	movs	r3, #5
 8001b80:	e004      	b.n	8001b8c <HAL_GPIO_Init+0x1cc>
 8001b82:	2302      	movs	r3, #2
 8001b84:	e002      	b.n	8001b8c <HAL_GPIO_Init+0x1cc>
 8001b86:	2301      	movs	r3, #1
 8001b88:	e000      	b.n	8001b8c <HAL_GPIO_Init+0x1cc>
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	697a      	ldr	r2, [r7, #20]
 8001b8e:	2103      	movs	r1, #3
 8001b90:	400a      	ands	r2, r1
 8001b92:	00d2      	lsls	r2, r2, #3
 8001b94:	4093      	lsls	r3, r2
 8001b96:	693a      	ldr	r2, [r7, #16]
 8001b98:	4313      	orrs	r3, r2
 8001b9a:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8001b9c:	4936      	ldr	r1, [pc, #216]	@ (8001c78 <HAL_GPIO_Init+0x2b8>)
 8001b9e:	697b      	ldr	r3, [r7, #20]
 8001ba0:	089b      	lsrs	r3, r3, #2
 8001ba2:	3318      	adds	r3, #24
 8001ba4:	009b      	lsls	r3, r3, #2
 8001ba6:	693a      	ldr	r2, [r7, #16]
 8001ba8:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001baa:	4b33      	ldr	r3, [pc, #204]	@ (8001c78 <HAL_GPIO_Init+0x2b8>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	43da      	mvns	r2, r3
 8001bb4:	693b      	ldr	r3, [r7, #16]
 8001bb6:	4013      	ands	r3, r2
 8001bb8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	685a      	ldr	r2, [r3, #4]
 8001bbe:	2380      	movs	r3, #128	@ 0x80
 8001bc0:	035b      	lsls	r3, r3, #13
 8001bc2:	4013      	ands	r3, r2
 8001bc4:	d003      	beq.n	8001bce <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8001bc6:	693a      	ldr	r2, [r7, #16]
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	4313      	orrs	r3, r2
 8001bcc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001bce:	4b2a      	ldr	r3, [pc, #168]	@ (8001c78 <HAL_GPIO_Init+0x2b8>)
 8001bd0:	693a      	ldr	r2, [r7, #16]
 8001bd2:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8001bd4:	4b28      	ldr	r3, [pc, #160]	@ (8001c78 <HAL_GPIO_Init+0x2b8>)
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	43da      	mvns	r2, r3
 8001bde:	693b      	ldr	r3, [r7, #16]
 8001be0:	4013      	ands	r3, r2
 8001be2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	685a      	ldr	r2, [r3, #4]
 8001be8:	2380      	movs	r3, #128	@ 0x80
 8001bea:	039b      	lsls	r3, r3, #14
 8001bec:	4013      	ands	r3, r2
 8001bee:	d003      	beq.n	8001bf8 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8001bf0:	693a      	ldr	r2, [r7, #16]
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	4313      	orrs	r3, r2
 8001bf6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001bf8:	4b1f      	ldr	r3, [pc, #124]	@ (8001c78 <HAL_GPIO_Init+0x2b8>)
 8001bfa:	693a      	ldr	r2, [r7, #16]
 8001bfc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001bfe:	4a1e      	ldr	r2, [pc, #120]	@ (8001c78 <HAL_GPIO_Init+0x2b8>)
 8001c00:	2384      	movs	r3, #132	@ 0x84
 8001c02:	58d3      	ldr	r3, [r2, r3]
 8001c04:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	43da      	mvns	r2, r3
 8001c0a:	693b      	ldr	r3, [r7, #16]
 8001c0c:	4013      	ands	r3, r2
 8001c0e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	685a      	ldr	r2, [r3, #4]
 8001c14:	2380      	movs	r3, #128	@ 0x80
 8001c16:	029b      	lsls	r3, r3, #10
 8001c18:	4013      	ands	r3, r2
 8001c1a:	d003      	beq.n	8001c24 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8001c1c:	693a      	ldr	r2, [r7, #16]
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	4313      	orrs	r3, r2
 8001c22:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001c24:	4914      	ldr	r1, [pc, #80]	@ (8001c78 <HAL_GPIO_Init+0x2b8>)
 8001c26:	2284      	movs	r2, #132	@ 0x84
 8001c28:	693b      	ldr	r3, [r7, #16]
 8001c2a:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8001c2c:	4a12      	ldr	r2, [pc, #72]	@ (8001c78 <HAL_GPIO_Init+0x2b8>)
 8001c2e:	2380      	movs	r3, #128	@ 0x80
 8001c30:	58d3      	ldr	r3, [r2, r3]
 8001c32:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	43da      	mvns	r2, r3
 8001c38:	693b      	ldr	r3, [r7, #16]
 8001c3a:	4013      	ands	r3, r2
 8001c3c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	685a      	ldr	r2, [r3, #4]
 8001c42:	2380      	movs	r3, #128	@ 0x80
 8001c44:	025b      	lsls	r3, r3, #9
 8001c46:	4013      	ands	r3, r2
 8001c48:	d003      	beq.n	8001c52 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8001c4a:	693a      	ldr	r2, [r7, #16]
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	4313      	orrs	r3, r2
 8001c50:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001c52:	4909      	ldr	r1, [pc, #36]	@ (8001c78 <HAL_GPIO_Init+0x2b8>)
 8001c54:	2280      	movs	r2, #128	@ 0x80
 8001c56:	693b      	ldr	r3, [r7, #16]
 8001c58:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8001c5a:	697b      	ldr	r3, [r7, #20]
 8001c5c:	3301      	adds	r3, #1
 8001c5e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	681a      	ldr	r2, [r3, #0]
 8001c64:	697b      	ldr	r3, [r7, #20]
 8001c66:	40da      	lsrs	r2, r3
 8001c68:	1e13      	subs	r3, r2, #0
 8001c6a:	d000      	beq.n	8001c6e <HAL_GPIO_Init+0x2ae>
 8001c6c:	e6b0      	b.n	80019d0 <HAL_GPIO_Init+0x10>
  }
}
 8001c6e:	46c0      	nop			@ (mov r8, r8)
 8001c70:	46c0      	nop			@ (mov r8, r8)
 8001c72:	46bd      	mov	sp, r7
 8001c74:	b006      	add	sp, #24
 8001c76:	bd80      	pop	{r7, pc}
 8001c78:	40021800 	.word	0x40021800
 8001c7c:	50000400 	.word	0x50000400
 8001c80:	50000800 	.word	0x50000800
 8001c84:	50000c00 	.word	0x50000c00

08001c88 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b082      	sub	sp, #8
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
 8001c90:	0008      	movs	r0, r1
 8001c92:	0011      	movs	r1, r2
 8001c94:	1cbb      	adds	r3, r7, #2
 8001c96:	1c02      	adds	r2, r0, #0
 8001c98:	801a      	strh	r2, [r3, #0]
 8001c9a:	1c7b      	adds	r3, r7, #1
 8001c9c:	1c0a      	adds	r2, r1, #0
 8001c9e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001ca0:	1c7b      	adds	r3, r7, #1
 8001ca2:	781b      	ldrb	r3, [r3, #0]
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d004      	beq.n	8001cb2 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001ca8:	1cbb      	adds	r3, r7, #2
 8001caa:	881a      	ldrh	r2, [r3, #0]
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001cb0:	e003      	b.n	8001cba <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001cb2:	1cbb      	adds	r3, r7, #2
 8001cb4:	881a      	ldrh	r2, [r3, #0]
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001cba:	46c0      	nop			@ (mov r8, r8)
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	b002      	add	sp, #8
 8001cc0:	bd80      	pop	{r7, pc}

08001cc2 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001cc2:	b580      	push	{r7, lr}
 8001cc4:	b084      	sub	sp, #16
 8001cc6:	af00      	add	r7, sp, #0
 8001cc8:	6078      	str	r0, [r7, #4]
 8001cca:	000a      	movs	r2, r1
 8001ccc:	1cbb      	adds	r3, r7, #2
 8001cce:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	695b      	ldr	r3, [r3, #20]
 8001cd4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001cd6:	1cbb      	adds	r3, r7, #2
 8001cd8:	881b      	ldrh	r3, [r3, #0]
 8001cda:	68fa      	ldr	r2, [r7, #12]
 8001cdc:	4013      	ands	r3, r2
 8001cde:	041a      	lsls	r2, r3, #16
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	43db      	mvns	r3, r3
 8001ce4:	1cb9      	adds	r1, r7, #2
 8001ce6:	8809      	ldrh	r1, [r1, #0]
 8001ce8:	400b      	ands	r3, r1
 8001cea:	431a      	orrs	r2, r3
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	619a      	str	r2, [r3, #24]
}
 8001cf0:	46c0      	nop			@ (mov r8, r8)
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	b004      	add	sp, #16
 8001cf6:	bd80      	pop	{r7, pc}

08001cf8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b082      	sub	sp, #8
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	0002      	movs	r2, r0
 8001d00:	1dbb      	adds	r3, r7, #6
 8001d02:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 8001d04:	4b10      	ldr	r3, [pc, #64]	@ (8001d48 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8001d06:	68db      	ldr	r3, [r3, #12]
 8001d08:	1dba      	adds	r2, r7, #6
 8001d0a:	8812      	ldrh	r2, [r2, #0]
 8001d0c:	4013      	ands	r3, r2
 8001d0e:	d008      	beq.n	8001d22 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8001d10:	4b0d      	ldr	r3, [pc, #52]	@ (8001d48 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8001d12:	1dba      	adds	r2, r7, #6
 8001d14:	8812      	ldrh	r2, [r2, #0]
 8001d16:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8001d18:	1dbb      	adds	r3, r7, #6
 8001d1a:	881b      	ldrh	r3, [r3, #0]
 8001d1c:	0018      	movs	r0, r3
 8001d1e:	f000 f815 	bl	8001d4c <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 8001d22:	4b09      	ldr	r3, [pc, #36]	@ (8001d48 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8001d24:	691b      	ldr	r3, [r3, #16]
 8001d26:	1dba      	adds	r2, r7, #6
 8001d28:	8812      	ldrh	r2, [r2, #0]
 8001d2a:	4013      	ands	r3, r2
 8001d2c:	d008      	beq.n	8001d40 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8001d2e:	4b06      	ldr	r3, [pc, #24]	@ (8001d48 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8001d30:	1dba      	adds	r2, r7, #6
 8001d32:	8812      	ldrh	r2, [r2, #0]
 8001d34:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8001d36:	1dbb      	adds	r3, r7, #6
 8001d38:	881b      	ldrh	r3, [r3, #0]
 8001d3a:	0018      	movs	r0, r3
 8001d3c:	f000 f810 	bl	8001d60 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8001d40:	46c0      	nop			@ (mov r8, r8)
 8001d42:	46bd      	mov	sp, r7
 8001d44:	b002      	add	sp, #8
 8001d46:	bd80      	pop	{r7, pc}
 8001d48:	40021800 	.word	0x40021800

08001d4c <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b082      	sub	sp, #8
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	0002      	movs	r2, r0
 8001d54:	1dbb      	adds	r3, r7, #6
 8001d56:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 8001d58:	46c0      	nop			@ (mov r8, r8)
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	b002      	add	sp, #8
 8001d5e:	bd80      	pop	{r7, pc}

08001d60 <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b082      	sub	sp, #8
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	0002      	movs	r2, r0
 8001d68:	1dbb      	adds	r3, r7, #6
 8001d6a:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 8001d6c:	46c0      	nop			@ (mov r8, r8)
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	b002      	add	sp, #8
 8001d72:	bd80      	pop	{r7, pc}

08001d74 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b084      	sub	sp, #16
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001d7c:	4b19      	ldr	r3, [pc, #100]	@ (8001de4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	4a19      	ldr	r2, [pc, #100]	@ (8001de8 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8001d82:	4013      	ands	r3, r2
 8001d84:	0019      	movs	r1, r3
 8001d86:	4b17      	ldr	r3, [pc, #92]	@ (8001de4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001d88:	687a      	ldr	r2, [r7, #4]
 8001d8a:	430a      	orrs	r2, r1
 8001d8c:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001d8e:	687a      	ldr	r2, [r7, #4]
 8001d90:	2380      	movs	r3, #128	@ 0x80
 8001d92:	009b      	lsls	r3, r3, #2
 8001d94:	429a      	cmp	r2, r3
 8001d96:	d11f      	bne.n	8001dd8 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8001d98:	4b14      	ldr	r3, [pc, #80]	@ (8001dec <HAL_PWREx_ControlVoltageScaling+0x78>)
 8001d9a:	681a      	ldr	r2, [r3, #0]
 8001d9c:	0013      	movs	r3, r2
 8001d9e:	005b      	lsls	r3, r3, #1
 8001da0:	189b      	adds	r3, r3, r2
 8001da2:	005b      	lsls	r3, r3, #1
 8001da4:	4912      	ldr	r1, [pc, #72]	@ (8001df0 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8001da6:	0018      	movs	r0, r3
 8001da8:	f7fe f9ac 	bl	8000104 <__udivsi3>
 8001dac:	0003      	movs	r3, r0
 8001dae:	3301      	adds	r3, #1
 8001db0:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001db2:	e008      	b.n	8001dc6 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d003      	beq.n	8001dc2 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	3b01      	subs	r3, #1
 8001dbe:	60fb      	str	r3, [r7, #12]
 8001dc0:	e001      	b.n	8001dc6 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8001dc2:	2303      	movs	r3, #3
 8001dc4:	e009      	b.n	8001dda <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001dc6:	4b07      	ldr	r3, [pc, #28]	@ (8001de4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001dc8:	695a      	ldr	r2, [r3, #20]
 8001dca:	2380      	movs	r3, #128	@ 0x80
 8001dcc:	00db      	lsls	r3, r3, #3
 8001dce:	401a      	ands	r2, r3
 8001dd0:	2380      	movs	r3, #128	@ 0x80
 8001dd2:	00db      	lsls	r3, r3, #3
 8001dd4:	429a      	cmp	r2, r3
 8001dd6:	d0ed      	beq.n	8001db4 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8001dd8:	2300      	movs	r3, #0
}
 8001dda:	0018      	movs	r0, r3
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	b004      	add	sp, #16
 8001de0:	bd80      	pop	{r7, pc}
 8001de2:	46c0      	nop			@ (mov r8, r8)
 8001de4:	40007000 	.word	0x40007000
 8001de8:	fffff9ff 	.word	0xfffff9ff
 8001dec:	20000004 	.word	0x20000004
 8001df0:	000f4240 	.word	0x000f4240

08001df4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b088      	sub	sp, #32
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d101      	bne.n	8001e06 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e02:	2301      	movs	r3, #1
 8001e04:	e2fe      	b.n	8002404 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	2201      	movs	r2, #1
 8001e0c:	4013      	ands	r3, r2
 8001e0e:	d100      	bne.n	8001e12 <HAL_RCC_OscConfig+0x1e>
 8001e10:	e07c      	b.n	8001f0c <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001e12:	4bc3      	ldr	r3, [pc, #780]	@ (8002120 <HAL_RCC_OscConfig+0x32c>)
 8001e14:	689b      	ldr	r3, [r3, #8]
 8001e16:	2238      	movs	r2, #56	@ 0x38
 8001e18:	4013      	ands	r3, r2
 8001e1a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001e1c:	4bc0      	ldr	r3, [pc, #768]	@ (8002120 <HAL_RCC_OscConfig+0x32c>)
 8001e1e:	68db      	ldr	r3, [r3, #12]
 8001e20:	2203      	movs	r2, #3
 8001e22:	4013      	ands	r3, r2
 8001e24:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8001e26:	69bb      	ldr	r3, [r7, #24]
 8001e28:	2b10      	cmp	r3, #16
 8001e2a:	d102      	bne.n	8001e32 <HAL_RCC_OscConfig+0x3e>
 8001e2c:	697b      	ldr	r3, [r7, #20]
 8001e2e:	2b03      	cmp	r3, #3
 8001e30:	d002      	beq.n	8001e38 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8001e32:	69bb      	ldr	r3, [r7, #24]
 8001e34:	2b08      	cmp	r3, #8
 8001e36:	d10b      	bne.n	8001e50 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e38:	4bb9      	ldr	r3, [pc, #740]	@ (8002120 <HAL_RCC_OscConfig+0x32c>)
 8001e3a:	681a      	ldr	r2, [r3, #0]
 8001e3c:	2380      	movs	r3, #128	@ 0x80
 8001e3e:	029b      	lsls	r3, r3, #10
 8001e40:	4013      	ands	r3, r2
 8001e42:	d062      	beq.n	8001f0a <HAL_RCC_OscConfig+0x116>
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d15e      	bne.n	8001f0a <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8001e4c:	2301      	movs	r3, #1
 8001e4e:	e2d9      	b.n	8002404 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	685a      	ldr	r2, [r3, #4]
 8001e54:	2380      	movs	r3, #128	@ 0x80
 8001e56:	025b      	lsls	r3, r3, #9
 8001e58:	429a      	cmp	r2, r3
 8001e5a:	d107      	bne.n	8001e6c <HAL_RCC_OscConfig+0x78>
 8001e5c:	4bb0      	ldr	r3, [pc, #704]	@ (8002120 <HAL_RCC_OscConfig+0x32c>)
 8001e5e:	681a      	ldr	r2, [r3, #0]
 8001e60:	4baf      	ldr	r3, [pc, #700]	@ (8002120 <HAL_RCC_OscConfig+0x32c>)
 8001e62:	2180      	movs	r1, #128	@ 0x80
 8001e64:	0249      	lsls	r1, r1, #9
 8001e66:	430a      	orrs	r2, r1
 8001e68:	601a      	str	r2, [r3, #0]
 8001e6a:	e020      	b.n	8001eae <HAL_RCC_OscConfig+0xba>
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	685a      	ldr	r2, [r3, #4]
 8001e70:	23a0      	movs	r3, #160	@ 0xa0
 8001e72:	02db      	lsls	r3, r3, #11
 8001e74:	429a      	cmp	r2, r3
 8001e76:	d10e      	bne.n	8001e96 <HAL_RCC_OscConfig+0xa2>
 8001e78:	4ba9      	ldr	r3, [pc, #676]	@ (8002120 <HAL_RCC_OscConfig+0x32c>)
 8001e7a:	681a      	ldr	r2, [r3, #0]
 8001e7c:	4ba8      	ldr	r3, [pc, #672]	@ (8002120 <HAL_RCC_OscConfig+0x32c>)
 8001e7e:	2180      	movs	r1, #128	@ 0x80
 8001e80:	02c9      	lsls	r1, r1, #11
 8001e82:	430a      	orrs	r2, r1
 8001e84:	601a      	str	r2, [r3, #0]
 8001e86:	4ba6      	ldr	r3, [pc, #664]	@ (8002120 <HAL_RCC_OscConfig+0x32c>)
 8001e88:	681a      	ldr	r2, [r3, #0]
 8001e8a:	4ba5      	ldr	r3, [pc, #660]	@ (8002120 <HAL_RCC_OscConfig+0x32c>)
 8001e8c:	2180      	movs	r1, #128	@ 0x80
 8001e8e:	0249      	lsls	r1, r1, #9
 8001e90:	430a      	orrs	r2, r1
 8001e92:	601a      	str	r2, [r3, #0]
 8001e94:	e00b      	b.n	8001eae <HAL_RCC_OscConfig+0xba>
 8001e96:	4ba2      	ldr	r3, [pc, #648]	@ (8002120 <HAL_RCC_OscConfig+0x32c>)
 8001e98:	681a      	ldr	r2, [r3, #0]
 8001e9a:	4ba1      	ldr	r3, [pc, #644]	@ (8002120 <HAL_RCC_OscConfig+0x32c>)
 8001e9c:	49a1      	ldr	r1, [pc, #644]	@ (8002124 <HAL_RCC_OscConfig+0x330>)
 8001e9e:	400a      	ands	r2, r1
 8001ea0:	601a      	str	r2, [r3, #0]
 8001ea2:	4b9f      	ldr	r3, [pc, #636]	@ (8002120 <HAL_RCC_OscConfig+0x32c>)
 8001ea4:	681a      	ldr	r2, [r3, #0]
 8001ea6:	4b9e      	ldr	r3, [pc, #632]	@ (8002120 <HAL_RCC_OscConfig+0x32c>)
 8001ea8:	499f      	ldr	r1, [pc, #636]	@ (8002128 <HAL_RCC_OscConfig+0x334>)
 8001eaa:	400a      	ands	r2, r1
 8001eac:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d014      	beq.n	8001ee0 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001eb6:	f7ff f937 	bl	8001128 <HAL_GetTick>
 8001eba:	0003      	movs	r3, r0
 8001ebc:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ebe:	e008      	b.n	8001ed2 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ec0:	f7ff f932 	bl	8001128 <HAL_GetTick>
 8001ec4:	0002      	movs	r2, r0
 8001ec6:	693b      	ldr	r3, [r7, #16]
 8001ec8:	1ad3      	subs	r3, r2, r3
 8001eca:	2b64      	cmp	r3, #100	@ 0x64
 8001ecc:	d901      	bls.n	8001ed2 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8001ece:	2303      	movs	r3, #3
 8001ed0:	e298      	b.n	8002404 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ed2:	4b93      	ldr	r3, [pc, #588]	@ (8002120 <HAL_RCC_OscConfig+0x32c>)
 8001ed4:	681a      	ldr	r2, [r3, #0]
 8001ed6:	2380      	movs	r3, #128	@ 0x80
 8001ed8:	029b      	lsls	r3, r3, #10
 8001eda:	4013      	ands	r3, r2
 8001edc:	d0f0      	beq.n	8001ec0 <HAL_RCC_OscConfig+0xcc>
 8001ede:	e015      	b.n	8001f0c <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ee0:	f7ff f922 	bl	8001128 <HAL_GetTick>
 8001ee4:	0003      	movs	r3, r0
 8001ee6:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001ee8:	e008      	b.n	8001efc <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001eea:	f7ff f91d 	bl	8001128 <HAL_GetTick>
 8001eee:	0002      	movs	r2, r0
 8001ef0:	693b      	ldr	r3, [r7, #16]
 8001ef2:	1ad3      	subs	r3, r2, r3
 8001ef4:	2b64      	cmp	r3, #100	@ 0x64
 8001ef6:	d901      	bls.n	8001efc <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001ef8:	2303      	movs	r3, #3
 8001efa:	e283      	b.n	8002404 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001efc:	4b88      	ldr	r3, [pc, #544]	@ (8002120 <HAL_RCC_OscConfig+0x32c>)
 8001efe:	681a      	ldr	r2, [r3, #0]
 8001f00:	2380      	movs	r3, #128	@ 0x80
 8001f02:	029b      	lsls	r3, r3, #10
 8001f04:	4013      	ands	r3, r2
 8001f06:	d1f0      	bne.n	8001eea <HAL_RCC_OscConfig+0xf6>
 8001f08:	e000      	b.n	8001f0c <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f0a:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	2202      	movs	r2, #2
 8001f12:	4013      	ands	r3, r2
 8001f14:	d100      	bne.n	8001f18 <HAL_RCC_OscConfig+0x124>
 8001f16:	e099      	b.n	800204c <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f18:	4b81      	ldr	r3, [pc, #516]	@ (8002120 <HAL_RCC_OscConfig+0x32c>)
 8001f1a:	689b      	ldr	r3, [r3, #8]
 8001f1c:	2238      	movs	r2, #56	@ 0x38
 8001f1e:	4013      	ands	r3, r2
 8001f20:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001f22:	4b7f      	ldr	r3, [pc, #508]	@ (8002120 <HAL_RCC_OscConfig+0x32c>)
 8001f24:	68db      	ldr	r3, [r3, #12]
 8001f26:	2203      	movs	r2, #3
 8001f28:	4013      	ands	r3, r2
 8001f2a:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8001f2c:	69bb      	ldr	r3, [r7, #24]
 8001f2e:	2b10      	cmp	r3, #16
 8001f30:	d102      	bne.n	8001f38 <HAL_RCC_OscConfig+0x144>
 8001f32:	697b      	ldr	r3, [r7, #20]
 8001f34:	2b02      	cmp	r3, #2
 8001f36:	d002      	beq.n	8001f3e <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8001f38:	69bb      	ldr	r3, [r7, #24]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d135      	bne.n	8001faa <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001f3e:	4b78      	ldr	r3, [pc, #480]	@ (8002120 <HAL_RCC_OscConfig+0x32c>)
 8001f40:	681a      	ldr	r2, [r3, #0]
 8001f42:	2380      	movs	r3, #128	@ 0x80
 8001f44:	00db      	lsls	r3, r3, #3
 8001f46:	4013      	ands	r3, r2
 8001f48:	d005      	beq.n	8001f56 <HAL_RCC_OscConfig+0x162>
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	68db      	ldr	r3, [r3, #12]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d101      	bne.n	8001f56 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8001f52:	2301      	movs	r3, #1
 8001f54:	e256      	b.n	8002404 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f56:	4b72      	ldr	r3, [pc, #456]	@ (8002120 <HAL_RCC_OscConfig+0x32c>)
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	4a74      	ldr	r2, [pc, #464]	@ (800212c <HAL_RCC_OscConfig+0x338>)
 8001f5c:	4013      	ands	r3, r2
 8001f5e:	0019      	movs	r1, r3
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	695b      	ldr	r3, [r3, #20]
 8001f64:	021a      	lsls	r2, r3, #8
 8001f66:	4b6e      	ldr	r3, [pc, #440]	@ (8002120 <HAL_RCC_OscConfig+0x32c>)
 8001f68:	430a      	orrs	r2, r1
 8001f6a:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001f6c:	69bb      	ldr	r3, [r7, #24]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d112      	bne.n	8001f98 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001f72:	4b6b      	ldr	r3, [pc, #428]	@ (8002120 <HAL_RCC_OscConfig+0x32c>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	4a6e      	ldr	r2, [pc, #440]	@ (8002130 <HAL_RCC_OscConfig+0x33c>)
 8001f78:	4013      	ands	r3, r2
 8001f7a:	0019      	movs	r1, r3
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	691a      	ldr	r2, [r3, #16]
 8001f80:	4b67      	ldr	r3, [pc, #412]	@ (8002120 <HAL_RCC_OscConfig+0x32c>)
 8001f82:	430a      	orrs	r2, r1
 8001f84:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8001f86:	4b66      	ldr	r3, [pc, #408]	@ (8002120 <HAL_RCC_OscConfig+0x32c>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	0adb      	lsrs	r3, r3, #11
 8001f8c:	2207      	movs	r2, #7
 8001f8e:	4013      	ands	r3, r2
 8001f90:	4a68      	ldr	r2, [pc, #416]	@ (8002134 <HAL_RCC_OscConfig+0x340>)
 8001f92:	40da      	lsrs	r2, r3
 8001f94:	4b68      	ldr	r3, [pc, #416]	@ (8002138 <HAL_RCC_OscConfig+0x344>)
 8001f96:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001f98:	4b68      	ldr	r3, [pc, #416]	@ (800213c <HAL_RCC_OscConfig+0x348>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	0018      	movs	r0, r3
 8001f9e:	f7ff f867 	bl	8001070 <HAL_InitTick>
 8001fa2:	1e03      	subs	r3, r0, #0
 8001fa4:	d051      	beq.n	800204a <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	e22c      	b.n	8002404 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	68db      	ldr	r3, [r3, #12]
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d030      	beq.n	8002014 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001fb2:	4b5b      	ldr	r3, [pc, #364]	@ (8002120 <HAL_RCC_OscConfig+0x32c>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	4a5e      	ldr	r2, [pc, #376]	@ (8002130 <HAL_RCC_OscConfig+0x33c>)
 8001fb8:	4013      	ands	r3, r2
 8001fba:	0019      	movs	r1, r3
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	691a      	ldr	r2, [r3, #16]
 8001fc0:	4b57      	ldr	r3, [pc, #348]	@ (8002120 <HAL_RCC_OscConfig+0x32c>)
 8001fc2:	430a      	orrs	r2, r1
 8001fc4:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8001fc6:	4b56      	ldr	r3, [pc, #344]	@ (8002120 <HAL_RCC_OscConfig+0x32c>)
 8001fc8:	681a      	ldr	r2, [r3, #0]
 8001fca:	4b55      	ldr	r3, [pc, #340]	@ (8002120 <HAL_RCC_OscConfig+0x32c>)
 8001fcc:	2180      	movs	r1, #128	@ 0x80
 8001fce:	0049      	lsls	r1, r1, #1
 8001fd0:	430a      	orrs	r2, r1
 8001fd2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fd4:	f7ff f8a8 	bl	8001128 <HAL_GetTick>
 8001fd8:	0003      	movs	r3, r0
 8001fda:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001fdc:	e008      	b.n	8001ff0 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001fde:	f7ff f8a3 	bl	8001128 <HAL_GetTick>
 8001fe2:	0002      	movs	r2, r0
 8001fe4:	693b      	ldr	r3, [r7, #16]
 8001fe6:	1ad3      	subs	r3, r2, r3
 8001fe8:	2b02      	cmp	r3, #2
 8001fea:	d901      	bls.n	8001ff0 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8001fec:	2303      	movs	r3, #3
 8001fee:	e209      	b.n	8002404 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ff0:	4b4b      	ldr	r3, [pc, #300]	@ (8002120 <HAL_RCC_OscConfig+0x32c>)
 8001ff2:	681a      	ldr	r2, [r3, #0]
 8001ff4:	2380      	movs	r3, #128	@ 0x80
 8001ff6:	00db      	lsls	r3, r3, #3
 8001ff8:	4013      	ands	r3, r2
 8001ffa:	d0f0      	beq.n	8001fde <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ffc:	4b48      	ldr	r3, [pc, #288]	@ (8002120 <HAL_RCC_OscConfig+0x32c>)
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	4a4a      	ldr	r2, [pc, #296]	@ (800212c <HAL_RCC_OscConfig+0x338>)
 8002002:	4013      	ands	r3, r2
 8002004:	0019      	movs	r1, r3
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	695b      	ldr	r3, [r3, #20]
 800200a:	021a      	lsls	r2, r3, #8
 800200c:	4b44      	ldr	r3, [pc, #272]	@ (8002120 <HAL_RCC_OscConfig+0x32c>)
 800200e:	430a      	orrs	r2, r1
 8002010:	605a      	str	r2, [r3, #4]
 8002012:	e01b      	b.n	800204c <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8002014:	4b42      	ldr	r3, [pc, #264]	@ (8002120 <HAL_RCC_OscConfig+0x32c>)
 8002016:	681a      	ldr	r2, [r3, #0]
 8002018:	4b41      	ldr	r3, [pc, #260]	@ (8002120 <HAL_RCC_OscConfig+0x32c>)
 800201a:	4949      	ldr	r1, [pc, #292]	@ (8002140 <HAL_RCC_OscConfig+0x34c>)
 800201c:	400a      	ands	r2, r1
 800201e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002020:	f7ff f882 	bl	8001128 <HAL_GetTick>
 8002024:	0003      	movs	r3, r0
 8002026:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002028:	e008      	b.n	800203c <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800202a:	f7ff f87d 	bl	8001128 <HAL_GetTick>
 800202e:	0002      	movs	r2, r0
 8002030:	693b      	ldr	r3, [r7, #16]
 8002032:	1ad3      	subs	r3, r2, r3
 8002034:	2b02      	cmp	r3, #2
 8002036:	d901      	bls.n	800203c <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8002038:	2303      	movs	r3, #3
 800203a:	e1e3      	b.n	8002404 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800203c:	4b38      	ldr	r3, [pc, #224]	@ (8002120 <HAL_RCC_OscConfig+0x32c>)
 800203e:	681a      	ldr	r2, [r3, #0]
 8002040:	2380      	movs	r3, #128	@ 0x80
 8002042:	00db      	lsls	r3, r3, #3
 8002044:	4013      	ands	r3, r2
 8002046:	d1f0      	bne.n	800202a <HAL_RCC_OscConfig+0x236>
 8002048:	e000      	b.n	800204c <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800204a:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	2208      	movs	r2, #8
 8002052:	4013      	ands	r3, r2
 8002054:	d047      	beq.n	80020e6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002056:	4b32      	ldr	r3, [pc, #200]	@ (8002120 <HAL_RCC_OscConfig+0x32c>)
 8002058:	689b      	ldr	r3, [r3, #8]
 800205a:	2238      	movs	r2, #56	@ 0x38
 800205c:	4013      	ands	r3, r2
 800205e:	2b18      	cmp	r3, #24
 8002060:	d10a      	bne.n	8002078 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8002062:	4b2f      	ldr	r3, [pc, #188]	@ (8002120 <HAL_RCC_OscConfig+0x32c>)
 8002064:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002066:	2202      	movs	r2, #2
 8002068:	4013      	ands	r3, r2
 800206a:	d03c      	beq.n	80020e6 <HAL_RCC_OscConfig+0x2f2>
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	699b      	ldr	r3, [r3, #24]
 8002070:	2b00      	cmp	r3, #0
 8002072:	d138      	bne.n	80020e6 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8002074:	2301      	movs	r3, #1
 8002076:	e1c5      	b.n	8002404 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	699b      	ldr	r3, [r3, #24]
 800207c:	2b00      	cmp	r3, #0
 800207e:	d019      	beq.n	80020b4 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8002080:	4b27      	ldr	r3, [pc, #156]	@ (8002120 <HAL_RCC_OscConfig+0x32c>)
 8002082:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002084:	4b26      	ldr	r3, [pc, #152]	@ (8002120 <HAL_RCC_OscConfig+0x32c>)
 8002086:	2101      	movs	r1, #1
 8002088:	430a      	orrs	r2, r1
 800208a:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800208c:	f7ff f84c 	bl	8001128 <HAL_GetTick>
 8002090:	0003      	movs	r3, r0
 8002092:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002094:	e008      	b.n	80020a8 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002096:	f7ff f847 	bl	8001128 <HAL_GetTick>
 800209a:	0002      	movs	r2, r0
 800209c:	693b      	ldr	r3, [r7, #16]
 800209e:	1ad3      	subs	r3, r2, r3
 80020a0:	2b02      	cmp	r3, #2
 80020a2:	d901      	bls.n	80020a8 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80020a4:	2303      	movs	r3, #3
 80020a6:	e1ad      	b.n	8002404 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80020a8:	4b1d      	ldr	r3, [pc, #116]	@ (8002120 <HAL_RCC_OscConfig+0x32c>)
 80020aa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80020ac:	2202      	movs	r2, #2
 80020ae:	4013      	ands	r3, r2
 80020b0:	d0f1      	beq.n	8002096 <HAL_RCC_OscConfig+0x2a2>
 80020b2:	e018      	b.n	80020e6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80020b4:	4b1a      	ldr	r3, [pc, #104]	@ (8002120 <HAL_RCC_OscConfig+0x32c>)
 80020b6:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80020b8:	4b19      	ldr	r3, [pc, #100]	@ (8002120 <HAL_RCC_OscConfig+0x32c>)
 80020ba:	2101      	movs	r1, #1
 80020bc:	438a      	bics	r2, r1
 80020be:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020c0:	f7ff f832 	bl	8001128 <HAL_GetTick>
 80020c4:	0003      	movs	r3, r0
 80020c6:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80020c8:	e008      	b.n	80020dc <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020ca:	f7ff f82d 	bl	8001128 <HAL_GetTick>
 80020ce:	0002      	movs	r2, r0
 80020d0:	693b      	ldr	r3, [r7, #16]
 80020d2:	1ad3      	subs	r3, r2, r3
 80020d4:	2b02      	cmp	r3, #2
 80020d6:	d901      	bls.n	80020dc <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 80020d8:	2303      	movs	r3, #3
 80020da:	e193      	b.n	8002404 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80020dc:	4b10      	ldr	r3, [pc, #64]	@ (8002120 <HAL_RCC_OscConfig+0x32c>)
 80020de:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80020e0:	2202      	movs	r2, #2
 80020e2:	4013      	ands	r3, r2
 80020e4:	d1f1      	bne.n	80020ca <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	2204      	movs	r2, #4
 80020ec:	4013      	ands	r3, r2
 80020ee:	d100      	bne.n	80020f2 <HAL_RCC_OscConfig+0x2fe>
 80020f0:	e0c6      	b.n	8002280 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020f2:	231f      	movs	r3, #31
 80020f4:	18fb      	adds	r3, r7, r3
 80020f6:	2200      	movs	r2, #0
 80020f8:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80020fa:	4b09      	ldr	r3, [pc, #36]	@ (8002120 <HAL_RCC_OscConfig+0x32c>)
 80020fc:	689b      	ldr	r3, [r3, #8]
 80020fe:	2238      	movs	r2, #56	@ 0x38
 8002100:	4013      	ands	r3, r2
 8002102:	2b20      	cmp	r3, #32
 8002104:	d11e      	bne.n	8002144 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8002106:	4b06      	ldr	r3, [pc, #24]	@ (8002120 <HAL_RCC_OscConfig+0x32c>)
 8002108:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800210a:	2202      	movs	r2, #2
 800210c:	4013      	ands	r3, r2
 800210e:	d100      	bne.n	8002112 <HAL_RCC_OscConfig+0x31e>
 8002110:	e0b6      	b.n	8002280 <HAL_RCC_OscConfig+0x48c>
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	689b      	ldr	r3, [r3, #8]
 8002116:	2b00      	cmp	r3, #0
 8002118:	d000      	beq.n	800211c <HAL_RCC_OscConfig+0x328>
 800211a:	e0b1      	b.n	8002280 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 800211c:	2301      	movs	r3, #1
 800211e:	e171      	b.n	8002404 <HAL_RCC_OscConfig+0x610>
 8002120:	40021000 	.word	0x40021000
 8002124:	fffeffff 	.word	0xfffeffff
 8002128:	fffbffff 	.word	0xfffbffff
 800212c:	ffff80ff 	.word	0xffff80ff
 8002130:	ffffc7ff 	.word	0xffffc7ff
 8002134:	00f42400 	.word	0x00f42400
 8002138:	20000004 	.word	0x20000004
 800213c:	20000008 	.word	0x20000008
 8002140:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002144:	4bb1      	ldr	r3, [pc, #708]	@ (800240c <HAL_RCC_OscConfig+0x618>)
 8002146:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002148:	2380      	movs	r3, #128	@ 0x80
 800214a:	055b      	lsls	r3, r3, #21
 800214c:	4013      	ands	r3, r2
 800214e:	d101      	bne.n	8002154 <HAL_RCC_OscConfig+0x360>
 8002150:	2301      	movs	r3, #1
 8002152:	e000      	b.n	8002156 <HAL_RCC_OscConfig+0x362>
 8002154:	2300      	movs	r3, #0
 8002156:	2b00      	cmp	r3, #0
 8002158:	d011      	beq.n	800217e <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800215a:	4bac      	ldr	r3, [pc, #688]	@ (800240c <HAL_RCC_OscConfig+0x618>)
 800215c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800215e:	4bab      	ldr	r3, [pc, #684]	@ (800240c <HAL_RCC_OscConfig+0x618>)
 8002160:	2180      	movs	r1, #128	@ 0x80
 8002162:	0549      	lsls	r1, r1, #21
 8002164:	430a      	orrs	r2, r1
 8002166:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002168:	4ba8      	ldr	r3, [pc, #672]	@ (800240c <HAL_RCC_OscConfig+0x618>)
 800216a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800216c:	2380      	movs	r3, #128	@ 0x80
 800216e:	055b      	lsls	r3, r3, #21
 8002170:	4013      	ands	r3, r2
 8002172:	60fb      	str	r3, [r7, #12]
 8002174:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8002176:	231f      	movs	r3, #31
 8002178:	18fb      	adds	r3, r7, r3
 800217a:	2201      	movs	r2, #1
 800217c:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800217e:	4ba4      	ldr	r3, [pc, #656]	@ (8002410 <HAL_RCC_OscConfig+0x61c>)
 8002180:	681a      	ldr	r2, [r3, #0]
 8002182:	2380      	movs	r3, #128	@ 0x80
 8002184:	005b      	lsls	r3, r3, #1
 8002186:	4013      	ands	r3, r2
 8002188:	d11a      	bne.n	80021c0 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800218a:	4ba1      	ldr	r3, [pc, #644]	@ (8002410 <HAL_RCC_OscConfig+0x61c>)
 800218c:	681a      	ldr	r2, [r3, #0]
 800218e:	4ba0      	ldr	r3, [pc, #640]	@ (8002410 <HAL_RCC_OscConfig+0x61c>)
 8002190:	2180      	movs	r1, #128	@ 0x80
 8002192:	0049      	lsls	r1, r1, #1
 8002194:	430a      	orrs	r2, r1
 8002196:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8002198:	f7fe ffc6 	bl	8001128 <HAL_GetTick>
 800219c:	0003      	movs	r3, r0
 800219e:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80021a0:	e008      	b.n	80021b4 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021a2:	f7fe ffc1 	bl	8001128 <HAL_GetTick>
 80021a6:	0002      	movs	r2, r0
 80021a8:	693b      	ldr	r3, [r7, #16]
 80021aa:	1ad3      	subs	r3, r2, r3
 80021ac:	2b02      	cmp	r3, #2
 80021ae:	d901      	bls.n	80021b4 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 80021b0:	2303      	movs	r3, #3
 80021b2:	e127      	b.n	8002404 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80021b4:	4b96      	ldr	r3, [pc, #600]	@ (8002410 <HAL_RCC_OscConfig+0x61c>)
 80021b6:	681a      	ldr	r2, [r3, #0]
 80021b8:	2380      	movs	r3, #128	@ 0x80
 80021ba:	005b      	lsls	r3, r3, #1
 80021bc:	4013      	ands	r3, r2
 80021be:	d0f0      	beq.n	80021a2 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	689b      	ldr	r3, [r3, #8]
 80021c4:	2b01      	cmp	r3, #1
 80021c6:	d106      	bne.n	80021d6 <HAL_RCC_OscConfig+0x3e2>
 80021c8:	4b90      	ldr	r3, [pc, #576]	@ (800240c <HAL_RCC_OscConfig+0x618>)
 80021ca:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80021cc:	4b8f      	ldr	r3, [pc, #572]	@ (800240c <HAL_RCC_OscConfig+0x618>)
 80021ce:	2101      	movs	r1, #1
 80021d0:	430a      	orrs	r2, r1
 80021d2:	65da      	str	r2, [r3, #92]	@ 0x5c
 80021d4:	e01c      	b.n	8002210 <HAL_RCC_OscConfig+0x41c>
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	689b      	ldr	r3, [r3, #8]
 80021da:	2b05      	cmp	r3, #5
 80021dc:	d10c      	bne.n	80021f8 <HAL_RCC_OscConfig+0x404>
 80021de:	4b8b      	ldr	r3, [pc, #556]	@ (800240c <HAL_RCC_OscConfig+0x618>)
 80021e0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80021e2:	4b8a      	ldr	r3, [pc, #552]	@ (800240c <HAL_RCC_OscConfig+0x618>)
 80021e4:	2104      	movs	r1, #4
 80021e6:	430a      	orrs	r2, r1
 80021e8:	65da      	str	r2, [r3, #92]	@ 0x5c
 80021ea:	4b88      	ldr	r3, [pc, #544]	@ (800240c <HAL_RCC_OscConfig+0x618>)
 80021ec:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80021ee:	4b87      	ldr	r3, [pc, #540]	@ (800240c <HAL_RCC_OscConfig+0x618>)
 80021f0:	2101      	movs	r1, #1
 80021f2:	430a      	orrs	r2, r1
 80021f4:	65da      	str	r2, [r3, #92]	@ 0x5c
 80021f6:	e00b      	b.n	8002210 <HAL_RCC_OscConfig+0x41c>
 80021f8:	4b84      	ldr	r3, [pc, #528]	@ (800240c <HAL_RCC_OscConfig+0x618>)
 80021fa:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80021fc:	4b83      	ldr	r3, [pc, #524]	@ (800240c <HAL_RCC_OscConfig+0x618>)
 80021fe:	2101      	movs	r1, #1
 8002200:	438a      	bics	r2, r1
 8002202:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002204:	4b81      	ldr	r3, [pc, #516]	@ (800240c <HAL_RCC_OscConfig+0x618>)
 8002206:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002208:	4b80      	ldr	r3, [pc, #512]	@ (800240c <HAL_RCC_OscConfig+0x618>)
 800220a:	2104      	movs	r1, #4
 800220c:	438a      	bics	r2, r1
 800220e:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	689b      	ldr	r3, [r3, #8]
 8002214:	2b00      	cmp	r3, #0
 8002216:	d014      	beq.n	8002242 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002218:	f7fe ff86 	bl	8001128 <HAL_GetTick>
 800221c:	0003      	movs	r3, r0
 800221e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002220:	e009      	b.n	8002236 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002222:	f7fe ff81 	bl	8001128 <HAL_GetTick>
 8002226:	0002      	movs	r2, r0
 8002228:	693b      	ldr	r3, [r7, #16]
 800222a:	1ad3      	subs	r3, r2, r3
 800222c:	4a79      	ldr	r2, [pc, #484]	@ (8002414 <HAL_RCC_OscConfig+0x620>)
 800222e:	4293      	cmp	r3, r2
 8002230:	d901      	bls.n	8002236 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8002232:	2303      	movs	r3, #3
 8002234:	e0e6      	b.n	8002404 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002236:	4b75      	ldr	r3, [pc, #468]	@ (800240c <HAL_RCC_OscConfig+0x618>)
 8002238:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800223a:	2202      	movs	r2, #2
 800223c:	4013      	ands	r3, r2
 800223e:	d0f0      	beq.n	8002222 <HAL_RCC_OscConfig+0x42e>
 8002240:	e013      	b.n	800226a <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002242:	f7fe ff71 	bl	8001128 <HAL_GetTick>
 8002246:	0003      	movs	r3, r0
 8002248:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800224a:	e009      	b.n	8002260 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800224c:	f7fe ff6c 	bl	8001128 <HAL_GetTick>
 8002250:	0002      	movs	r2, r0
 8002252:	693b      	ldr	r3, [r7, #16]
 8002254:	1ad3      	subs	r3, r2, r3
 8002256:	4a6f      	ldr	r2, [pc, #444]	@ (8002414 <HAL_RCC_OscConfig+0x620>)
 8002258:	4293      	cmp	r3, r2
 800225a:	d901      	bls.n	8002260 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 800225c:	2303      	movs	r3, #3
 800225e:	e0d1      	b.n	8002404 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002260:	4b6a      	ldr	r3, [pc, #424]	@ (800240c <HAL_RCC_OscConfig+0x618>)
 8002262:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002264:	2202      	movs	r2, #2
 8002266:	4013      	ands	r3, r2
 8002268:	d1f0      	bne.n	800224c <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800226a:	231f      	movs	r3, #31
 800226c:	18fb      	adds	r3, r7, r3
 800226e:	781b      	ldrb	r3, [r3, #0]
 8002270:	2b01      	cmp	r3, #1
 8002272:	d105      	bne.n	8002280 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8002274:	4b65      	ldr	r3, [pc, #404]	@ (800240c <HAL_RCC_OscConfig+0x618>)
 8002276:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002278:	4b64      	ldr	r3, [pc, #400]	@ (800240c <HAL_RCC_OscConfig+0x618>)
 800227a:	4967      	ldr	r1, [pc, #412]	@ (8002418 <HAL_RCC_OscConfig+0x624>)
 800227c:	400a      	ands	r2, r1
 800227e:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	69db      	ldr	r3, [r3, #28]
 8002284:	2b00      	cmp	r3, #0
 8002286:	d100      	bne.n	800228a <HAL_RCC_OscConfig+0x496>
 8002288:	e0bb      	b.n	8002402 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800228a:	4b60      	ldr	r3, [pc, #384]	@ (800240c <HAL_RCC_OscConfig+0x618>)
 800228c:	689b      	ldr	r3, [r3, #8]
 800228e:	2238      	movs	r2, #56	@ 0x38
 8002290:	4013      	ands	r3, r2
 8002292:	2b10      	cmp	r3, #16
 8002294:	d100      	bne.n	8002298 <HAL_RCC_OscConfig+0x4a4>
 8002296:	e07b      	b.n	8002390 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	69db      	ldr	r3, [r3, #28]
 800229c:	2b02      	cmp	r3, #2
 800229e:	d156      	bne.n	800234e <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022a0:	4b5a      	ldr	r3, [pc, #360]	@ (800240c <HAL_RCC_OscConfig+0x618>)
 80022a2:	681a      	ldr	r2, [r3, #0]
 80022a4:	4b59      	ldr	r3, [pc, #356]	@ (800240c <HAL_RCC_OscConfig+0x618>)
 80022a6:	495d      	ldr	r1, [pc, #372]	@ (800241c <HAL_RCC_OscConfig+0x628>)
 80022a8:	400a      	ands	r2, r1
 80022aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022ac:	f7fe ff3c 	bl	8001128 <HAL_GetTick>
 80022b0:	0003      	movs	r3, r0
 80022b2:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80022b4:	e008      	b.n	80022c8 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022b6:	f7fe ff37 	bl	8001128 <HAL_GetTick>
 80022ba:	0002      	movs	r2, r0
 80022bc:	693b      	ldr	r3, [r7, #16]
 80022be:	1ad3      	subs	r3, r2, r3
 80022c0:	2b02      	cmp	r3, #2
 80022c2:	d901      	bls.n	80022c8 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 80022c4:	2303      	movs	r3, #3
 80022c6:	e09d      	b.n	8002404 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80022c8:	4b50      	ldr	r3, [pc, #320]	@ (800240c <HAL_RCC_OscConfig+0x618>)
 80022ca:	681a      	ldr	r2, [r3, #0]
 80022cc:	2380      	movs	r3, #128	@ 0x80
 80022ce:	049b      	lsls	r3, r3, #18
 80022d0:	4013      	ands	r3, r2
 80022d2:	d1f0      	bne.n	80022b6 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80022d4:	4b4d      	ldr	r3, [pc, #308]	@ (800240c <HAL_RCC_OscConfig+0x618>)
 80022d6:	68db      	ldr	r3, [r3, #12]
 80022d8:	4a51      	ldr	r2, [pc, #324]	@ (8002420 <HAL_RCC_OscConfig+0x62c>)
 80022da:	4013      	ands	r3, r2
 80022dc:	0019      	movs	r1, r3
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6a1a      	ldr	r2, [r3, #32]
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022e6:	431a      	orrs	r2, r3
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022ec:	021b      	lsls	r3, r3, #8
 80022ee:	431a      	orrs	r2, r3
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022f4:	431a      	orrs	r2, r3
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022fa:	431a      	orrs	r2, r3
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002300:	431a      	orrs	r2, r3
 8002302:	4b42      	ldr	r3, [pc, #264]	@ (800240c <HAL_RCC_OscConfig+0x618>)
 8002304:	430a      	orrs	r2, r1
 8002306:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002308:	4b40      	ldr	r3, [pc, #256]	@ (800240c <HAL_RCC_OscConfig+0x618>)
 800230a:	681a      	ldr	r2, [r3, #0]
 800230c:	4b3f      	ldr	r3, [pc, #252]	@ (800240c <HAL_RCC_OscConfig+0x618>)
 800230e:	2180      	movs	r1, #128	@ 0x80
 8002310:	0449      	lsls	r1, r1, #17
 8002312:	430a      	orrs	r2, r1
 8002314:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8002316:	4b3d      	ldr	r3, [pc, #244]	@ (800240c <HAL_RCC_OscConfig+0x618>)
 8002318:	68da      	ldr	r2, [r3, #12]
 800231a:	4b3c      	ldr	r3, [pc, #240]	@ (800240c <HAL_RCC_OscConfig+0x618>)
 800231c:	2180      	movs	r1, #128	@ 0x80
 800231e:	0549      	lsls	r1, r1, #21
 8002320:	430a      	orrs	r2, r1
 8002322:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002324:	f7fe ff00 	bl	8001128 <HAL_GetTick>
 8002328:	0003      	movs	r3, r0
 800232a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800232c:	e008      	b.n	8002340 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800232e:	f7fe fefb 	bl	8001128 <HAL_GetTick>
 8002332:	0002      	movs	r2, r0
 8002334:	693b      	ldr	r3, [r7, #16]
 8002336:	1ad3      	subs	r3, r2, r3
 8002338:	2b02      	cmp	r3, #2
 800233a:	d901      	bls.n	8002340 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 800233c:	2303      	movs	r3, #3
 800233e:	e061      	b.n	8002404 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002340:	4b32      	ldr	r3, [pc, #200]	@ (800240c <HAL_RCC_OscConfig+0x618>)
 8002342:	681a      	ldr	r2, [r3, #0]
 8002344:	2380      	movs	r3, #128	@ 0x80
 8002346:	049b      	lsls	r3, r3, #18
 8002348:	4013      	ands	r3, r2
 800234a:	d0f0      	beq.n	800232e <HAL_RCC_OscConfig+0x53a>
 800234c:	e059      	b.n	8002402 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800234e:	4b2f      	ldr	r3, [pc, #188]	@ (800240c <HAL_RCC_OscConfig+0x618>)
 8002350:	681a      	ldr	r2, [r3, #0]
 8002352:	4b2e      	ldr	r3, [pc, #184]	@ (800240c <HAL_RCC_OscConfig+0x618>)
 8002354:	4931      	ldr	r1, [pc, #196]	@ (800241c <HAL_RCC_OscConfig+0x628>)
 8002356:	400a      	ands	r2, r1
 8002358:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800235a:	f7fe fee5 	bl	8001128 <HAL_GetTick>
 800235e:	0003      	movs	r3, r0
 8002360:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002362:	e008      	b.n	8002376 <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002364:	f7fe fee0 	bl	8001128 <HAL_GetTick>
 8002368:	0002      	movs	r2, r0
 800236a:	693b      	ldr	r3, [r7, #16]
 800236c:	1ad3      	subs	r3, r2, r3
 800236e:	2b02      	cmp	r3, #2
 8002370:	d901      	bls.n	8002376 <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 8002372:	2303      	movs	r3, #3
 8002374:	e046      	b.n	8002404 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002376:	4b25      	ldr	r3, [pc, #148]	@ (800240c <HAL_RCC_OscConfig+0x618>)
 8002378:	681a      	ldr	r2, [r3, #0]
 800237a:	2380      	movs	r3, #128	@ 0x80
 800237c:	049b      	lsls	r3, r3, #18
 800237e:	4013      	ands	r3, r2
 8002380:	d1f0      	bne.n	8002364 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8002382:	4b22      	ldr	r3, [pc, #136]	@ (800240c <HAL_RCC_OscConfig+0x618>)
 8002384:	68da      	ldr	r2, [r3, #12]
 8002386:	4b21      	ldr	r3, [pc, #132]	@ (800240c <HAL_RCC_OscConfig+0x618>)
 8002388:	4926      	ldr	r1, [pc, #152]	@ (8002424 <HAL_RCC_OscConfig+0x630>)
 800238a:	400a      	ands	r2, r1
 800238c:	60da      	str	r2, [r3, #12]
 800238e:	e038      	b.n	8002402 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	69db      	ldr	r3, [r3, #28]
 8002394:	2b01      	cmp	r3, #1
 8002396:	d101      	bne.n	800239c <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8002398:	2301      	movs	r3, #1
 800239a:	e033      	b.n	8002404 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 800239c:	4b1b      	ldr	r3, [pc, #108]	@ (800240c <HAL_RCC_OscConfig+0x618>)
 800239e:	68db      	ldr	r3, [r3, #12]
 80023a0:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023a2:	697b      	ldr	r3, [r7, #20]
 80023a4:	2203      	movs	r2, #3
 80023a6:	401a      	ands	r2, r3
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6a1b      	ldr	r3, [r3, #32]
 80023ac:	429a      	cmp	r2, r3
 80023ae:	d126      	bne.n	80023fe <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80023b0:	697b      	ldr	r3, [r7, #20]
 80023b2:	2270      	movs	r2, #112	@ 0x70
 80023b4:	401a      	ands	r2, r3
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023ba:	429a      	cmp	r2, r3
 80023bc:	d11f      	bne.n	80023fe <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80023be:	697a      	ldr	r2, [r7, #20]
 80023c0:	23fe      	movs	r3, #254	@ 0xfe
 80023c2:	01db      	lsls	r3, r3, #7
 80023c4:	401a      	ands	r2, r3
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023ca:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80023cc:	429a      	cmp	r2, r3
 80023ce:	d116      	bne.n	80023fe <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80023d0:	697a      	ldr	r2, [r7, #20]
 80023d2:	23f8      	movs	r3, #248	@ 0xf8
 80023d4:	039b      	lsls	r3, r3, #14
 80023d6:	401a      	ands	r2, r3
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80023dc:	429a      	cmp	r2, r3
 80023de:	d10e      	bne.n	80023fe <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80023e0:	697a      	ldr	r2, [r7, #20]
 80023e2:	23e0      	movs	r3, #224	@ 0xe0
 80023e4:	051b      	lsls	r3, r3, #20
 80023e6:	401a      	ands	r2, r3
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80023ec:	429a      	cmp	r2, r3
 80023ee:	d106      	bne.n	80023fe <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80023f0:	697b      	ldr	r3, [r7, #20]
 80023f2:	0f5b      	lsrs	r3, r3, #29
 80023f4:	075a      	lsls	r2, r3, #29
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80023fa:	429a      	cmp	r2, r3
 80023fc:	d001      	beq.n	8002402 <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 80023fe:	2301      	movs	r3, #1
 8002400:	e000      	b.n	8002404 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 8002402:	2300      	movs	r3, #0
}
 8002404:	0018      	movs	r0, r3
 8002406:	46bd      	mov	sp, r7
 8002408:	b008      	add	sp, #32
 800240a:	bd80      	pop	{r7, pc}
 800240c:	40021000 	.word	0x40021000
 8002410:	40007000 	.word	0x40007000
 8002414:	00001388 	.word	0x00001388
 8002418:	efffffff 	.word	0xefffffff
 800241c:	feffffff 	.word	0xfeffffff
 8002420:	11c1808c 	.word	0x11c1808c
 8002424:	eefefffc 	.word	0xeefefffc

08002428 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b084      	sub	sp, #16
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
 8002430:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	2b00      	cmp	r3, #0
 8002436:	d101      	bne.n	800243c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002438:	2301      	movs	r3, #1
 800243a:	e0e9      	b.n	8002610 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800243c:	4b76      	ldr	r3, [pc, #472]	@ (8002618 <HAL_RCC_ClockConfig+0x1f0>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	2207      	movs	r2, #7
 8002442:	4013      	ands	r3, r2
 8002444:	683a      	ldr	r2, [r7, #0]
 8002446:	429a      	cmp	r2, r3
 8002448:	d91e      	bls.n	8002488 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800244a:	4b73      	ldr	r3, [pc, #460]	@ (8002618 <HAL_RCC_ClockConfig+0x1f0>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	2207      	movs	r2, #7
 8002450:	4393      	bics	r3, r2
 8002452:	0019      	movs	r1, r3
 8002454:	4b70      	ldr	r3, [pc, #448]	@ (8002618 <HAL_RCC_ClockConfig+0x1f0>)
 8002456:	683a      	ldr	r2, [r7, #0]
 8002458:	430a      	orrs	r2, r1
 800245a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800245c:	f7fe fe64 	bl	8001128 <HAL_GetTick>
 8002460:	0003      	movs	r3, r0
 8002462:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002464:	e009      	b.n	800247a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002466:	f7fe fe5f 	bl	8001128 <HAL_GetTick>
 800246a:	0002      	movs	r2, r0
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	1ad3      	subs	r3, r2, r3
 8002470:	4a6a      	ldr	r2, [pc, #424]	@ (800261c <HAL_RCC_ClockConfig+0x1f4>)
 8002472:	4293      	cmp	r3, r2
 8002474:	d901      	bls.n	800247a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002476:	2303      	movs	r3, #3
 8002478:	e0ca      	b.n	8002610 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800247a:	4b67      	ldr	r3, [pc, #412]	@ (8002618 <HAL_RCC_ClockConfig+0x1f0>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	2207      	movs	r2, #7
 8002480:	4013      	ands	r3, r2
 8002482:	683a      	ldr	r2, [r7, #0]
 8002484:	429a      	cmp	r2, r3
 8002486:	d1ee      	bne.n	8002466 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	2202      	movs	r2, #2
 800248e:	4013      	ands	r3, r2
 8002490:	d015      	beq.n	80024be <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	2204      	movs	r2, #4
 8002498:	4013      	ands	r3, r2
 800249a:	d006      	beq.n	80024aa <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800249c:	4b60      	ldr	r3, [pc, #384]	@ (8002620 <HAL_RCC_ClockConfig+0x1f8>)
 800249e:	689a      	ldr	r2, [r3, #8]
 80024a0:	4b5f      	ldr	r3, [pc, #380]	@ (8002620 <HAL_RCC_ClockConfig+0x1f8>)
 80024a2:	21e0      	movs	r1, #224	@ 0xe0
 80024a4:	01c9      	lsls	r1, r1, #7
 80024a6:	430a      	orrs	r2, r1
 80024a8:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024aa:	4b5d      	ldr	r3, [pc, #372]	@ (8002620 <HAL_RCC_ClockConfig+0x1f8>)
 80024ac:	689b      	ldr	r3, [r3, #8]
 80024ae:	4a5d      	ldr	r2, [pc, #372]	@ (8002624 <HAL_RCC_ClockConfig+0x1fc>)
 80024b0:	4013      	ands	r3, r2
 80024b2:	0019      	movs	r1, r3
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	689a      	ldr	r2, [r3, #8]
 80024b8:	4b59      	ldr	r3, [pc, #356]	@ (8002620 <HAL_RCC_ClockConfig+0x1f8>)
 80024ba:	430a      	orrs	r2, r1
 80024bc:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	2201      	movs	r2, #1
 80024c4:	4013      	ands	r3, r2
 80024c6:	d057      	beq.n	8002578 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	2b01      	cmp	r3, #1
 80024ce:	d107      	bne.n	80024e0 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80024d0:	4b53      	ldr	r3, [pc, #332]	@ (8002620 <HAL_RCC_ClockConfig+0x1f8>)
 80024d2:	681a      	ldr	r2, [r3, #0]
 80024d4:	2380      	movs	r3, #128	@ 0x80
 80024d6:	029b      	lsls	r3, r3, #10
 80024d8:	4013      	ands	r3, r2
 80024da:	d12b      	bne.n	8002534 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80024dc:	2301      	movs	r3, #1
 80024de:	e097      	b.n	8002610 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	2b02      	cmp	r3, #2
 80024e6:	d107      	bne.n	80024f8 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80024e8:	4b4d      	ldr	r3, [pc, #308]	@ (8002620 <HAL_RCC_ClockConfig+0x1f8>)
 80024ea:	681a      	ldr	r2, [r3, #0]
 80024ec:	2380      	movs	r3, #128	@ 0x80
 80024ee:	049b      	lsls	r3, r3, #18
 80024f0:	4013      	ands	r3, r2
 80024f2:	d11f      	bne.n	8002534 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80024f4:	2301      	movs	r3, #1
 80024f6:	e08b      	b.n	8002610 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d107      	bne.n	8002510 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002500:	4b47      	ldr	r3, [pc, #284]	@ (8002620 <HAL_RCC_ClockConfig+0x1f8>)
 8002502:	681a      	ldr	r2, [r3, #0]
 8002504:	2380      	movs	r3, #128	@ 0x80
 8002506:	00db      	lsls	r3, r3, #3
 8002508:	4013      	ands	r3, r2
 800250a:	d113      	bne.n	8002534 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800250c:	2301      	movs	r3, #1
 800250e:	e07f      	b.n	8002610 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	2b03      	cmp	r3, #3
 8002516:	d106      	bne.n	8002526 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002518:	4b41      	ldr	r3, [pc, #260]	@ (8002620 <HAL_RCC_ClockConfig+0x1f8>)
 800251a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800251c:	2202      	movs	r2, #2
 800251e:	4013      	ands	r3, r2
 8002520:	d108      	bne.n	8002534 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002522:	2301      	movs	r3, #1
 8002524:	e074      	b.n	8002610 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002526:	4b3e      	ldr	r3, [pc, #248]	@ (8002620 <HAL_RCC_ClockConfig+0x1f8>)
 8002528:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800252a:	2202      	movs	r2, #2
 800252c:	4013      	ands	r3, r2
 800252e:	d101      	bne.n	8002534 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002530:	2301      	movs	r3, #1
 8002532:	e06d      	b.n	8002610 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002534:	4b3a      	ldr	r3, [pc, #232]	@ (8002620 <HAL_RCC_ClockConfig+0x1f8>)
 8002536:	689b      	ldr	r3, [r3, #8]
 8002538:	2207      	movs	r2, #7
 800253a:	4393      	bics	r3, r2
 800253c:	0019      	movs	r1, r3
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	685a      	ldr	r2, [r3, #4]
 8002542:	4b37      	ldr	r3, [pc, #220]	@ (8002620 <HAL_RCC_ClockConfig+0x1f8>)
 8002544:	430a      	orrs	r2, r1
 8002546:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002548:	f7fe fdee 	bl	8001128 <HAL_GetTick>
 800254c:	0003      	movs	r3, r0
 800254e:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002550:	e009      	b.n	8002566 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002552:	f7fe fde9 	bl	8001128 <HAL_GetTick>
 8002556:	0002      	movs	r2, r0
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	1ad3      	subs	r3, r2, r3
 800255c:	4a2f      	ldr	r2, [pc, #188]	@ (800261c <HAL_RCC_ClockConfig+0x1f4>)
 800255e:	4293      	cmp	r3, r2
 8002560:	d901      	bls.n	8002566 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8002562:	2303      	movs	r3, #3
 8002564:	e054      	b.n	8002610 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002566:	4b2e      	ldr	r3, [pc, #184]	@ (8002620 <HAL_RCC_ClockConfig+0x1f8>)
 8002568:	689b      	ldr	r3, [r3, #8]
 800256a:	2238      	movs	r2, #56	@ 0x38
 800256c:	401a      	ands	r2, r3
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	685b      	ldr	r3, [r3, #4]
 8002572:	00db      	lsls	r3, r3, #3
 8002574:	429a      	cmp	r2, r3
 8002576:	d1ec      	bne.n	8002552 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002578:	4b27      	ldr	r3, [pc, #156]	@ (8002618 <HAL_RCC_ClockConfig+0x1f0>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	2207      	movs	r2, #7
 800257e:	4013      	ands	r3, r2
 8002580:	683a      	ldr	r2, [r7, #0]
 8002582:	429a      	cmp	r2, r3
 8002584:	d21e      	bcs.n	80025c4 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002586:	4b24      	ldr	r3, [pc, #144]	@ (8002618 <HAL_RCC_ClockConfig+0x1f0>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	2207      	movs	r2, #7
 800258c:	4393      	bics	r3, r2
 800258e:	0019      	movs	r1, r3
 8002590:	4b21      	ldr	r3, [pc, #132]	@ (8002618 <HAL_RCC_ClockConfig+0x1f0>)
 8002592:	683a      	ldr	r2, [r7, #0]
 8002594:	430a      	orrs	r2, r1
 8002596:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002598:	f7fe fdc6 	bl	8001128 <HAL_GetTick>
 800259c:	0003      	movs	r3, r0
 800259e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80025a0:	e009      	b.n	80025b6 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025a2:	f7fe fdc1 	bl	8001128 <HAL_GetTick>
 80025a6:	0002      	movs	r2, r0
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	1ad3      	subs	r3, r2, r3
 80025ac:	4a1b      	ldr	r2, [pc, #108]	@ (800261c <HAL_RCC_ClockConfig+0x1f4>)
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d901      	bls.n	80025b6 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80025b2:	2303      	movs	r3, #3
 80025b4:	e02c      	b.n	8002610 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80025b6:	4b18      	ldr	r3, [pc, #96]	@ (8002618 <HAL_RCC_ClockConfig+0x1f0>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	2207      	movs	r2, #7
 80025bc:	4013      	ands	r3, r2
 80025be:	683a      	ldr	r2, [r7, #0]
 80025c0:	429a      	cmp	r2, r3
 80025c2:	d1ee      	bne.n	80025a2 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	2204      	movs	r2, #4
 80025ca:	4013      	ands	r3, r2
 80025cc:	d009      	beq.n	80025e2 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80025ce:	4b14      	ldr	r3, [pc, #80]	@ (8002620 <HAL_RCC_ClockConfig+0x1f8>)
 80025d0:	689b      	ldr	r3, [r3, #8]
 80025d2:	4a15      	ldr	r2, [pc, #84]	@ (8002628 <HAL_RCC_ClockConfig+0x200>)
 80025d4:	4013      	ands	r3, r2
 80025d6:	0019      	movs	r1, r3
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	68da      	ldr	r2, [r3, #12]
 80025dc:	4b10      	ldr	r3, [pc, #64]	@ (8002620 <HAL_RCC_ClockConfig+0x1f8>)
 80025de:	430a      	orrs	r2, r1
 80025e0:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80025e2:	f000 f829 	bl	8002638 <HAL_RCC_GetSysClockFreq>
 80025e6:	0001      	movs	r1, r0
 80025e8:	4b0d      	ldr	r3, [pc, #52]	@ (8002620 <HAL_RCC_ClockConfig+0x1f8>)
 80025ea:	689b      	ldr	r3, [r3, #8]
 80025ec:	0a1b      	lsrs	r3, r3, #8
 80025ee:	220f      	movs	r2, #15
 80025f0:	401a      	ands	r2, r3
 80025f2:	4b0e      	ldr	r3, [pc, #56]	@ (800262c <HAL_RCC_ClockConfig+0x204>)
 80025f4:	0092      	lsls	r2, r2, #2
 80025f6:	58d3      	ldr	r3, [r2, r3]
 80025f8:	221f      	movs	r2, #31
 80025fa:	4013      	ands	r3, r2
 80025fc:	000a      	movs	r2, r1
 80025fe:	40da      	lsrs	r2, r3
 8002600:	4b0b      	ldr	r3, [pc, #44]	@ (8002630 <HAL_RCC_ClockConfig+0x208>)
 8002602:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002604:	4b0b      	ldr	r3, [pc, #44]	@ (8002634 <HAL_RCC_ClockConfig+0x20c>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	0018      	movs	r0, r3
 800260a:	f7fe fd31 	bl	8001070 <HAL_InitTick>
 800260e:	0003      	movs	r3, r0
}
 8002610:	0018      	movs	r0, r3
 8002612:	46bd      	mov	sp, r7
 8002614:	b004      	add	sp, #16
 8002616:	bd80      	pop	{r7, pc}
 8002618:	40022000 	.word	0x40022000
 800261c:	00001388 	.word	0x00001388
 8002620:	40021000 	.word	0x40021000
 8002624:	fffff0ff 	.word	0xfffff0ff
 8002628:	ffff8fff 	.word	0xffff8fff
 800262c:	08003874 	.word	0x08003874
 8002630:	20000004 	.word	0x20000004
 8002634:	20000008 	.word	0x20000008

08002638 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b086      	sub	sp, #24
 800263c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800263e:	4b3c      	ldr	r3, [pc, #240]	@ (8002730 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002640:	689b      	ldr	r3, [r3, #8]
 8002642:	2238      	movs	r2, #56	@ 0x38
 8002644:	4013      	ands	r3, r2
 8002646:	d10f      	bne.n	8002668 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8002648:	4b39      	ldr	r3, [pc, #228]	@ (8002730 <HAL_RCC_GetSysClockFreq+0xf8>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	0adb      	lsrs	r3, r3, #11
 800264e:	2207      	movs	r2, #7
 8002650:	4013      	ands	r3, r2
 8002652:	2201      	movs	r2, #1
 8002654:	409a      	lsls	r2, r3
 8002656:	0013      	movs	r3, r2
 8002658:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800265a:	6839      	ldr	r1, [r7, #0]
 800265c:	4835      	ldr	r0, [pc, #212]	@ (8002734 <HAL_RCC_GetSysClockFreq+0xfc>)
 800265e:	f7fd fd51 	bl	8000104 <__udivsi3>
 8002662:	0003      	movs	r3, r0
 8002664:	613b      	str	r3, [r7, #16]
 8002666:	e05d      	b.n	8002724 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002668:	4b31      	ldr	r3, [pc, #196]	@ (8002730 <HAL_RCC_GetSysClockFreq+0xf8>)
 800266a:	689b      	ldr	r3, [r3, #8]
 800266c:	2238      	movs	r2, #56	@ 0x38
 800266e:	4013      	ands	r3, r2
 8002670:	2b08      	cmp	r3, #8
 8002672:	d102      	bne.n	800267a <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002674:	4b30      	ldr	r3, [pc, #192]	@ (8002738 <HAL_RCC_GetSysClockFreq+0x100>)
 8002676:	613b      	str	r3, [r7, #16]
 8002678:	e054      	b.n	8002724 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800267a:	4b2d      	ldr	r3, [pc, #180]	@ (8002730 <HAL_RCC_GetSysClockFreq+0xf8>)
 800267c:	689b      	ldr	r3, [r3, #8]
 800267e:	2238      	movs	r2, #56	@ 0x38
 8002680:	4013      	ands	r3, r2
 8002682:	2b10      	cmp	r3, #16
 8002684:	d138      	bne.n	80026f8 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8002686:	4b2a      	ldr	r3, [pc, #168]	@ (8002730 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002688:	68db      	ldr	r3, [r3, #12]
 800268a:	2203      	movs	r2, #3
 800268c:	4013      	ands	r3, r2
 800268e:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002690:	4b27      	ldr	r3, [pc, #156]	@ (8002730 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002692:	68db      	ldr	r3, [r3, #12]
 8002694:	091b      	lsrs	r3, r3, #4
 8002696:	2207      	movs	r2, #7
 8002698:	4013      	ands	r3, r2
 800269a:	3301      	adds	r3, #1
 800269c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	2b03      	cmp	r3, #3
 80026a2:	d10d      	bne.n	80026c0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80026a4:	68b9      	ldr	r1, [r7, #8]
 80026a6:	4824      	ldr	r0, [pc, #144]	@ (8002738 <HAL_RCC_GetSysClockFreq+0x100>)
 80026a8:	f7fd fd2c 	bl	8000104 <__udivsi3>
 80026ac:	0003      	movs	r3, r0
 80026ae:	0019      	movs	r1, r3
 80026b0:	4b1f      	ldr	r3, [pc, #124]	@ (8002730 <HAL_RCC_GetSysClockFreq+0xf8>)
 80026b2:	68db      	ldr	r3, [r3, #12]
 80026b4:	0a1b      	lsrs	r3, r3, #8
 80026b6:	227f      	movs	r2, #127	@ 0x7f
 80026b8:	4013      	ands	r3, r2
 80026ba:	434b      	muls	r3, r1
 80026bc:	617b      	str	r3, [r7, #20]
        break;
 80026be:	e00d      	b.n	80026dc <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80026c0:	68b9      	ldr	r1, [r7, #8]
 80026c2:	481c      	ldr	r0, [pc, #112]	@ (8002734 <HAL_RCC_GetSysClockFreq+0xfc>)
 80026c4:	f7fd fd1e 	bl	8000104 <__udivsi3>
 80026c8:	0003      	movs	r3, r0
 80026ca:	0019      	movs	r1, r3
 80026cc:	4b18      	ldr	r3, [pc, #96]	@ (8002730 <HAL_RCC_GetSysClockFreq+0xf8>)
 80026ce:	68db      	ldr	r3, [r3, #12]
 80026d0:	0a1b      	lsrs	r3, r3, #8
 80026d2:	227f      	movs	r2, #127	@ 0x7f
 80026d4:	4013      	ands	r3, r2
 80026d6:	434b      	muls	r3, r1
 80026d8:	617b      	str	r3, [r7, #20]
        break;
 80026da:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80026dc:	4b14      	ldr	r3, [pc, #80]	@ (8002730 <HAL_RCC_GetSysClockFreq+0xf8>)
 80026de:	68db      	ldr	r3, [r3, #12]
 80026e0:	0f5b      	lsrs	r3, r3, #29
 80026e2:	2207      	movs	r2, #7
 80026e4:	4013      	ands	r3, r2
 80026e6:	3301      	adds	r3, #1
 80026e8:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80026ea:	6879      	ldr	r1, [r7, #4]
 80026ec:	6978      	ldr	r0, [r7, #20]
 80026ee:	f7fd fd09 	bl	8000104 <__udivsi3>
 80026f2:	0003      	movs	r3, r0
 80026f4:	613b      	str	r3, [r7, #16]
 80026f6:	e015      	b.n	8002724 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80026f8:	4b0d      	ldr	r3, [pc, #52]	@ (8002730 <HAL_RCC_GetSysClockFreq+0xf8>)
 80026fa:	689b      	ldr	r3, [r3, #8]
 80026fc:	2238      	movs	r2, #56	@ 0x38
 80026fe:	4013      	ands	r3, r2
 8002700:	2b20      	cmp	r3, #32
 8002702:	d103      	bne.n	800270c <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8002704:	2380      	movs	r3, #128	@ 0x80
 8002706:	021b      	lsls	r3, r3, #8
 8002708:	613b      	str	r3, [r7, #16]
 800270a:	e00b      	b.n	8002724 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800270c:	4b08      	ldr	r3, [pc, #32]	@ (8002730 <HAL_RCC_GetSysClockFreq+0xf8>)
 800270e:	689b      	ldr	r3, [r3, #8]
 8002710:	2238      	movs	r2, #56	@ 0x38
 8002712:	4013      	ands	r3, r2
 8002714:	2b18      	cmp	r3, #24
 8002716:	d103      	bne.n	8002720 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8002718:	23fa      	movs	r3, #250	@ 0xfa
 800271a:	01db      	lsls	r3, r3, #7
 800271c:	613b      	str	r3, [r7, #16]
 800271e:	e001      	b.n	8002724 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8002720:	2300      	movs	r3, #0
 8002722:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002724:	693b      	ldr	r3, [r7, #16]
}
 8002726:	0018      	movs	r0, r3
 8002728:	46bd      	mov	sp, r7
 800272a:	b006      	add	sp, #24
 800272c:	bd80      	pop	{r7, pc}
 800272e:	46c0      	nop			@ (mov r8, r8)
 8002730:	40021000 	.word	0x40021000
 8002734:	00f42400 	.word	0x00f42400
 8002738:	007a1200 	.word	0x007a1200

0800273c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002740:	4b02      	ldr	r3, [pc, #8]	@ (800274c <HAL_RCC_GetHCLKFreq+0x10>)
 8002742:	681b      	ldr	r3, [r3, #0]
}
 8002744:	0018      	movs	r0, r3
 8002746:	46bd      	mov	sp, r7
 8002748:	bd80      	pop	{r7, pc}
 800274a:	46c0      	nop			@ (mov r8, r8)
 800274c:	20000004 	.word	0x20000004

08002750 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b082      	sub	sp, #8
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2b00      	cmp	r3, #0
 800275c:	d101      	bne.n	8002762 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800275e:	2301      	movs	r3, #1
 8002760:	e04a      	b.n	80027f8 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	223d      	movs	r2, #61	@ 0x3d
 8002766:	5c9b      	ldrb	r3, [r3, r2]
 8002768:	b2db      	uxtb	r3, r3
 800276a:	2b00      	cmp	r3, #0
 800276c:	d107      	bne.n	800277e <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	223c      	movs	r2, #60	@ 0x3c
 8002772:	2100      	movs	r1, #0
 8002774:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	0018      	movs	r0, r3
 800277a:	f7fe fb95 	bl	8000ea8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	223d      	movs	r2, #61	@ 0x3d
 8002782:	2102      	movs	r1, #2
 8002784:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681a      	ldr	r2, [r3, #0]
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	3304      	adds	r3, #4
 800278e:	0019      	movs	r1, r3
 8002790:	0010      	movs	r0, r2
 8002792:	f000 fc8b 	bl	80030ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2248      	movs	r2, #72	@ 0x48
 800279a:	2101      	movs	r1, #1
 800279c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	223e      	movs	r2, #62	@ 0x3e
 80027a2:	2101      	movs	r1, #1
 80027a4:	5499      	strb	r1, [r3, r2]
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	223f      	movs	r2, #63	@ 0x3f
 80027aa:	2101      	movs	r1, #1
 80027ac:	5499      	strb	r1, [r3, r2]
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	2240      	movs	r2, #64	@ 0x40
 80027b2:	2101      	movs	r1, #1
 80027b4:	5499      	strb	r1, [r3, r2]
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	2241      	movs	r2, #65	@ 0x41
 80027ba:	2101      	movs	r1, #1
 80027bc:	5499      	strb	r1, [r3, r2]
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	2242      	movs	r2, #66	@ 0x42
 80027c2:	2101      	movs	r1, #1
 80027c4:	5499      	strb	r1, [r3, r2]
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	2243      	movs	r2, #67	@ 0x43
 80027ca:	2101      	movs	r1, #1
 80027cc:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	2244      	movs	r2, #68	@ 0x44
 80027d2:	2101      	movs	r1, #1
 80027d4:	5499      	strb	r1, [r3, r2]
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	2245      	movs	r2, #69	@ 0x45
 80027da:	2101      	movs	r1, #1
 80027dc:	5499      	strb	r1, [r3, r2]
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	2246      	movs	r2, #70	@ 0x46
 80027e2:	2101      	movs	r1, #1
 80027e4:	5499      	strb	r1, [r3, r2]
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	2247      	movs	r2, #71	@ 0x47
 80027ea:	2101      	movs	r1, #1
 80027ec:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	223d      	movs	r2, #61	@ 0x3d
 80027f2:	2101      	movs	r1, #1
 80027f4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80027f6:	2300      	movs	r3, #0
}
 80027f8:	0018      	movs	r0, r3
 80027fa:	46bd      	mov	sp, r7
 80027fc:	b002      	add	sp, #8
 80027fe:	bd80      	pop	{r7, pc}

08002800 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b082      	sub	sp, #8
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
 8002808:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	6839      	ldr	r1, [r7, #0]
 8002810:	2200      	movs	r2, #0
 8002812:	0018      	movs	r0, r3
 8002814:	f000 ff6a 	bl	80036ec <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4a35      	ldr	r2, [pc, #212]	@ (80028f4 <HAL_TIM_PWM_Stop+0xf4>)
 800281e:	4293      	cmp	r3, r2
 8002820:	d009      	beq.n	8002836 <HAL_TIM_PWM_Stop+0x36>
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	4a34      	ldr	r2, [pc, #208]	@ (80028f8 <HAL_TIM_PWM_Stop+0xf8>)
 8002828:	4293      	cmp	r3, r2
 800282a:	d004      	beq.n	8002836 <HAL_TIM_PWM_Stop+0x36>
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4a32      	ldr	r2, [pc, #200]	@ (80028fc <HAL_TIM_PWM_Stop+0xfc>)
 8002832:	4293      	cmp	r3, r2
 8002834:	d101      	bne.n	800283a <HAL_TIM_PWM_Stop+0x3a>
 8002836:	2301      	movs	r3, #1
 8002838:	e000      	b.n	800283c <HAL_TIM_PWM_Stop+0x3c>
 800283a:	2300      	movs	r3, #0
 800283c:	2b00      	cmp	r3, #0
 800283e:	d013      	beq.n	8002868 <HAL_TIM_PWM_Stop+0x68>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	6a1b      	ldr	r3, [r3, #32]
 8002846:	4a2e      	ldr	r2, [pc, #184]	@ (8002900 <HAL_TIM_PWM_Stop+0x100>)
 8002848:	4013      	ands	r3, r2
 800284a:	d10d      	bne.n	8002868 <HAL_TIM_PWM_Stop+0x68>
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	6a1b      	ldr	r3, [r3, #32]
 8002852:	4a2c      	ldr	r2, [pc, #176]	@ (8002904 <HAL_TIM_PWM_Stop+0x104>)
 8002854:	4013      	ands	r3, r2
 8002856:	d107      	bne.n	8002868 <HAL_TIM_PWM_Stop+0x68>
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4929      	ldr	r1, [pc, #164]	@ (8002908 <HAL_TIM_PWM_Stop+0x108>)
 8002864:	400a      	ands	r2, r1
 8002866:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	6a1b      	ldr	r3, [r3, #32]
 800286e:	4a24      	ldr	r2, [pc, #144]	@ (8002900 <HAL_TIM_PWM_Stop+0x100>)
 8002870:	4013      	ands	r3, r2
 8002872:	d10d      	bne.n	8002890 <HAL_TIM_PWM_Stop+0x90>
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	6a1b      	ldr	r3, [r3, #32]
 800287a:	4a22      	ldr	r2, [pc, #136]	@ (8002904 <HAL_TIM_PWM_Stop+0x104>)
 800287c:	4013      	ands	r3, r2
 800287e:	d107      	bne.n	8002890 <HAL_TIM_PWM_Stop+0x90>
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	681a      	ldr	r2, [r3, #0]
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	2101      	movs	r1, #1
 800288c:	438a      	bics	r2, r1
 800288e:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	2b00      	cmp	r3, #0
 8002894:	d104      	bne.n	80028a0 <HAL_TIM_PWM_Stop+0xa0>
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	223e      	movs	r2, #62	@ 0x3e
 800289a:	2101      	movs	r1, #1
 800289c:	5499      	strb	r1, [r3, r2]
 800289e:	e023      	b.n	80028e8 <HAL_TIM_PWM_Stop+0xe8>
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	2b04      	cmp	r3, #4
 80028a4:	d104      	bne.n	80028b0 <HAL_TIM_PWM_Stop+0xb0>
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	223f      	movs	r2, #63	@ 0x3f
 80028aa:	2101      	movs	r1, #1
 80028ac:	5499      	strb	r1, [r3, r2]
 80028ae:	e01b      	b.n	80028e8 <HAL_TIM_PWM_Stop+0xe8>
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	2b08      	cmp	r3, #8
 80028b4:	d104      	bne.n	80028c0 <HAL_TIM_PWM_Stop+0xc0>
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	2240      	movs	r2, #64	@ 0x40
 80028ba:	2101      	movs	r1, #1
 80028bc:	5499      	strb	r1, [r3, r2]
 80028be:	e013      	b.n	80028e8 <HAL_TIM_PWM_Stop+0xe8>
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	2b0c      	cmp	r3, #12
 80028c4:	d104      	bne.n	80028d0 <HAL_TIM_PWM_Stop+0xd0>
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2241      	movs	r2, #65	@ 0x41
 80028ca:	2101      	movs	r1, #1
 80028cc:	5499      	strb	r1, [r3, r2]
 80028ce:	e00b      	b.n	80028e8 <HAL_TIM_PWM_Stop+0xe8>
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	2b10      	cmp	r3, #16
 80028d4:	d104      	bne.n	80028e0 <HAL_TIM_PWM_Stop+0xe0>
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	2242      	movs	r2, #66	@ 0x42
 80028da:	2101      	movs	r1, #1
 80028dc:	5499      	strb	r1, [r3, r2]
 80028de:	e003      	b.n	80028e8 <HAL_TIM_PWM_Stop+0xe8>
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2243      	movs	r2, #67	@ 0x43
 80028e4:	2101      	movs	r1, #1
 80028e6:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 80028e8:	2300      	movs	r3, #0
}
 80028ea:	0018      	movs	r0, r3
 80028ec:	46bd      	mov	sp, r7
 80028ee:	b002      	add	sp, #8
 80028f0:	bd80      	pop	{r7, pc}
 80028f2:	46c0      	nop			@ (mov r8, r8)
 80028f4:	40012c00 	.word	0x40012c00
 80028f8:	40014400 	.word	0x40014400
 80028fc:	40014800 	.word	0x40014800
 8002900:	00001111 	.word	0x00001111
 8002904:	00000444 	.word	0x00000444
 8002908:	ffff7fff 	.word	0xffff7fff

0800290c <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b086      	sub	sp, #24
 8002910:	af00      	add	r7, sp, #0
 8002912:	60f8      	str	r0, [r7, #12]
 8002914:	60b9      	str	r1, [r7, #8]
 8002916:	607a      	str	r2, [r7, #4]
 8002918:	001a      	movs	r2, r3
 800291a:	1cbb      	adds	r3, r7, #2
 800291c:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800291e:	2317      	movs	r3, #23
 8002920:	18fb      	adds	r3, r7, r3
 8002922:	2200      	movs	r2, #0
 8002924:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8002926:	68bb      	ldr	r3, [r7, #8]
 8002928:	2b00      	cmp	r3, #0
 800292a:	d108      	bne.n	800293e <HAL_TIM_PWM_Start_DMA+0x32>
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	223e      	movs	r2, #62	@ 0x3e
 8002930:	5c9b      	ldrb	r3, [r3, r2]
 8002932:	b2db      	uxtb	r3, r3
 8002934:	3b02      	subs	r3, #2
 8002936:	425a      	negs	r2, r3
 8002938:	4153      	adcs	r3, r2
 800293a:	b2db      	uxtb	r3, r3
 800293c:	e037      	b.n	80029ae <HAL_TIM_PWM_Start_DMA+0xa2>
 800293e:	68bb      	ldr	r3, [r7, #8]
 8002940:	2b04      	cmp	r3, #4
 8002942:	d108      	bne.n	8002956 <HAL_TIM_PWM_Start_DMA+0x4a>
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	223f      	movs	r2, #63	@ 0x3f
 8002948:	5c9b      	ldrb	r3, [r3, r2]
 800294a:	b2db      	uxtb	r3, r3
 800294c:	3b02      	subs	r3, #2
 800294e:	425a      	negs	r2, r3
 8002950:	4153      	adcs	r3, r2
 8002952:	b2db      	uxtb	r3, r3
 8002954:	e02b      	b.n	80029ae <HAL_TIM_PWM_Start_DMA+0xa2>
 8002956:	68bb      	ldr	r3, [r7, #8]
 8002958:	2b08      	cmp	r3, #8
 800295a:	d108      	bne.n	800296e <HAL_TIM_PWM_Start_DMA+0x62>
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	2240      	movs	r2, #64	@ 0x40
 8002960:	5c9b      	ldrb	r3, [r3, r2]
 8002962:	b2db      	uxtb	r3, r3
 8002964:	3b02      	subs	r3, #2
 8002966:	425a      	negs	r2, r3
 8002968:	4153      	adcs	r3, r2
 800296a:	b2db      	uxtb	r3, r3
 800296c:	e01f      	b.n	80029ae <HAL_TIM_PWM_Start_DMA+0xa2>
 800296e:	68bb      	ldr	r3, [r7, #8]
 8002970:	2b0c      	cmp	r3, #12
 8002972:	d108      	bne.n	8002986 <HAL_TIM_PWM_Start_DMA+0x7a>
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	2241      	movs	r2, #65	@ 0x41
 8002978:	5c9b      	ldrb	r3, [r3, r2]
 800297a:	b2db      	uxtb	r3, r3
 800297c:	3b02      	subs	r3, #2
 800297e:	425a      	negs	r2, r3
 8002980:	4153      	adcs	r3, r2
 8002982:	b2db      	uxtb	r3, r3
 8002984:	e013      	b.n	80029ae <HAL_TIM_PWM_Start_DMA+0xa2>
 8002986:	68bb      	ldr	r3, [r7, #8]
 8002988:	2b10      	cmp	r3, #16
 800298a:	d108      	bne.n	800299e <HAL_TIM_PWM_Start_DMA+0x92>
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	2242      	movs	r2, #66	@ 0x42
 8002990:	5c9b      	ldrb	r3, [r3, r2]
 8002992:	b2db      	uxtb	r3, r3
 8002994:	3b02      	subs	r3, #2
 8002996:	425a      	negs	r2, r3
 8002998:	4153      	adcs	r3, r2
 800299a:	b2db      	uxtb	r3, r3
 800299c:	e007      	b.n	80029ae <HAL_TIM_PWM_Start_DMA+0xa2>
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	2243      	movs	r2, #67	@ 0x43
 80029a2:	5c9b      	ldrb	r3, [r3, r2]
 80029a4:	b2db      	uxtb	r3, r3
 80029a6:	3b02      	subs	r3, #2
 80029a8:	425a      	negs	r2, r3
 80029aa:	4153      	adcs	r3, r2
 80029ac:	b2db      	uxtb	r3, r3
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d001      	beq.n	80029b6 <HAL_TIM_PWM_Start_DMA+0xaa>
  {
    return HAL_BUSY;
 80029b2:	2302      	movs	r3, #2
 80029b4:	e189      	b.n	8002cca <HAL_TIM_PWM_Start_DMA+0x3be>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 80029b6:	68bb      	ldr	r3, [r7, #8]
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d108      	bne.n	80029ce <HAL_TIM_PWM_Start_DMA+0xc2>
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	223e      	movs	r2, #62	@ 0x3e
 80029c0:	5c9b      	ldrb	r3, [r3, r2]
 80029c2:	b2db      	uxtb	r3, r3
 80029c4:	3b01      	subs	r3, #1
 80029c6:	425a      	negs	r2, r3
 80029c8:	4153      	adcs	r3, r2
 80029ca:	b2db      	uxtb	r3, r3
 80029cc:	e037      	b.n	8002a3e <HAL_TIM_PWM_Start_DMA+0x132>
 80029ce:	68bb      	ldr	r3, [r7, #8]
 80029d0:	2b04      	cmp	r3, #4
 80029d2:	d108      	bne.n	80029e6 <HAL_TIM_PWM_Start_DMA+0xda>
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	223f      	movs	r2, #63	@ 0x3f
 80029d8:	5c9b      	ldrb	r3, [r3, r2]
 80029da:	b2db      	uxtb	r3, r3
 80029dc:	3b01      	subs	r3, #1
 80029de:	425a      	negs	r2, r3
 80029e0:	4153      	adcs	r3, r2
 80029e2:	b2db      	uxtb	r3, r3
 80029e4:	e02b      	b.n	8002a3e <HAL_TIM_PWM_Start_DMA+0x132>
 80029e6:	68bb      	ldr	r3, [r7, #8]
 80029e8:	2b08      	cmp	r3, #8
 80029ea:	d108      	bne.n	80029fe <HAL_TIM_PWM_Start_DMA+0xf2>
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	2240      	movs	r2, #64	@ 0x40
 80029f0:	5c9b      	ldrb	r3, [r3, r2]
 80029f2:	b2db      	uxtb	r3, r3
 80029f4:	3b01      	subs	r3, #1
 80029f6:	425a      	negs	r2, r3
 80029f8:	4153      	adcs	r3, r2
 80029fa:	b2db      	uxtb	r3, r3
 80029fc:	e01f      	b.n	8002a3e <HAL_TIM_PWM_Start_DMA+0x132>
 80029fe:	68bb      	ldr	r3, [r7, #8]
 8002a00:	2b0c      	cmp	r3, #12
 8002a02:	d108      	bne.n	8002a16 <HAL_TIM_PWM_Start_DMA+0x10a>
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	2241      	movs	r2, #65	@ 0x41
 8002a08:	5c9b      	ldrb	r3, [r3, r2]
 8002a0a:	b2db      	uxtb	r3, r3
 8002a0c:	3b01      	subs	r3, #1
 8002a0e:	425a      	negs	r2, r3
 8002a10:	4153      	adcs	r3, r2
 8002a12:	b2db      	uxtb	r3, r3
 8002a14:	e013      	b.n	8002a3e <HAL_TIM_PWM_Start_DMA+0x132>
 8002a16:	68bb      	ldr	r3, [r7, #8]
 8002a18:	2b10      	cmp	r3, #16
 8002a1a:	d108      	bne.n	8002a2e <HAL_TIM_PWM_Start_DMA+0x122>
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	2242      	movs	r2, #66	@ 0x42
 8002a20:	5c9b      	ldrb	r3, [r3, r2]
 8002a22:	b2db      	uxtb	r3, r3
 8002a24:	3b01      	subs	r3, #1
 8002a26:	425a      	negs	r2, r3
 8002a28:	4153      	adcs	r3, r2
 8002a2a:	b2db      	uxtb	r3, r3
 8002a2c:	e007      	b.n	8002a3e <HAL_TIM_PWM_Start_DMA+0x132>
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	2243      	movs	r2, #67	@ 0x43
 8002a32:	5c9b      	ldrb	r3, [r3, r2]
 8002a34:	b2db      	uxtb	r3, r3
 8002a36:	3b01      	subs	r3, #1
 8002a38:	425a      	negs	r2, r3
 8002a3a:	4153      	adcs	r3, r2
 8002a3c:	b2db      	uxtb	r3, r3
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d035      	beq.n	8002aae <HAL_TIM_PWM_Start_DMA+0x1a2>
  {
    if ((pData == NULL) || (Length == 0U))
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d003      	beq.n	8002a50 <HAL_TIM_PWM_Start_DMA+0x144>
 8002a48:	1cbb      	adds	r3, r7, #2
 8002a4a:	881b      	ldrh	r3, [r3, #0]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d101      	bne.n	8002a54 <HAL_TIM_PWM_Start_DMA+0x148>
    {
      return HAL_ERROR;
 8002a50:	2301      	movs	r3, #1
 8002a52:	e13a      	b.n	8002cca <HAL_TIM_PWM_Start_DMA+0x3be>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002a54:	68bb      	ldr	r3, [r7, #8]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d104      	bne.n	8002a64 <HAL_TIM_PWM_Start_DMA+0x158>
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	223e      	movs	r2, #62	@ 0x3e
 8002a5e:	2102      	movs	r1, #2
 8002a60:	5499      	strb	r1, [r3, r2]
 8002a62:	e026      	b.n	8002ab2 <HAL_TIM_PWM_Start_DMA+0x1a6>
 8002a64:	68bb      	ldr	r3, [r7, #8]
 8002a66:	2b04      	cmp	r3, #4
 8002a68:	d104      	bne.n	8002a74 <HAL_TIM_PWM_Start_DMA+0x168>
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	223f      	movs	r2, #63	@ 0x3f
 8002a6e:	2102      	movs	r1, #2
 8002a70:	5499      	strb	r1, [r3, r2]
 8002a72:	e01e      	b.n	8002ab2 <HAL_TIM_PWM_Start_DMA+0x1a6>
 8002a74:	68bb      	ldr	r3, [r7, #8]
 8002a76:	2b08      	cmp	r3, #8
 8002a78:	d104      	bne.n	8002a84 <HAL_TIM_PWM_Start_DMA+0x178>
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	2240      	movs	r2, #64	@ 0x40
 8002a7e:	2102      	movs	r1, #2
 8002a80:	5499      	strb	r1, [r3, r2]
 8002a82:	e016      	b.n	8002ab2 <HAL_TIM_PWM_Start_DMA+0x1a6>
 8002a84:	68bb      	ldr	r3, [r7, #8]
 8002a86:	2b0c      	cmp	r3, #12
 8002a88:	d104      	bne.n	8002a94 <HAL_TIM_PWM_Start_DMA+0x188>
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	2241      	movs	r2, #65	@ 0x41
 8002a8e:	2102      	movs	r1, #2
 8002a90:	5499      	strb	r1, [r3, r2]
 8002a92:	e00e      	b.n	8002ab2 <HAL_TIM_PWM_Start_DMA+0x1a6>
 8002a94:	68bb      	ldr	r3, [r7, #8]
 8002a96:	2b10      	cmp	r3, #16
 8002a98:	d104      	bne.n	8002aa4 <HAL_TIM_PWM_Start_DMA+0x198>
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	2242      	movs	r2, #66	@ 0x42
 8002a9e:	2102      	movs	r1, #2
 8002aa0:	5499      	strb	r1, [r3, r2]
 8002aa2:	e006      	b.n	8002ab2 <HAL_TIM_PWM_Start_DMA+0x1a6>
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	2243      	movs	r2, #67	@ 0x43
 8002aa8:	2102      	movs	r1, #2
 8002aaa:	5499      	strb	r1, [r3, r2]
 8002aac:	e001      	b.n	8002ab2 <HAL_TIM_PWM_Start_DMA+0x1a6>
    }
  }
  else
  {
    return HAL_ERROR;
 8002aae:	2301      	movs	r3, #1
 8002ab0:	e10b      	b.n	8002cca <HAL_TIM_PWM_Start_DMA+0x3be>
  }

  switch (Channel)
 8002ab2:	68bb      	ldr	r3, [r7, #8]
 8002ab4:	2b0c      	cmp	r3, #12
 8002ab6:	d100      	bne.n	8002aba <HAL_TIM_PWM_Start_DMA+0x1ae>
 8002ab8:	e080      	b.n	8002bbc <HAL_TIM_PWM_Start_DMA+0x2b0>
 8002aba:	68bb      	ldr	r3, [r7, #8]
 8002abc:	2b0c      	cmp	r3, #12
 8002abe:	d900      	bls.n	8002ac2 <HAL_TIM_PWM_Start_DMA+0x1b6>
 8002ac0:	e0a1      	b.n	8002c06 <HAL_TIM_PWM_Start_DMA+0x2fa>
 8002ac2:	68bb      	ldr	r3, [r7, #8]
 8002ac4:	2b08      	cmp	r3, #8
 8002ac6:	d054      	beq.n	8002b72 <HAL_TIM_PWM_Start_DMA+0x266>
 8002ac8:	68bb      	ldr	r3, [r7, #8]
 8002aca:	2b08      	cmp	r3, #8
 8002acc:	d900      	bls.n	8002ad0 <HAL_TIM_PWM_Start_DMA+0x1c4>
 8002ace:	e09a      	b.n	8002c06 <HAL_TIM_PWM_Start_DMA+0x2fa>
 8002ad0:	68bb      	ldr	r3, [r7, #8]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d003      	beq.n	8002ade <HAL_TIM_PWM_Start_DMA+0x1d2>
 8002ad6:	68bb      	ldr	r3, [r7, #8]
 8002ad8:	2b04      	cmp	r3, #4
 8002ada:	d025      	beq.n	8002b28 <HAL_TIM_PWM_Start_DMA+0x21c>
 8002adc:	e093      	b.n	8002c06 <HAL_TIM_PWM_Start_DMA+0x2fa>
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ae2:	4a7c      	ldr	r2, [pc, #496]	@ (8002cd4 <HAL_TIM_PWM_Start_DMA+0x3c8>)
 8002ae4:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002aea:	4a7b      	ldr	r2, [pc, #492]	@ (8002cd8 <HAL_TIM_PWM_Start_DMA+0x3cc>)
 8002aec:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002af2:	4a7a      	ldr	r2, [pc, #488]	@ (8002cdc <HAL_TIM_PWM_Start_DMA+0x3d0>)
 8002af4:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8002afa:	6879      	ldr	r1, [r7, #4]
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	3334      	adds	r3, #52	@ 0x34
 8002b02:	001a      	movs	r2, r3
 8002b04:	1cbb      	adds	r3, r7, #2
 8002b06:	881b      	ldrh	r3, [r3, #0]
 8002b08:	f7fe fd1c 	bl	8001544 <HAL_DMA_Start_IT>
 8002b0c:	1e03      	subs	r3, r0, #0
 8002b0e:	d001      	beq.n	8002b14 <HAL_TIM_PWM_Start_DMA+0x208>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8002b10:	2301      	movs	r3, #1
 8002b12:	e0da      	b.n	8002cca <HAL_TIM_PWM_Start_DMA+0x3be>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	68da      	ldr	r2, [r3, #12]
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	2180      	movs	r1, #128	@ 0x80
 8002b20:	0089      	lsls	r1, r1, #2
 8002b22:	430a      	orrs	r2, r1
 8002b24:	60da      	str	r2, [r3, #12]
      break;
 8002b26:	e073      	b.n	8002c10 <HAL_TIM_PWM_Start_DMA+0x304>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b2c:	4a69      	ldr	r2, [pc, #420]	@ (8002cd4 <HAL_TIM_PWM_Start_DMA+0x3c8>)
 8002b2e:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b34:	4a68      	ldr	r2, [pc, #416]	@ (8002cd8 <HAL_TIM_PWM_Start_DMA+0x3cc>)
 8002b36:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b3c:	4a67      	ldr	r2, [pc, #412]	@ (8002cdc <HAL_TIM_PWM_Start_DMA+0x3d0>)
 8002b3e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8002b44:	6879      	ldr	r1, [r7, #4]
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	3338      	adds	r3, #56	@ 0x38
 8002b4c:	001a      	movs	r2, r3
 8002b4e:	1cbb      	adds	r3, r7, #2
 8002b50:	881b      	ldrh	r3, [r3, #0]
 8002b52:	f7fe fcf7 	bl	8001544 <HAL_DMA_Start_IT>
 8002b56:	1e03      	subs	r3, r0, #0
 8002b58:	d001      	beq.n	8002b5e <HAL_TIM_PWM_Start_DMA+0x252>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	e0b5      	b.n	8002cca <HAL_TIM_PWM_Start_DMA+0x3be>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	68da      	ldr	r2, [r3, #12]
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	2180      	movs	r1, #128	@ 0x80
 8002b6a:	00c9      	lsls	r1, r1, #3
 8002b6c:	430a      	orrs	r2, r1
 8002b6e:	60da      	str	r2, [r3, #12]
      break;
 8002b70:	e04e      	b.n	8002c10 <HAL_TIM_PWM_Start_DMA+0x304>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b76:	4a57      	ldr	r2, [pc, #348]	@ (8002cd4 <HAL_TIM_PWM_Start_DMA+0x3c8>)
 8002b78:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b7e:	4a56      	ldr	r2, [pc, #344]	@ (8002cd8 <HAL_TIM_PWM_Start_DMA+0x3cc>)
 8002b80:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b86:	4a55      	ldr	r2, [pc, #340]	@ (8002cdc <HAL_TIM_PWM_Start_DMA+0x3d0>)
 8002b88:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8002b8e:	6879      	ldr	r1, [r7, #4]
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	333c      	adds	r3, #60	@ 0x3c
 8002b96:	001a      	movs	r2, r3
 8002b98:	1cbb      	adds	r3, r7, #2
 8002b9a:	881b      	ldrh	r3, [r3, #0]
 8002b9c:	f7fe fcd2 	bl	8001544 <HAL_DMA_Start_IT>
 8002ba0:	1e03      	subs	r3, r0, #0
 8002ba2:	d001      	beq.n	8002ba8 <HAL_TIM_PWM_Start_DMA+0x29c>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8002ba4:	2301      	movs	r3, #1
 8002ba6:	e090      	b.n	8002cca <HAL_TIM_PWM_Start_DMA+0x3be>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	68da      	ldr	r2, [r3, #12]
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	2180      	movs	r1, #128	@ 0x80
 8002bb4:	0109      	lsls	r1, r1, #4
 8002bb6:	430a      	orrs	r2, r1
 8002bb8:	60da      	str	r2, [r3, #12]
      break;
 8002bba:	e029      	b.n	8002c10 <HAL_TIM_PWM_Start_DMA+0x304>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bc0:	4a44      	ldr	r2, [pc, #272]	@ (8002cd4 <HAL_TIM_PWM_Start_DMA+0x3c8>)
 8002bc2:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bc8:	4a43      	ldr	r2, [pc, #268]	@ (8002cd8 <HAL_TIM_PWM_Start_DMA+0x3cc>)
 8002bca:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bd0:	4a42      	ldr	r2, [pc, #264]	@ (8002cdc <HAL_TIM_PWM_Start_DMA+0x3d0>)
 8002bd2:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8002bd8:	6879      	ldr	r1, [r7, #4]
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	3340      	adds	r3, #64	@ 0x40
 8002be0:	001a      	movs	r2, r3
 8002be2:	1cbb      	adds	r3, r7, #2
 8002be4:	881b      	ldrh	r3, [r3, #0]
 8002be6:	f7fe fcad 	bl	8001544 <HAL_DMA_Start_IT>
 8002bea:	1e03      	subs	r3, r0, #0
 8002bec:	d001      	beq.n	8002bf2 <HAL_TIM_PWM_Start_DMA+0x2e6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8002bee:	2301      	movs	r3, #1
 8002bf0:	e06b      	b.n	8002cca <HAL_TIM_PWM_Start_DMA+0x3be>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	68da      	ldr	r2, [r3, #12]
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	2180      	movs	r1, #128	@ 0x80
 8002bfe:	0149      	lsls	r1, r1, #5
 8002c00:	430a      	orrs	r2, r1
 8002c02:	60da      	str	r2, [r3, #12]
      break;
 8002c04:	e004      	b.n	8002c10 <HAL_TIM_PWM_Start_DMA+0x304>
    }

    default:
      status = HAL_ERROR;
 8002c06:	2317      	movs	r3, #23
 8002c08:	18fb      	adds	r3, r7, r3
 8002c0a:	2201      	movs	r2, #1
 8002c0c:	701a      	strb	r2, [r3, #0]
      break;
 8002c0e:	46c0      	nop			@ (mov r8, r8)
  }

  if (status == HAL_OK)
 8002c10:	2317      	movs	r3, #23
 8002c12:	18fb      	adds	r3, r7, r3
 8002c14:	781b      	ldrb	r3, [r3, #0]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d154      	bne.n	8002cc4 <HAL_TIM_PWM_Start_DMA+0x3b8>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	68b9      	ldr	r1, [r7, #8]
 8002c20:	2201      	movs	r2, #1
 8002c22:	0018      	movs	r0, r3
 8002c24:	f000 fd62 	bl	80036ec <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4a2c      	ldr	r2, [pc, #176]	@ (8002ce0 <HAL_TIM_PWM_Start_DMA+0x3d4>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d009      	beq.n	8002c46 <HAL_TIM_PWM_Start_DMA+0x33a>
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	4a2b      	ldr	r2, [pc, #172]	@ (8002ce4 <HAL_TIM_PWM_Start_DMA+0x3d8>)
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	d004      	beq.n	8002c46 <HAL_TIM_PWM_Start_DMA+0x33a>
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4a29      	ldr	r2, [pc, #164]	@ (8002ce8 <HAL_TIM_PWM_Start_DMA+0x3dc>)
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d101      	bne.n	8002c4a <HAL_TIM_PWM_Start_DMA+0x33e>
 8002c46:	2301      	movs	r3, #1
 8002c48:	e000      	b.n	8002c4c <HAL_TIM_PWM_Start_DMA+0x340>
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d008      	beq.n	8002c62 <HAL_TIM_PWM_Start_DMA+0x356>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	2180      	movs	r1, #128	@ 0x80
 8002c5c:	0209      	lsls	r1, r1, #8
 8002c5e:	430a      	orrs	r2, r1
 8002c60:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	4a1e      	ldr	r2, [pc, #120]	@ (8002ce0 <HAL_TIM_PWM_Start_DMA+0x3d4>)
 8002c68:	4293      	cmp	r3, r2
 8002c6a:	d00a      	beq.n	8002c82 <HAL_TIM_PWM_Start_DMA+0x376>
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	681a      	ldr	r2, [r3, #0]
 8002c70:	2380      	movs	r3, #128	@ 0x80
 8002c72:	05db      	lsls	r3, r3, #23
 8002c74:	429a      	cmp	r2, r3
 8002c76:	d004      	beq.n	8002c82 <HAL_TIM_PWM_Start_DMA+0x376>
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4a1b      	ldr	r2, [pc, #108]	@ (8002cec <HAL_TIM_PWM_Start_DMA+0x3e0>)
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d116      	bne.n	8002cb0 <HAL_TIM_PWM_Start_DMA+0x3a4>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	689b      	ldr	r3, [r3, #8]
 8002c88:	4a19      	ldr	r2, [pc, #100]	@ (8002cf0 <HAL_TIM_PWM_Start_DMA+0x3e4>)
 8002c8a:	4013      	ands	r3, r2
 8002c8c:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c8e:	693b      	ldr	r3, [r7, #16]
 8002c90:	2b06      	cmp	r3, #6
 8002c92:	d016      	beq.n	8002cc2 <HAL_TIM_PWM_Start_DMA+0x3b6>
 8002c94:	693a      	ldr	r2, [r7, #16]
 8002c96:	2380      	movs	r3, #128	@ 0x80
 8002c98:	025b      	lsls	r3, r3, #9
 8002c9a:	429a      	cmp	r2, r3
 8002c9c:	d011      	beq.n	8002cc2 <HAL_TIM_PWM_Start_DMA+0x3b6>
      {
        __HAL_TIM_ENABLE(htim);
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	681a      	ldr	r2, [r3, #0]
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	2101      	movs	r1, #1
 8002caa:	430a      	orrs	r2, r1
 8002cac:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002cae:	e008      	b.n	8002cc2 <HAL_TIM_PWM_Start_DMA+0x3b6>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	681a      	ldr	r2, [r3, #0]
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	2101      	movs	r1, #1
 8002cbc:	430a      	orrs	r2, r1
 8002cbe:	601a      	str	r2, [r3, #0]
 8002cc0:	e000      	b.n	8002cc4 <HAL_TIM_PWM_Start_DMA+0x3b8>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002cc2:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Return function status */
  return status;
 8002cc4:	2317      	movs	r3, #23
 8002cc6:	18fb      	adds	r3, r7, r3
 8002cc8:	781b      	ldrb	r3, [r3, #0]
}
 8002cca:	0018      	movs	r0, r3
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	b006      	add	sp, #24
 8002cd0:	bd80      	pop	{r7, pc}
 8002cd2:	46c0      	nop			@ (mov r8, r8)
 8002cd4:	08002f99 	.word	0x08002f99
 8002cd8:	08003043 	.word	0x08003043
 8002cdc:	08002f05 	.word	0x08002f05
 8002ce0:	40012c00 	.word	0x40012c00
 8002ce4:	40014400 	.word	0x40014400
 8002ce8:	40014800 	.word	0x40014800
 8002cec:	40000400 	.word	0x40000400
 8002cf0:	00010007 	.word	0x00010007

08002cf4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b086      	sub	sp, #24
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	60f8      	str	r0, [r7, #12]
 8002cfc:	60b9      	str	r1, [r7, #8]
 8002cfe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d00:	2317      	movs	r3, #23
 8002d02:	18fb      	adds	r3, r7, r3
 8002d04:	2200      	movs	r2, #0
 8002d06:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	223c      	movs	r2, #60	@ 0x3c
 8002d0c:	5c9b      	ldrb	r3, [r3, r2]
 8002d0e:	2b01      	cmp	r3, #1
 8002d10:	d101      	bne.n	8002d16 <HAL_TIM_PWM_ConfigChannel+0x22>
 8002d12:	2302      	movs	r3, #2
 8002d14:	e0e5      	b.n	8002ee2 <HAL_TIM_PWM_ConfigChannel+0x1ee>
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	223c      	movs	r2, #60	@ 0x3c
 8002d1a:	2101      	movs	r1, #1
 8002d1c:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	2b14      	cmp	r3, #20
 8002d22:	d900      	bls.n	8002d26 <HAL_TIM_PWM_ConfigChannel+0x32>
 8002d24:	e0d1      	b.n	8002eca <HAL_TIM_PWM_ConfigChannel+0x1d6>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	009a      	lsls	r2, r3, #2
 8002d2a:	4b70      	ldr	r3, [pc, #448]	@ (8002eec <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8002d2c:	18d3      	adds	r3, r2, r3
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	68ba      	ldr	r2, [r7, #8]
 8002d38:	0011      	movs	r1, r2
 8002d3a:	0018      	movs	r0, r3
 8002d3c:	f000 fa3a 	bl	80031b4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	699a      	ldr	r2, [r3, #24]
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	2108      	movs	r1, #8
 8002d4c:	430a      	orrs	r2, r1
 8002d4e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	699a      	ldr	r2, [r3, #24]
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	2104      	movs	r1, #4
 8002d5c:	438a      	bics	r2, r1
 8002d5e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	6999      	ldr	r1, [r3, #24]
 8002d66:	68bb      	ldr	r3, [r7, #8]
 8002d68:	691a      	ldr	r2, [r3, #16]
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	430a      	orrs	r2, r1
 8002d70:	619a      	str	r2, [r3, #24]
      break;
 8002d72:	e0af      	b.n	8002ed4 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	68ba      	ldr	r2, [r7, #8]
 8002d7a:	0011      	movs	r1, r2
 8002d7c:	0018      	movs	r0, r3
 8002d7e:	f000 fa99 	bl	80032b4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	699a      	ldr	r2, [r3, #24]
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	2180      	movs	r1, #128	@ 0x80
 8002d8e:	0109      	lsls	r1, r1, #4
 8002d90:	430a      	orrs	r2, r1
 8002d92:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	699a      	ldr	r2, [r3, #24]
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	4954      	ldr	r1, [pc, #336]	@ (8002ef0 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8002da0:	400a      	ands	r2, r1
 8002da2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	6999      	ldr	r1, [r3, #24]
 8002daa:	68bb      	ldr	r3, [r7, #8]
 8002dac:	691b      	ldr	r3, [r3, #16]
 8002dae:	021a      	lsls	r2, r3, #8
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	430a      	orrs	r2, r1
 8002db6:	619a      	str	r2, [r3, #24]
      break;
 8002db8:	e08c      	b.n	8002ed4 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	68ba      	ldr	r2, [r7, #8]
 8002dc0:	0011      	movs	r1, r2
 8002dc2:	0018      	movs	r0, r3
 8002dc4:	f000 faf4 	bl	80033b0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	69da      	ldr	r2, [r3, #28]
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	2108      	movs	r1, #8
 8002dd4:	430a      	orrs	r2, r1
 8002dd6:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	69da      	ldr	r2, [r3, #28]
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	2104      	movs	r1, #4
 8002de4:	438a      	bics	r2, r1
 8002de6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	69d9      	ldr	r1, [r3, #28]
 8002dee:	68bb      	ldr	r3, [r7, #8]
 8002df0:	691a      	ldr	r2, [r3, #16]
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	430a      	orrs	r2, r1
 8002df8:	61da      	str	r2, [r3, #28]
      break;
 8002dfa:	e06b      	b.n	8002ed4 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	68ba      	ldr	r2, [r7, #8]
 8002e02:	0011      	movs	r1, r2
 8002e04:	0018      	movs	r0, r3
 8002e06:	f000 fb55 	bl	80034b4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	69da      	ldr	r2, [r3, #28]
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	2180      	movs	r1, #128	@ 0x80
 8002e16:	0109      	lsls	r1, r1, #4
 8002e18:	430a      	orrs	r2, r1
 8002e1a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	69da      	ldr	r2, [r3, #28]
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	4932      	ldr	r1, [pc, #200]	@ (8002ef0 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8002e28:	400a      	ands	r2, r1
 8002e2a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	69d9      	ldr	r1, [r3, #28]
 8002e32:	68bb      	ldr	r3, [r7, #8]
 8002e34:	691b      	ldr	r3, [r3, #16]
 8002e36:	021a      	lsls	r2, r3, #8
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	430a      	orrs	r2, r1
 8002e3e:	61da      	str	r2, [r3, #28]
      break;
 8002e40:	e048      	b.n	8002ed4 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	68ba      	ldr	r2, [r7, #8]
 8002e48:	0011      	movs	r1, r2
 8002e4a:	0018      	movs	r0, r3
 8002e4c:	f000 fb96 	bl	800357c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	2108      	movs	r1, #8
 8002e5c:	430a      	orrs	r2, r1
 8002e5e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	2104      	movs	r1, #4
 8002e6c:	438a      	bics	r2, r1
 8002e6e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8002e76:	68bb      	ldr	r3, [r7, #8]
 8002e78:	691a      	ldr	r2, [r3, #16]
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	430a      	orrs	r2, r1
 8002e80:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8002e82:	e027      	b.n	8002ed4 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	68ba      	ldr	r2, [r7, #8]
 8002e8a:	0011      	movs	r1, r2
 8002e8c:	0018      	movs	r0, r3
 8002e8e:	f000 fbcf 	bl	8003630 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	2180      	movs	r1, #128	@ 0x80
 8002e9e:	0109      	lsls	r1, r1, #4
 8002ea0:	430a      	orrs	r2, r1
 8002ea2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	4910      	ldr	r1, [pc, #64]	@ (8002ef0 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8002eb0:	400a      	ands	r2, r1
 8002eb2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8002eba:	68bb      	ldr	r3, [r7, #8]
 8002ebc:	691b      	ldr	r3, [r3, #16]
 8002ebe:	021a      	lsls	r2, r3, #8
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	430a      	orrs	r2, r1
 8002ec6:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8002ec8:	e004      	b.n	8002ed4 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 8002eca:	2317      	movs	r3, #23
 8002ecc:	18fb      	adds	r3, r7, r3
 8002ece:	2201      	movs	r2, #1
 8002ed0:	701a      	strb	r2, [r3, #0]
      break;
 8002ed2:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	223c      	movs	r2, #60	@ 0x3c
 8002ed8:	2100      	movs	r1, #0
 8002eda:	5499      	strb	r1, [r3, r2]

  return status;
 8002edc:	2317      	movs	r3, #23
 8002ede:	18fb      	adds	r3, r7, r3
 8002ee0:	781b      	ldrb	r3, [r3, #0]
}
 8002ee2:	0018      	movs	r0, r3
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	b006      	add	sp, #24
 8002ee8:	bd80      	pop	{r7, pc}
 8002eea:	46c0      	nop			@ (mov r8, r8)
 8002eec:	080038b4 	.word	0x080038b4
 8002ef0:	fffffbff 	.word	0xfffffbff

08002ef4 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b082      	sub	sp, #8
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8002efc:	46c0      	nop			@ (mov r8, r8)
 8002efe:	46bd      	mov	sp, r7
 8002f00:	b002      	add	sp, #8
 8002f02:	bd80      	pop	{r7, pc}

08002f04 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b084      	sub	sp, #16
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f10:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f16:	687a      	ldr	r2, [r7, #4]
 8002f18:	429a      	cmp	r2, r3
 8002f1a:	d107      	bne.n	8002f2c <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	2201      	movs	r2, #1
 8002f20:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	223e      	movs	r2, #62	@ 0x3e
 8002f26:	2101      	movs	r1, #1
 8002f28:	5499      	strb	r1, [r3, r2]
 8002f2a:	e02a      	b.n	8002f82 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f30:	687a      	ldr	r2, [r7, #4]
 8002f32:	429a      	cmp	r2, r3
 8002f34:	d107      	bne.n	8002f46 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	2202      	movs	r2, #2
 8002f3a:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	223f      	movs	r2, #63	@ 0x3f
 8002f40:	2101      	movs	r1, #1
 8002f42:	5499      	strb	r1, [r3, r2]
 8002f44:	e01d      	b.n	8002f82 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f4a:	687a      	ldr	r2, [r7, #4]
 8002f4c:	429a      	cmp	r2, r3
 8002f4e:	d107      	bne.n	8002f60 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	2204      	movs	r2, #4
 8002f54:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	2240      	movs	r2, #64	@ 0x40
 8002f5a:	2101      	movs	r1, #1
 8002f5c:	5499      	strb	r1, [r3, r2]
 8002f5e:	e010      	b.n	8002f82 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f64:	687a      	ldr	r2, [r7, #4]
 8002f66:	429a      	cmp	r2, r3
 8002f68:	d107      	bne.n	8002f7a <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	2208      	movs	r2, #8
 8002f6e:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	2241      	movs	r2, #65	@ 0x41
 8002f74:	2101      	movs	r1, #1
 8002f76:	5499      	strb	r1, [r3, r2]
 8002f78:	e003      	b.n	8002f82 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	223d      	movs	r2, #61	@ 0x3d
 8002f7e:	2101      	movs	r1, #1
 8002f80:	5499      	strb	r1, [r3, r2]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	0018      	movs	r0, r3
 8002f86:	f7ff ffb5 	bl	8002ef4 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	771a      	strb	r2, [r3, #28]
}
 8002f90:	46c0      	nop			@ (mov r8, r8)
 8002f92:	46bd      	mov	sp, r7
 8002f94:	b004      	add	sp, #16
 8002f96:	bd80      	pop	{r7, pc}

08002f98 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b084      	sub	sp, #16
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fa4:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002faa:	687a      	ldr	r2, [r7, #4]
 8002fac:	429a      	cmp	r2, r3
 8002fae:	d10b      	bne.n	8002fc8 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	2201      	movs	r2, #1
 8002fb4:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	69db      	ldr	r3, [r3, #28]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d136      	bne.n	800302c <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	223e      	movs	r2, #62	@ 0x3e
 8002fc2:	2101      	movs	r1, #1
 8002fc4:	5499      	strb	r1, [r3, r2]
 8002fc6:	e031      	b.n	800302c <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fcc:	687a      	ldr	r2, [r7, #4]
 8002fce:	429a      	cmp	r2, r3
 8002fd0:	d10b      	bne.n	8002fea <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	2202      	movs	r2, #2
 8002fd6:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	69db      	ldr	r3, [r3, #28]
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d125      	bne.n	800302c <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	223f      	movs	r2, #63	@ 0x3f
 8002fe4:	2101      	movs	r1, #1
 8002fe6:	5499      	strb	r1, [r3, r2]
 8002fe8:	e020      	b.n	800302c <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fee:	687a      	ldr	r2, [r7, #4]
 8002ff0:	429a      	cmp	r2, r3
 8002ff2:	d10b      	bne.n	800300c <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	2204      	movs	r2, #4
 8002ff8:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	69db      	ldr	r3, [r3, #28]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d114      	bne.n	800302c <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	2240      	movs	r2, #64	@ 0x40
 8003006:	2101      	movs	r1, #1
 8003008:	5499      	strb	r1, [r3, r2]
 800300a:	e00f      	b.n	800302c <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003010:	687a      	ldr	r2, [r7, #4]
 8003012:	429a      	cmp	r2, r3
 8003014:	d10a      	bne.n	800302c <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	2208      	movs	r2, #8
 800301a:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	69db      	ldr	r3, [r3, #28]
 8003020:	2b00      	cmp	r3, #0
 8003022:	d103      	bne.n	800302c <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	2241      	movs	r2, #65	@ 0x41
 8003028:	2101      	movs	r1, #1
 800302a:	5499      	strb	r1, [r3, r2]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	0018      	movs	r0, r3
 8003030:	f7fd fe26 	bl	8000c80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	2200      	movs	r2, #0
 8003038:	771a      	strb	r2, [r3, #28]
}
 800303a:	46c0      	nop			@ (mov r8, r8)
 800303c:	46bd      	mov	sp, r7
 800303e:	b004      	add	sp, #16
 8003040:	bd80      	pop	{r7, pc}

08003042 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003042:	b580      	push	{r7, lr}
 8003044:	b084      	sub	sp, #16
 8003046:	af00      	add	r7, sp, #0
 8003048:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800304e:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003054:	687a      	ldr	r2, [r7, #4]
 8003056:	429a      	cmp	r2, r3
 8003058:	d103      	bne.n	8003062 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	2201      	movs	r2, #1
 800305e:	771a      	strb	r2, [r3, #28]
 8003060:	e019      	b.n	8003096 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003066:	687a      	ldr	r2, [r7, #4]
 8003068:	429a      	cmp	r2, r3
 800306a:	d103      	bne.n	8003074 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	2202      	movs	r2, #2
 8003070:	771a      	strb	r2, [r3, #28]
 8003072:	e010      	b.n	8003096 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003078:	687a      	ldr	r2, [r7, #4]
 800307a:	429a      	cmp	r2, r3
 800307c:	d103      	bne.n	8003086 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	2204      	movs	r2, #4
 8003082:	771a      	strb	r2, [r3, #28]
 8003084:	e007      	b.n	8003096 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800308a:	687a      	ldr	r2, [r7, #4]
 800308c:	429a      	cmp	r2, r3
 800308e:	d102      	bne.n	8003096 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	2208      	movs	r2, #8
 8003094:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	0018      	movs	r0, r3
 800309a:	f7fd fe07 	bl	8000cac <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	2200      	movs	r2, #0
 80030a2:	771a      	strb	r2, [r3, #28]
}
 80030a4:	46c0      	nop			@ (mov r8, r8)
 80030a6:	46bd      	mov	sp, r7
 80030a8:	b004      	add	sp, #16
 80030aa:	bd80      	pop	{r7, pc}

080030ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b084      	sub	sp, #16
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
 80030b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	4a37      	ldr	r2, [pc, #220]	@ (800319c <TIM_Base_SetConfig+0xf0>)
 80030c0:	4293      	cmp	r3, r2
 80030c2:	d008      	beq.n	80030d6 <TIM_Base_SetConfig+0x2a>
 80030c4:	687a      	ldr	r2, [r7, #4]
 80030c6:	2380      	movs	r3, #128	@ 0x80
 80030c8:	05db      	lsls	r3, r3, #23
 80030ca:	429a      	cmp	r2, r3
 80030cc:	d003      	beq.n	80030d6 <TIM_Base_SetConfig+0x2a>
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	4a33      	ldr	r2, [pc, #204]	@ (80031a0 <TIM_Base_SetConfig+0xf4>)
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d108      	bne.n	80030e8 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	2270      	movs	r2, #112	@ 0x70
 80030da:	4393      	bics	r3, r2
 80030dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	685b      	ldr	r3, [r3, #4]
 80030e2:	68fa      	ldr	r2, [r7, #12]
 80030e4:	4313      	orrs	r3, r2
 80030e6:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	4a2c      	ldr	r2, [pc, #176]	@ (800319c <TIM_Base_SetConfig+0xf0>)
 80030ec:	4293      	cmp	r3, r2
 80030ee:	d014      	beq.n	800311a <TIM_Base_SetConfig+0x6e>
 80030f0:	687a      	ldr	r2, [r7, #4]
 80030f2:	2380      	movs	r3, #128	@ 0x80
 80030f4:	05db      	lsls	r3, r3, #23
 80030f6:	429a      	cmp	r2, r3
 80030f8:	d00f      	beq.n	800311a <TIM_Base_SetConfig+0x6e>
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	4a28      	ldr	r2, [pc, #160]	@ (80031a0 <TIM_Base_SetConfig+0xf4>)
 80030fe:	4293      	cmp	r3, r2
 8003100:	d00b      	beq.n	800311a <TIM_Base_SetConfig+0x6e>
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	4a27      	ldr	r2, [pc, #156]	@ (80031a4 <TIM_Base_SetConfig+0xf8>)
 8003106:	4293      	cmp	r3, r2
 8003108:	d007      	beq.n	800311a <TIM_Base_SetConfig+0x6e>
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	4a26      	ldr	r2, [pc, #152]	@ (80031a8 <TIM_Base_SetConfig+0xfc>)
 800310e:	4293      	cmp	r3, r2
 8003110:	d003      	beq.n	800311a <TIM_Base_SetConfig+0x6e>
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	4a25      	ldr	r2, [pc, #148]	@ (80031ac <TIM_Base_SetConfig+0x100>)
 8003116:	4293      	cmp	r3, r2
 8003118:	d108      	bne.n	800312c <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	4a24      	ldr	r2, [pc, #144]	@ (80031b0 <TIM_Base_SetConfig+0x104>)
 800311e:	4013      	ands	r3, r2
 8003120:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	68db      	ldr	r3, [r3, #12]
 8003126:	68fa      	ldr	r2, [r7, #12]
 8003128:	4313      	orrs	r3, r2
 800312a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	2280      	movs	r2, #128	@ 0x80
 8003130:	4393      	bics	r3, r2
 8003132:	001a      	movs	r2, r3
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	695b      	ldr	r3, [r3, #20]
 8003138:	4313      	orrs	r3, r2
 800313a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	68fa      	ldr	r2, [r7, #12]
 8003140:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	689a      	ldr	r2, [r3, #8]
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	681a      	ldr	r2, [r3, #0]
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	4a11      	ldr	r2, [pc, #68]	@ (800319c <TIM_Base_SetConfig+0xf0>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d007      	beq.n	800316a <TIM_Base_SetConfig+0xbe>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	4a12      	ldr	r2, [pc, #72]	@ (80031a8 <TIM_Base_SetConfig+0xfc>)
 800315e:	4293      	cmp	r3, r2
 8003160:	d003      	beq.n	800316a <TIM_Base_SetConfig+0xbe>
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	4a11      	ldr	r2, [pc, #68]	@ (80031ac <TIM_Base_SetConfig+0x100>)
 8003166:	4293      	cmp	r3, r2
 8003168:	d103      	bne.n	8003172 <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	691a      	ldr	r2, [r3, #16]
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	2201      	movs	r2, #1
 8003176:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	691b      	ldr	r3, [r3, #16]
 800317c:	2201      	movs	r2, #1
 800317e:	4013      	ands	r3, r2
 8003180:	2b01      	cmp	r3, #1
 8003182:	d106      	bne.n	8003192 <TIM_Base_SetConfig+0xe6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	691b      	ldr	r3, [r3, #16]
 8003188:	2201      	movs	r2, #1
 800318a:	4393      	bics	r3, r2
 800318c:	001a      	movs	r2, r3
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	611a      	str	r2, [r3, #16]
  }
}
 8003192:	46c0      	nop			@ (mov r8, r8)
 8003194:	46bd      	mov	sp, r7
 8003196:	b004      	add	sp, #16
 8003198:	bd80      	pop	{r7, pc}
 800319a:	46c0      	nop			@ (mov r8, r8)
 800319c:	40012c00 	.word	0x40012c00
 80031a0:	40000400 	.word	0x40000400
 80031a4:	40002000 	.word	0x40002000
 80031a8:	40014400 	.word	0x40014400
 80031ac:	40014800 	.word	0x40014800
 80031b0:	fffffcff 	.word	0xfffffcff

080031b4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b086      	sub	sp, #24
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
 80031bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6a1b      	ldr	r3, [r3, #32]
 80031c2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6a1b      	ldr	r3, [r3, #32]
 80031c8:	2201      	movs	r2, #1
 80031ca:	4393      	bics	r3, r2
 80031cc:	001a      	movs	r2, r3
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	685b      	ldr	r3, [r3, #4]
 80031d6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	699b      	ldr	r3, [r3, #24]
 80031dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	4a2e      	ldr	r2, [pc, #184]	@ (800329c <TIM_OC1_SetConfig+0xe8>)
 80031e2:	4013      	ands	r3, r2
 80031e4:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	2203      	movs	r2, #3
 80031ea:	4393      	bics	r3, r2
 80031ec:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	68fa      	ldr	r2, [r7, #12]
 80031f4:	4313      	orrs	r3, r2
 80031f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80031f8:	697b      	ldr	r3, [r7, #20]
 80031fa:	2202      	movs	r2, #2
 80031fc:	4393      	bics	r3, r2
 80031fe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	689b      	ldr	r3, [r3, #8]
 8003204:	697a      	ldr	r2, [r7, #20]
 8003206:	4313      	orrs	r3, r2
 8003208:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	4a24      	ldr	r2, [pc, #144]	@ (80032a0 <TIM_OC1_SetConfig+0xec>)
 800320e:	4293      	cmp	r3, r2
 8003210:	d007      	beq.n	8003222 <TIM_OC1_SetConfig+0x6e>
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	4a23      	ldr	r2, [pc, #140]	@ (80032a4 <TIM_OC1_SetConfig+0xf0>)
 8003216:	4293      	cmp	r3, r2
 8003218:	d003      	beq.n	8003222 <TIM_OC1_SetConfig+0x6e>
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	4a22      	ldr	r2, [pc, #136]	@ (80032a8 <TIM_OC1_SetConfig+0xf4>)
 800321e:	4293      	cmp	r3, r2
 8003220:	d10c      	bne.n	800323c <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003222:	697b      	ldr	r3, [r7, #20]
 8003224:	2208      	movs	r2, #8
 8003226:	4393      	bics	r3, r2
 8003228:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	68db      	ldr	r3, [r3, #12]
 800322e:	697a      	ldr	r2, [r7, #20]
 8003230:	4313      	orrs	r3, r2
 8003232:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003234:	697b      	ldr	r3, [r7, #20]
 8003236:	2204      	movs	r2, #4
 8003238:	4393      	bics	r3, r2
 800323a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	4a18      	ldr	r2, [pc, #96]	@ (80032a0 <TIM_OC1_SetConfig+0xec>)
 8003240:	4293      	cmp	r3, r2
 8003242:	d007      	beq.n	8003254 <TIM_OC1_SetConfig+0xa0>
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	4a17      	ldr	r2, [pc, #92]	@ (80032a4 <TIM_OC1_SetConfig+0xf0>)
 8003248:	4293      	cmp	r3, r2
 800324a:	d003      	beq.n	8003254 <TIM_OC1_SetConfig+0xa0>
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	4a16      	ldr	r2, [pc, #88]	@ (80032a8 <TIM_OC1_SetConfig+0xf4>)
 8003250:	4293      	cmp	r3, r2
 8003252:	d111      	bne.n	8003278 <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003254:	693b      	ldr	r3, [r7, #16]
 8003256:	4a15      	ldr	r2, [pc, #84]	@ (80032ac <TIM_OC1_SetConfig+0xf8>)
 8003258:	4013      	ands	r3, r2
 800325a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800325c:	693b      	ldr	r3, [r7, #16]
 800325e:	4a14      	ldr	r2, [pc, #80]	@ (80032b0 <TIM_OC1_SetConfig+0xfc>)
 8003260:	4013      	ands	r3, r2
 8003262:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	695b      	ldr	r3, [r3, #20]
 8003268:	693a      	ldr	r2, [r7, #16]
 800326a:	4313      	orrs	r3, r2
 800326c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	699b      	ldr	r3, [r3, #24]
 8003272:	693a      	ldr	r2, [r7, #16]
 8003274:	4313      	orrs	r3, r2
 8003276:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	693a      	ldr	r2, [r7, #16]
 800327c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	68fa      	ldr	r2, [r7, #12]
 8003282:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	685a      	ldr	r2, [r3, #4]
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	697a      	ldr	r2, [r7, #20]
 8003290:	621a      	str	r2, [r3, #32]
}
 8003292:	46c0      	nop			@ (mov r8, r8)
 8003294:	46bd      	mov	sp, r7
 8003296:	b006      	add	sp, #24
 8003298:	bd80      	pop	{r7, pc}
 800329a:	46c0      	nop			@ (mov r8, r8)
 800329c:	fffeff8f 	.word	0xfffeff8f
 80032a0:	40012c00 	.word	0x40012c00
 80032a4:	40014400 	.word	0x40014400
 80032a8:	40014800 	.word	0x40014800
 80032ac:	fffffeff 	.word	0xfffffeff
 80032b0:	fffffdff 	.word	0xfffffdff

080032b4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b086      	sub	sp, #24
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
 80032bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6a1b      	ldr	r3, [r3, #32]
 80032c2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6a1b      	ldr	r3, [r3, #32]
 80032c8:	2210      	movs	r2, #16
 80032ca:	4393      	bics	r3, r2
 80032cc:	001a      	movs	r2, r3
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	685b      	ldr	r3, [r3, #4]
 80032d6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	699b      	ldr	r3, [r3, #24]
 80032dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	4a2c      	ldr	r2, [pc, #176]	@ (8003394 <TIM_OC2_SetConfig+0xe0>)
 80032e2:	4013      	ands	r3, r2
 80032e4:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	4a2b      	ldr	r2, [pc, #172]	@ (8003398 <TIM_OC2_SetConfig+0xe4>)
 80032ea:	4013      	ands	r3, r2
 80032ec:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	021b      	lsls	r3, r3, #8
 80032f4:	68fa      	ldr	r2, [r7, #12]
 80032f6:	4313      	orrs	r3, r2
 80032f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80032fa:	697b      	ldr	r3, [r7, #20]
 80032fc:	2220      	movs	r2, #32
 80032fe:	4393      	bics	r3, r2
 8003300:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	689b      	ldr	r3, [r3, #8]
 8003306:	011b      	lsls	r3, r3, #4
 8003308:	697a      	ldr	r2, [r7, #20]
 800330a:	4313      	orrs	r3, r2
 800330c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	4a22      	ldr	r2, [pc, #136]	@ (800339c <TIM_OC2_SetConfig+0xe8>)
 8003312:	4293      	cmp	r3, r2
 8003314:	d10d      	bne.n	8003332 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003316:	697b      	ldr	r3, [r7, #20]
 8003318:	2280      	movs	r2, #128	@ 0x80
 800331a:	4393      	bics	r3, r2
 800331c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	68db      	ldr	r3, [r3, #12]
 8003322:	011b      	lsls	r3, r3, #4
 8003324:	697a      	ldr	r2, [r7, #20]
 8003326:	4313      	orrs	r3, r2
 8003328:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800332a:	697b      	ldr	r3, [r7, #20]
 800332c:	2240      	movs	r2, #64	@ 0x40
 800332e:	4393      	bics	r3, r2
 8003330:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	4a19      	ldr	r2, [pc, #100]	@ (800339c <TIM_OC2_SetConfig+0xe8>)
 8003336:	4293      	cmp	r3, r2
 8003338:	d007      	beq.n	800334a <TIM_OC2_SetConfig+0x96>
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	4a18      	ldr	r2, [pc, #96]	@ (80033a0 <TIM_OC2_SetConfig+0xec>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d003      	beq.n	800334a <TIM_OC2_SetConfig+0x96>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	4a17      	ldr	r2, [pc, #92]	@ (80033a4 <TIM_OC2_SetConfig+0xf0>)
 8003346:	4293      	cmp	r3, r2
 8003348:	d113      	bne.n	8003372 <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800334a:	693b      	ldr	r3, [r7, #16]
 800334c:	4a16      	ldr	r2, [pc, #88]	@ (80033a8 <TIM_OC2_SetConfig+0xf4>)
 800334e:	4013      	ands	r3, r2
 8003350:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003352:	693b      	ldr	r3, [r7, #16]
 8003354:	4a15      	ldr	r2, [pc, #84]	@ (80033ac <TIM_OC2_SetConfig+0xf8>)
 8003356:	4013      	ands	r3, r2
 8003358:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	695b      	ldr	r3, [r3, #20]
 800335e:	009b      	lsls	r3, r3, #2
 8003360:	693a      	ldr	r2, [r7, #16]
 8003362:	4313      	orrs	r3, r2
 8003364:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	699b      	ldr	r3, [r3, #24]
 800336a:	009b      	lsls	r3, r3, #2
 800336c:	693a      	ldr	r2, [r7, #16]
 800336e:	4313      	orrs	r3, r2
 8003370:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	693a      	ldr	r2, [r7, #16]
 8003376:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	68fa      	ldr	r2, [r7, #12]
 800337c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	685a      	ldr	r2, [r3, #4]
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	697a      	ldr	r2, [r7, #20]
 800338a:	621a      	str	r2, [r3, #32]
}
 800338c:	46c0      	nop			@ (mov r8, r8)
 800338e:	46bd      	mov	sp, r7
 8003390:	b006      	add	sp, #24
 8003392:	bd80      	pop	{r7, pc}
 8003394:	feff8fff 	.word	0xfeff8fff
 8003398:	fffffcff 	.word	0xfffffcff
 800339c:	40012c00 	.word	0x40012c00
 80033a0:	40014400 	.word	0x40014400
 80033a4:	40014800 	.word	0x40014800
 80033a8:	fffffbff 	.word	0xfffffbff
 80033ac:	fffff7ff 	.word	0xfffff7ff

080033b0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b086      	sub	sp, #24
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
 80033b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6a1b      	ldr	r3, [r3, #32]
 80033be:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6a1b      	ldr	r3, [r3, #32]
 80033c4:	4a31      	ldr	r2, [pc, #196]	@ (800348c <TIM_OC3_SetConfig+0xdc>)
 80033c6:	401a      	ands	r2, r3
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	685b      	ldr	r3, [r3, #4]
 80033d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	69db      	ldr	r3, [r3, #28]
 80033d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	4a2d      	ldr	r2, [pc, #180]	@ (8003490 <TIM_OC3_SetConfig+0xe0>)
 80033dc:	4013      	ands	r3, r2
 80033de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	2203      	movs	r2, #3
 80033e4:	4393      	bics	r3, r2
 80033e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	68fa      	ldr	r2, [r7, #12]
 80033ee:	4313      	orrs	r3, r2
 80033f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80033f2:	697b      	ldr	r3, [r7, #20]
 80033f4:	4a27      	ldr	r2, [pc, #156]	@ (8003494 <TIM_OC3_SetConfig+0xe4>)
 80033f6:	4013      	ands	r3, r2
 80033f8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	689b      	ldr	r3, [r3, #8]
 80033fe:	021b      	lsls	r3, r3, #8
 8003400:	697a      	ldr	r2, [r7, #20]
 8003402:	4313      	orrs	r3, r2
 8003404:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	4a23      	ldr	r2, [pc, #140]	@ (8003498 <TIM_OC3_SetConfig+0xe8>)
 800340a:	4293      	cmp	r3, r2
 800340c:	d10d      	bne.n	800342a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800340e:	697b      	ldr	r3, [r7, #20]
 8003410:	4a22      	ldr	r2, [pc, #136]	@ (800349c <TIM_OC3_SetConfig+0xec>)
 8003412:	4013      	ands	r3, r2
 8003414:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	68db      	ldr	r3, [r3, #12]
 800341a:	021b      	lsls	r3, r3, #8
 800341c:	697a      	ldr	r2, [r7, #20]
 800341e:	4313      	orrs	r3, r2
 8003420:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003422:	697b      	ldr	r3, [r7, #20]
 8003424:	4a1e      	ldr	r2, [pc, #120]	@ (80034a0 <TIM_OC3_SetConfig+0xf0>)
 8003426:	4013      	ands	r3, r2
 8003428:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	4a1a      	ldr	r2, [pc, #104]	@ (8003498 <TIM_OC3_SetConfig+0xe8>)
 800342e:	4293      	cmp	r3, r2
 8003430:	d007      	beq.n	8003442 <TIM_OC3_SetConfig+0x92>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	4a1b      	ldr	r2, [pc, #108]	@ (80034a4 <TIM_OC3_SetConfig+0xf4>)
 8003436:	4293      	cmp	r3, r2
 8003438:	d003      	beq.n	8003442 <TIM_OC3_SetConfig+0x92>
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	4a1a      	ldr	r2, [pc, #104]	@ (80034a8 <TIM_OC3_SetConfig+0xf8>)
 800343e:	4293      	cmp	r3, r2
 8003440:	d113      	bne.n	800346a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003442:	693b      	ldr	r3, [r7, #16]
 8003444:	4a19      	ldr	r2, [pc, #100]	@ (80034ac <TIM_OC3_SetConfig+0xfc>)
 8003446:	4013      	ands	r3, r2
 8003448:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800344a:	693b      	ldr	r3, [r7, #16]
 800344c:	4a18      	ldr	r2, [pc, #96]	@ (80034b0 <TIM_OC3_SetConfig+0x100>)
 800344e:	4013      	ands	r3, r2
 8003450:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	695b      	ldr	r3, [r3, #20]
 8003456:	011b      	lsls	r3, r3, #4
 8003458:	693a      	ldr	r2, [r7, #16]
 800345a:	4313      	orrs	r3, r2
 800345c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	699b      	ldr	r3, [r3, #24]
 8003462:	011b      	lsls	r3, r3, #4
 8003464:	693a      	ldr	r2, [r7, #16]
 8003466:	4313      	orrs	r3, r2
 8003468:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	693a      	ldr	r2, [r7, #16]
 800346e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	68fa      	ldr	r2, [r7, #12]
 8003474:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	685a      	ldr	r2, [r3, #4]
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	697a      	ldr	r2, [r7, #20]
 8003482:	621a      	str	r2, [r3, #32]
}
 8003484:	46c0      	nop			@ (mov r8, r8)
 8003486:	46bd      	mov	sp, r7
 8003488:	b006      	add	sp, #24
 800348a:	bd80      	pop	{r7, pc}
 800348c:	fffffeff 	.word	0xfffffeff
 8003490:	fffeff8f 	.word	0xfffeff8f
 8003494:	fffffdff 	.word	0xfffffdff
 8003498:	40012c00 	.word	0x40012c00
 800349c:	fffff7ff 	.word	0xfffff7ff
 80034a0:	fffffbff 	.word	0xfffffbff
 80034a4:	40014400 	.word	0x40014400
 80034a8:	40014800 	.word	0x40014800
 80034ac:	ffffefff 	.word	0xffffefff
 80034b0:	ffffdfff 	.word	0xffffdfff

080034b4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b086      	sub	sp, #24
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
 80034bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6a1b      	ldr	r3, [r3, #32]
 80034c2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6a1b      	ldr	r3, [r3, #32]
 80034c8:	4a24      	ldr	r2, [pc, #144]	@ (800355c <TIM_OC4_SetConfig+0xa8>)
 80034ca:	401a      	ands	r2, r3
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	685b      	ldr	r3, [r3, #4]
 80034d4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	69db      	ldr	r3, [r3, #28]
 80034da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	4a20      	ldr	r2, [pc, #128]	@ (8003560 <TIM_OC4_SetConfig+0xac>)
 80034e0:	4013      	ands	r3, r2
 80034e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	4a1f      	ldr	r2, [pc, #124]	@ (8003564 <TIM_OC4_SetConfig+0xb0>)
 80034e8:	4013      	ands	r3, r2
 80034ea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	021b      	lsls	r3, r3, #8
 80034f2:	68fa      	ldr	r2, [r7, #12]
 80034f4:	4313      	orrs	r3, r2
 80034f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80034f8:	693b      	ldr	r3, [r7, #16]
 80034fa:	4a1b      	ldr	r2, [pc, #108]	@ (8003568 <TIM_OC4_SetConfig+0xb4>)
 80034fc:	4013      	ands	r3, r2
 80034fe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	689b      	ldr	r3, [r3, #8]
 8003504:	031b      	lsls	r3, r3, #12
 8003506:	693a      	ldr	r2, [r7, #16]
 8003508:	4313      	orrs	r3, r2
 800350a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	4a17      	ldr	r2, [pc, #92]	@ (800356c <TIM_OC4_SetConfig+0xb8>)
 8003510:	4293      	cmp	r3, r2
 8003512:	d007      	beq.n	8003524 <TIM_OC4_SetConfig+0x70>
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	4a16      	ldr	r2, [pc, #88]	@ (8003570 <TIM_OC4_SetConfig+0xbc>)
 8003518:	4293      	cmp	r3, r2
 800351a:	d003      	beq.n	8003524 <TIM_OC4_SetConfig+0x70>
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	4a15      	ldr	r2, [pc, #84]	@ (8003574 <TIM_OC4_SetConfig+0xc0>)
 8003520:	4293      	cmp	r3, r2
 8003522:	d109      	bne.n	8003538 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003524:	697b      	ldr	r3, [r7, #20]
 8003526:	4a14      	ldr	r2, [pc, #80]	@ (8003578 <TIM_OC4_SetConfig+0xc4>)
 8003528:	4013      	ands	r3, r2
 800352a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	695b      	ldr	r3, [r3, #20]
 8003530:	019b      	lsls	r3, r3, #6
 8003532:	697a      	ldr	r2, [r7, #20]
 8003534:	4313      	orrs	r3, r2
 8003536:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	697a      	ldr	r2, [r7, #20]
 800353c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	68fa      	ldr	r2, [r7, #12]
 8003542:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	685a      	ldr	r2, [r3, #4]
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	693a      	ldr	r2, [r7, #16]
 8003550:	621a      	str	r2, [r3, #32]
}
 8003552:	46c0      	nop			@ (mov r8, r8)
 8003554:	46bd      	mov	sp, r7
 8003556:	b006      	add	sp, #24
 8003558:	bd80      	pop	{r7, pc}
 800355a:	46c0      	nop			@ (mov r8, r8)
 800355c:	ffffefff 	.word	0xffffefff
 8003560:	feff8fff 	.word	0xfeff8fff
 8003564:	fffffcff 	.word	0xfffffcff
 8003568:	ffffdfff 	.word	0xffffdfff
 800356c:	40012c00 	.word	0x40012c00
 8003570:	40014400 	.word	0x40014400
 8003574:	40014800 	.word	0x40014800
 8003578:	ffffbfff 	.word	0xffffbfff

0800357c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	b086      	sub	sp, #24
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
 8003584:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6a1b      	ldr	r3, [r3, #32]
 800358a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6a1b      	ldr	r3, [r3, #32]
 8003590:	4a21      	ldr	r2, [pc, #132]	@ (8003618 <TIM_OC5_SetConfig+0x9c>)
 8003592:	401a      	ands	r2, r3
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	685b      	ldr	r3, [r3, #4]
 800359c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	4a1d      	ldr	r2, [pc, #116]	@ (800361c <TIM_OC5_SetConfig+0xa0>)
 80035a8:	4013      	ands	r3, r2
 80035aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	68fa      	ldr	r2, [r7, #12]
 80035b2:	4313      	orrs	r3, r2
 80035b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80035b6:	693b      	ldr	r3, [r7, #16]
 80035b8:	4a19      	ldr	r2, [pc, #100]	@ (8003620 <TIM_OC5_SetConfig+0xa4>)
 80035ba:	4013      	ands	r3, r2
 80035bc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	689b      	ldr	r3, [r3, #8]
 80035c2:	041b      	lsls	r3, r3, #16
 80035c4:	693a      	ldr	r2, [r7, #16]
 80035c6:	4313      	orrs	r3, r2
 80035c8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	4a15      	ldr	r2, [pc, #84]	@ (8003624 <TIM_OC5_SetConfig+0xa8>)
 80035ce:	4293      	cmp	r3, r2
 80035d0:	d007      	beq.n	80035e2 <TIM_OC5_SetConfig+0x66>
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	4a14      	ldr	r2, [pc, #80]	@ (8003628 <TIM_OC5_SetConfig+0xac>)
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d003      	beq.n	80035e2 <TIM_OC5_SetConfig+0x66>
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	4a13      	ldr	r2, [pc, #76]	@ (800362c <TIM_OC5_SetConfig+0xb0>)
 80035de:	4293      	cmp	r3, r2
 80035e0:	d109      	bne.n	80035f6 <TIM_OC5_SetConfig+0x7a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80035e2:	697b      	ldr	r3, [r7, #20]
 80035e4:	4a0c      	ldr	r2, [pc, #48]	@ (8003618 <TIM_OC5_SetConfig+0x9c>)
 80035e6:	4013      	ands	r3, r2
 80035e8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	695b      	ldr	r3, [r3, #20]
 80035ee:	021b      	lsls	r3, r3, #8
 80035f0:	697a      	ldr	r2, [r7, #20]
 80035f2:	4313      	orrs	r3, r2
 80035f4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	697a      	ldr	r2, [r7, #20]
 80035fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	68fa      	ldr	r2, [r7, #12]
 8003600:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	685a      	ldr	r2, [r3, #4]
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	693a      	ldr	r2, [r7, #16]
 800360e:	621a      	str	r2, [r3, #32]
}
 8003610:	46c0      	nop			@ (mov r8, r8)
 8003612:	46bd      	mov	sp, r7
 8003614:	b006      	add	sp, #24
 8003616:	bd80      	pop	{r7, pc}
 8003618:	fffeffff 	.word	0xfffeffff
 800361c:	fffeff8f 	.word	0xfffeff8f
 8003620:	fffdffff 	.word	0xfffdffff
 8003624:	40012c00 	.word	0x40012c00
 8003628:	40014400 	.word	0x40014400
 800362c:	40014800 	.word	0x40014800

08003630 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	b086      	sub	sp, #24
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
 8003638:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6a1b      	ldr	r3, [r3, #32]
 800363e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6a1b      	ldr	r3, [r3, #32]
 8003644:	4a22      	ldr	r2, [pc, #136]	@ (80036d0 <TIM_OC6_SetConfig+0xa0>)
 8003646:	401a      	ands	r2, r3
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	685b      	ldr	r3, [r3, #4]
 8003650:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003656:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	4a1e      	ldr	r2, [pc, #120]	@ (80036d4 <TIM_OC6_SetConfig+0xa4>)
 800365c:	4013      	ands	r3, r2
 800365e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	021b      	lsls	r3, r3, #8
 8003666:	68fa      	ldr	r2, [r7, #12]
 8003668:	4313      	orrs	r3, r2
 800366a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800366c:	693b      	ldr	r3, [r7, #16]
 800366e:	4a1a      	ldr	r2, [pc, #104]	@ (80036d8 <TIM_OC6_SetConfig+0xa8>)
 8003670:	4013      	ands	r3, r2
 8003672:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	689b      	ldr	r3, [r3, #8]
 8003678:	051b      	lsls	r3, r3, #20
 800367a:	693a      	ldr	r2, [r7, #16]
 800367c:	4313      	orrs	r3, r2
 800367e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	4a16      	ldr	r2, [pc, #88]	@ (80036dc <TIM_OC6_SetConfig+0xac>)
 8003684:	4293      	cmp	r3, r2
 8003686:	d007      	beq.n	8003698 <TIM_OC6_SetConfig+0x68>
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	4a15      	ldr	r2, [pc, #84]	@ (80036e0 <TIM_OC6_SetConfig+0xb0>)
 800368c:	4293      	cmp	r3, r2
 800368e:	d003      	beq.n	8003698 <TIM_OC6_SetConfig+0x68>
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	4a14      	ldr	r2, [pc, #80]	@ (80036e4 <TIM_OC6_SetConfig+0xb4>)
 8003694:	4293      	cmp	r3, r2
 8003696:	d109      	bne.n	80036ac <TIM_OC6_SetConfig+0x7c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003698:	697b      	ldr	r3, [r7, #20]
 800369a:	4a13      	ldr	r2, [pc, #76]	@ (80036e8 <TIM_OC6_SetConfig+0xb8>)
 800369c:	4013      	ands	r3, r2
 800369e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	695b      	ldr	r3, [r3, #20]
 80036a4:	029b      	lsls	r3, r3, #10
 80036a6:	697a      	ldr	r2, [r7, #20]
 80036a8:	4313      	orrs	r3, r2
 80036aa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	697a      	ldr	r2, [r7, #20]
 80036b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	68fa      	ldr	r2, [r7, #12]
 80036b6:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	685a      	ldr	r2, [r3, #4]
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	693a      	ldr	r2, [r7, #16]
 80036c4:	621a      	str	r2, [r3, #32]
}
 80036c6:	46c0      	nop			@ (mov r8, r8)
 80036c8:	46bd      	mov	sp, r7
 80036ca:	b006      	add	sp, #24
 80036cc:	bd80      	pop	{r7, pc}
 80036ce:	46c0      	nop			@ (mov r8, r8)
 80036d0:	ffefffff 	.word	0xffefffff
 80036d4:	feff8fff 	.word	0xfeff8fff
 80036d8:	ffdfffff 	.word	0xffdfffff
 80036dc:	40012c00 	.word	0x40012c00
 80036e0:	40014400 	.word	0x40014400
 80036e4:	40014800 	.word	0x40014800
 80036e8:	fffbffff 	.word	0xfffbffff

080036ec <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b086      	sub	sp, #24
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	60f8      	str	r0, [r7, #12]
 80036f4:	60b9      	str	r1, [r7, #8]
 80036f6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80036f8:	68bb      	ldr	r3, [r7, #8]
 80036fa:	221f      	movs	r2, #31
 80036fc:	4013      	ands	r3, r2
 80036fe:	2201      	movs	r2, #1
 8003700:	409a      	lsls	r2, r3
 8003702:	0013      	movs	r3, r2
 8003704:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	6a1b      	ldr	r3, [r3, #32]
 800370a:	697a      	ldr	r2, [r7, #20]
 800370c:	43d2      	mvns	r2, r2
 800370e:	401a      	ands	r2, r3
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	6a1a      	ldr	r2, [r3, #32]
 8003718:	68bb      	ldr	r3, [r7, #8]
 800371a:	211f      	movs	r1, #31
 800371c:	400b      	ands	r3, r1
 800371e:	6879      	ldr	r1, [r7, #4]
 8003720:	4099      	lsls	r1, r3
 8003722:	000b      	movs	r3, r1
 8003724:	431a      	orrs	r2, r3
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	621a      	str	r2, [r3, #32]
}
 800372a:	46c0      	nop			@ (mov r8, r8)
 800372c:	46bd      	mov	sp, r7
 800372e:	b006      	add	sp, #24
 8003730:	bd80      	pop	{r7, pc}
	...

08003734 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003734:	b580      	push	{r7, lr}
 8003736:	b084      	sub	sp, #16
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
 800373c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	223c      	movs	r2, #60	@ 0x3c
 8003742:	5c9b      	ldrb	r3, [r3, r2]
 8003744:	2b01      	cmp	r3, #1
 8003746:	d101      	bne.n	800374c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003748:	2302      	movs	r3, #2
 800374a:	e050      	b.n	80037ee <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	223c      	movs	r2, #60	@ 0x3c
 8003750:	2101      	movs	r1, #1
 8003752:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	223d      	movs	r2, #61	@ 0x3d
 8003758:	2102      	movs	r1, #2
 800375a:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	685b      	ldr	r3, [r3, #4]
 8003762:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	689b      	ldr	r3, [r3, #8]
 800376a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	4a21      	ldr	r2, [pc, #132]	@ (80037f8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8003772:	4293      	cmp	r3, r2
 8003774:	d108      	bne.n	8003788 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	4a20      	ldr	r2, [pc, #128]	@ (80037fc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800377a:	4013      	ands	r3, r2
 800377c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	685b      	ldr	r3, [r3, #4]
 8003782:	68fa      	ldr	r2, [r7, #12]
 8003784:	4313      	orrs	r3, r2
 8003786:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	2270      	movs	r2, #112	@ 0x70
 800378c:	4393      	bics	r3, r2
 800378e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	68fa      	ldr	r2, [r7, #12]
 8003796:	4313      	orrs	r3, r2
 8003798:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	68fa      	ldr	r2, [r7, #12]
 80037a0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	4a14      	ldr	r2, [pc, #80]	@ (80037f8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80037a8:	4293      	cmp	r3, r2
 80037aa:	d00a      	beq.n	80037c2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681a      	ldr	r2, [r3, #0]
 80037b0:	2380      	movs	r3, #128	@ 0x80
 80037b2:	05db      	lsls	r3, r3, #23
 80037b4:	429a      	cmp	r2, r3
 80037b6:	d004      	beq.n	80037c2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4a10      	ldr	r2, [pc, #64]	@ (8003800 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	d10c      	bne.n	80037dc <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80037c2:	68bb      	ldr	r3, [r7, #8]
 80037c4:	2280      	movs	r2, #128	@ 0x80
 80037c6:	4393      	bics	r3, r2
 80037c8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	689b      	ldr	r3, [r3, #8]
 80037ce:	68ba      	ldr	r2, [r7, #8]
 80037d0:	4313      	orrs	r3, r2
 80037d2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	68ba      	ldr	r2, [r7, #8]
 80037da:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	223d      	movs	r2, #61	@ 0x3d
 80037e0:	2101      	movs	r1, #1
 80037e2:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	223c      	movs	r2, #60	@ 0x3c
 80037e8:	2100      	movs	r1, #0
 80037ea:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80037ec:	2300      	movs	r3, #0
}
 80037ee:	0018      	movs	r0, r3
 80037f0:	46bd      	mov	sp, r7
 80037f2:	b004      	add	sp, #16
 80037f4:	bd80      	pop	{r7, pc}
 80037f6:	46c0      	nop			@ (mov r8, r8)
 80037f8:	40012c00 	.word	0x40012c00
 80037fc:	ff0fffff 	.word	0xff0fffff
 8003800:	40000400 	.word	0x40000400

08003804 <memset>:
 8003804:	0003      	movs	r3, r0
 8003806:	1882      	adds	r2, r0, r2
 8003808:	4293      	cmp	r3, r2
 800380a:	d100      	bne.n	800380e <memset+0xa>
 800380c:	4770      	bx	lr
 800380e:	7019      	strb	r1, [r3, #0]
 8003810:	3301      	adds	r3, #1
 8003812:	e7f9      	b.n	8003808 <memset+0x4>

08003814 <__libc_init_array>:
 8003814:	b570      	push	{r4, r5, r6, lr}
 8003816:	2600      	movs	r6, #0
 8003818:	4c0c      	ldr	r4, [pc, #48]	@ (800384c <__libc_init_array+0x38>)
 800381a:	4d0d      	ldr	r5, [pc, #52]	@ (8003850 <__libc_init_array+0x3c>)
 800381c:	1b64      	subs	r4, r4, r5
 800381e:	10a4      	asrs	r4, r4, #2
 8003820:	42a6      	cmp	r6, r4
 8003822:	d109      	bne.n	8003838 <__libc_init_array+0x24>
 8003824:	2600      	movs	r6, #0
 8003826:	f000 f819 	bl	800385c <_init>
 800382a:	4c0a      	ldr	r4, [pc, #40]	@ (8003854 <__libc_init_array+0x40>)
 800382c:	4d0a      	ldr	r5, [pc, #40]	@ (8003858 <__libc_init_array+0x44>)
 800382e:	1b64      	subs	r4, r4, r5
 8003830:	10a4      	asrs	r4, r4, #2
 8003832:	42a6      	cmp	r6, r4
 8003834:	d105      	bne.n	8003842 <__libc_init_array+0x2e>
 8003836:	bd70      	pop	{r4, r5, r6, pc}
 8003838:	00b3      	lsls	r3, r6, #2
 800383a:	58eb      	ldr	r3, [r5, r3]
 800383c:	4798      	blx	r3
 800383e:	3601      	adds	r6, #1
 8003840:	e7ee      	b.n	8003820 <__libc_init_array+0xc>
 8003842:	00b3      	lsls	r3, r6, #2
 8003844:	58eb      	ldr	r3, [r5, r3]
 8003846:	4798      	blx	r3
 8003848:	3601      	adds	r6, #1
 800384a:	e7f2      	b.n	8003832 <__libc_init_array+0x1e>
 800384c:	08003908 	.word	0x08003908
 8003850:	08003908 	.word	0x08003908
 8003854:	0800390c 	.word	0x0800390c
 8003858:	08003908 	.word	0x08003908

0800385c <_init>:
 800385c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800385e:	46c0      	nop			@ (mov r8, r8)
 8003860:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003862:	bc08      	pop	{r3}
 8003864:	469e      	mov	lr, r3
 8003866:	4770      	bx	lr

08003868 <_fini>:
 8003868:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800386a:	46c0      	nop			@ (mov r8, r8)
 800386c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800386e:	bc08      	pop	{r3}
 8003870:	469e      	mov	lr, r3
 8003872:	4770      	bx	lr
